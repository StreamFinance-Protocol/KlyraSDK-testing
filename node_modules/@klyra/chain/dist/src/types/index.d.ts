import { type BroadcastTxAsyncResponse, type BroadcastTxSyncResponse, type Method } from "@cosmjs/tendermint-rpc";
import type Long from "long";
import { type Order_ConditionType, type Order_Side, type Order_TimeInForce } from "@klyra/proto/src/codegen/klyraprotocol/clob/order";
import { type IndexedTx } from "@cosmjs/stargate";
export interface IndexerClientConfig {
    urls: {
        rest: string;
        ws: string;
    };
}
export interface NodeClientConfig {
    restUrl: string;
    chainId: string;
    defaultClientMemo?: string;
    broadcastOptions?: BroadcastOptions;
    useTimestampNonce?: boolean;
}
export interface BroadcastOptions {
    pollIntervalMs: number;
    timeoutMs: number;
}
export type BroadcastMode = Method.BroadcastTxAsync | Method.BroadcastTxSync | Method.BroadcastTxCommit;
export interface PartialTransactionOptions {
    accountNumber: number;
    chainId: string;
}
export interface TransactionOptions extends PartialTransactionOptions {
    sequence: number;
}
export declare enum OrderFlags {
    SHORT_TERM = 0,
    LONG_TERM = 64,
    CONDITIONAL = 32
}
export interface IBasicOrder {
    clientId: number;
    orderFlags: OrderFlags;
    clobPairId: number;
    goodTilBlock?: number;
    goodTilBlockTime?: number;
}
export interface IPlaceOrder extends IBasicOrder {
    side: Order_Side;
    quantums: Long;
    subticks: Long;
    routerFeePpm: number;
    timeInForce: Order_TimeInForce;
    reduceOnly: boolean;
    clientMetadata: number;
    conditionType?: Order_ConditionType;
    conditionalOrderTriggerSubticks?: Long;
}
export type ICancelOrder = IBasicOrder;
export interface IBatchCancelOrder {
    shortTermOrders: {
        clobPairId: number;
        clientIds: number[];
    }[];
    goodTilBlock: number;
}
export type TxResponsePromise = Promise<BroadcastTxAsyncResponse | BroadcastTxSyncResponse | IndexedTx>;
export * from "../lib/proto-includes";
