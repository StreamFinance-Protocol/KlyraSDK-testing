"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stargate_1 = require("@cosmjs/stargate");
const AuthModule = __importStar(require("cosmjs-types/cosmos/auth/v1beta1/query"));
const BankModule = __importStar(require("cosmjs-types/cosmos/bank/v1beta1/query"));
const long_1 = __importDefault(require("long"));
const protobufjs_1 = __importDefault(require("protobufjs"));
const proto_includes_1 = require("../lib/proto-includes");
const errors_1 = require("../lib/errors");
const constants_1 = require("../constants");
// Required for encoding and decoding queries that are of type Long.
// Must be done once but since the individal modules should be usable without
// Reference: https://github.com/protobufjs/protobuf.js/issues/921
protobufjs_1.default.util.Long = long_1.default;
protobufjs_1.default.configure();
class NodeGet {
    constructor(tendermintClient, stargateQueryClient) {
        this.tendermintClient = tendermintClient;
        this.stargateQueryClient = stargateQueryClient;
    }
    /**
     * @description Get latest block
     *
     * @returns last block structure
     */
    async latestBlock() {
        return this.tendermintClient.getBlock();
    }
    /**
     * @description Get latest block height
     *
     * @returns last height
     */
    async latestBlockHeight() {
        const block = await this.latestBlock();
        return block.header.height;
    }
    /**
     * @description Get all fee tier params.
     *
     * @returns All fee tier params.
     */
    async getFeeTiers() {
        const requestData = Uint8Array.from(proto_includes_1.FeeTierModule.QueryPerpetualFeeParamsRequest.encode({}).finish());
        const data = await this.sendQuery("/klyraprotocol.feetiers.Query/PerpetualFeeParams", requestData);
        return proto_includes_1.FeeTierModule.QueryPerpetualFeeParamsResponse.decode(data);
    }
    /**
     * @description Get fee tier the user belongs to
     *
     * @returns the fee tier user belongs to.
     */
    async getUserFeeTier(address) {
        const requestData = Uint8Array.from(proto_includes_1.FeeTierModule.QueryUserFeeTierRequest.encode({ user: address }).finish());
        const data = await this.sendQuery("/klyraprotocol.feetiers.Query/UserFeeTier", requestData);
        return proto_includes_1.FeeTierModule.QueryUserFeeTierResponse.decode(data);
    }
    // /**
    //  * @description Get get trading stats
    //  *
    //  * @returns return the user's taker and maker volume
    //  */
    // async getUserStats(
    //   address: string
    // ): Promise<{ takerNotional: Long; makerNotional: Long } | undefined> {
    //   const requestData = Uint8Array.from(
    //     StatsModule.QueryUserStatsRequest.encode({ user: address }).finish()
    //   );
    //   const data: Uint8Array = await this.sendQuery(
    //     "/klyraprotocol.stats.Query/UserStats",
    //     requestData
    //   );
    //   return StatsModule.QueryUserStatsResponse.decode(data).stats;
    // }
    /**
     * @description Get all balances for an account.
     *
     * @returns Array of Coin balances for all tokens held by an account.
     */
    async getAccountBalances(address) {
        const requestData = Uint8Array.from(BankModule.QueryAllBalancesRequest.encode({ address }).finish());
        const data = await this.sendQuery("/cosmos.bank.v1beta1.Query/AllBalances", requestData);
        return BankModule.QueryAllBalancesResponse.decode(data).balances;
    }
    /**
     * @description Get balances of one denom for an account.
     *
     * @returns Coin balance for denom tokens held by an account.
     */
    async getAccountBalance(address, denom) {
        const requestData = Uint8Array.from(BankModule.QueryBalanceRequest.encode({
            address,
            denom,
        }).finish());
        const data = await this.sendQuery("/cosmos.bank.v1beta1.Query/Balance", requestData);
        const coin = BankModule.QueryBalanceResponse.decode(data).balance;
        return coin;
    }
    /**
     * @description Get all subaccounts
     *
     * @returns All subaccounts
     */
    async getSubaccounts() {
        const requestData = Uint8Array.from(proto_includes_1.SubaccountsModule.QueryAllSubaccountRequest.encode({}).finish());
        const data = await this.sendQuery("/klyraprotocol.subaccounts.Query/SubaccountAll", requestData);
        return proto_includes_1.SubaccountsModule.QuerySubaccountAllResponse.decode(data);
    }
    /**
     * @description Get a specific subaccount for an account.
     *
     * @returns Subaccount for account with given accountNumber or default subaccount if none exists.
     */
    async getSubaccount(address, accountNumber) {
        const requestData = Uint8Array.from(proto_includes_1.SubaccountsModule.QueryGetSubaccountRequest.encode({
            owner: address,
            number: accountNumber,
        }).finish());
        const data = await this.sendQuery("/klyraprotocol.subaccounts.Query/Subaccount", requestData);
        return proto_includes_1.SubaccountsModule.QuerySubaccountResponse.decode(data);
    }
    /**
     * @description Get all Clob Pairs.
     *
     * @returns Information on all Clob Pairs.
     */
    async getAllClobPairs() {
        const requestData = Uint8Array.from(proto_includes_1.ClobModule.QueryAllClobPairRequest.encode({
            pagination: constants_1.PAGE_REQUEST,
        }).finish());
        const data = await this.sendQuery("/klyraprotocol.clob.Query/ClobPairAll", requestData);
        return proto_includes_1.ClobModule.QueryClobPairAllResponse.decode(data);
    }
    /**
     * @description Get Clob Pair for an Id or the promise is rejected if no pair exists.
     *
     * @returns Clob Pair for a given Clob Pair Id.
     */
    async getClobPair(pairId) {
        const requestData = Uint8Array.from(proto_includes_1.ClobModule.QueryGetClobPairRequest.encode({ id: pairId }).finish());
        const data = await this.sendQuery("/klyraprotocol.clob.Query/ClobPair", requestData);
        return proto_includes_1.ClobModule.QueryClobPairResponse.decode(data);
    }
    /**
     * @description Get all Prices across markets.
     *
     * @returns Prices across all markets.
     */
    async getAllPrices() {
        const requestData = Uint8Array.from(proto_includes_1.PricesModule.QueryAllMarketPricesRequest.encode({
            pagination: constants_1.PAGE_REQUEST,
        }).finish());
        const data = await this.sendQuery("/klyraprotocol.prices.Query/AllMarketPrices", requestData);
        return proto_includes_1.PricesModule.QueryAllMarketPricesResponse.decode(data);
    }
    /**
     * @description Get Price for a clob Id or the promise is rejected if none exists.
     *
     * @returns Price for a given Market Id.
     */
    async getPrice(marketId) {
        const requestData = Uint8Array.from(proto_includes_1.PricesModule.QueryMarketPriceRequest.encode({ id: marketId }).finish());
        const data = await this.sendQuery("/klyraprotocol.prices.Query/MarketPrice", requestData);
        return proto_includes_1.PricesModule.QueryMarketPriceResponse.decode(data);
    }
    /**
     * @description Get all Perpetuals.
     *
     * @returns Information on all Perpetual pairs.
     */
    async getAllPerpetuals() {
        const requestData = Uint8Array.from(proto_includes_1.PerpetualsModule.QueryAllPerpetualsRequest.encode({
            pagination: constants_1.PAGE_REQUEST,
        }).finish());
        const data = await this.sendQuery("/klyraprotocol.perpetuals.Query/AllPerpetuals", requestData);
        return proto_includes_1.PerpetualsModule.QueryAllPerpetualsResponse.decode(data);
    }
    /**
     * @description Get Perpetual for an Id or the promise is rejected if none exists.
     *
     * @returns The Perpetual for a given Perpetual Id.
     */
    async getPerpetual(perpetualId) {
        const requestData = Uint8Array.from(proto_includes_1.PerpetualsModule.QueryPerpetualRequest.encode({
            id: perpetualId,
        }).finish());
        const data = await this.sendQuery("/klyraprotocol.perpetuals.Query/Perpetual", requestData);
        return proto_includes_1.PerpetualsModule.QueryPerpetualResponse.decode(data);
    }
    /**
     * @description Get Account for an address or the promise is rejected if the account
     * does not exist on-chain.
     *
     * @throws UnexpectedClientError if a malformed response is returned with no GRPC error.
     * @returns An account for a given address.
     */
    async getAccount(address) {
        const requestData = Uint8Array.from(AuthModule.QueryAccountRequest.encode({ address }).finish());
        const data = await this.sendQuery("/cosmos.auth.v1beta1.Query/Account", requestData);
        const rawAccount = AuthModule.QueryAccountResponse.decode(data).account;
        // The promise should have been rejected if the rawAccount was undefined.
        if (rawAccount === undefined) {
            throw new errors_1.UnexpectedClientError();
        }
        return (0, stargate_1.accountFromAny)(rawAccount);
    }
    /**
     * @description Get equity tier limit configuration.
     *
     * @returns Information on all equity tiers that are configured.
     */
    async getEquityTierLimitConfiguration() {
        const requestData = Uint8Array.from(proto_includes_1.ClobModule.QueryEquityTierLimitConfigurationRequest.encode({}).finish());
        const data = await this.sendQuery("/klyraprotocol.clob.Query/EquityTierLimitConfiguration", requestData);
        return proto_includes_1.ClobModule.QueryEquityTierLimitConfigurationResponse.decode(data);
    }
    async getWithdrawalAndTransferGatingStatus(perpetualId) {
        const requestData = Uint8Array.from(proto_includes_1.SubaccountsModule.QueryGetWithdrawalAndTransfersBlockedInfoRequest.encode({
            perpetualId,
        }).finish());
        const data = await this.sendQuery("/klyraprotocol.subaccounts.Query/GetWithdrawalAndTransfersBlockedInfo", requestData);
        return proto_includes_1.SubaccountsModule.QueryGetWithdrawalAndTransfersBlockedInfoResponse.decode(data);
    }
    async getWithdrawalCapacityByDenom(denom) {
        const requestData = Uint8Array.from(proto_includes_1.RateLimitModule.QueryCapacityByDenomRequest.encode({
            denom,
        }).finish());
        const data = await this.sendQuery("/klyraprotocol.ratelimit.Query/CapacityByDenom", requestData);
        return proto_includes_1.RateLimitModule.QueryCapacityByDenomResponse.decode(data);
    }
    async sendQuery(requestUrl, requestData) {
        const resp = await this.stargateQueryClient.queryAbci(requestUrl, requestData);
        return resp.value;
    }
}
exports.default = NodeGet;
//# sourceMappingURL=data:application/json;base64,