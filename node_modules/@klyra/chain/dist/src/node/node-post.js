"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const math_1 = require("@cosmjs/math");
const stargate_1 = require("@cosmjs/stargate");
const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
const long_1 = __importDefault(require("long"));
const protobufjs_1 = __importDefault(require("protobufjs"));
const constants_1 = require("../constants");
const errors_1 = require("../lib/errors");
const registry_1 = require("../lib/registry");
const types_1 = require("../types");
const composer_1 = __importDefault(require("../lib/composer"));
const proto_includes_1 = require("../lib/proto-includes");
// Required for encoding and decoding queries that are of type Long.
// Must be done once but since the individal modules should be usable
// - must be set in each module that encounters encoding/decoding Longs.
// Reference: https://github.com/protobufjs/protobuf.js/issues/921
protobufjs_1.default.util.Long = long_1.default;
protobufjs_1.default.configure();
class NodePost {
    constructor(get, chainId, defaultClientMemo, useTimestampNonce) {
        this.useTimestampNonce = false;
        this.accountNumberCache = new Map();
        this.get = get;
        this.chainId = chainId;
        this.registry = (0, registry_1.generateRegistry)();
        this.composer = new composer_1.default();
        this.defaultClientMemo = defaultClientMemo;
        this.defaultGasPrice = stargate_1.GasPrice.fromString(`0.025${constants_1.TDAI_DENOM}`);
        if (useTimestampNonce === true)
            this.useTimestampNonce = useTimestampNonce;
    }
    /**
     * @description Retrieves the account number for the given wallet address and populates the accountNumberCache.
     * The account number is required for txOptions when signing a transaction.
     * Pre-populating the cache avoids a round-trip request during the first transaction creation in the session, preventing it from being a performance blocker.
     */
    async populateAccountNumberCache(address) {
        if (this.accountNumberCache.has(address))
            return;
        const account = await this.get.getAccount(address);
        this.accountNumberCache.set(address, account);
    }
    getGasPrice() {
        return this.defaultGasPrice;
    }
    /**
     * @description Simulate a transaction
     * the calling function is responsible for creating the messages.
     *
     * @throws UnexpectedClientError if a malformed response is returned with no GRPC error
     * at any point.
     * @returns The Fee for broadcasting a transaction.
     */
    async simulate(wallet, messaging, gasPrice = this.getGasPrice(), memo, account) {
        let msgs;
        // protocol expects timestamp nonce in UTC milliseconds, which is the unit returned by Date.now()
        let sequence = Date.now();
        if (this.useTimestampNonce) {
            msgs = await messaging();
        }
        else {
            const msgsPromise = messaging();
            const accountPromise = account
                ? await account()
                : this.account(wallet.getAddress());
            const msgsAndAccount = await Promise.all([msgsPromise, accountPromise]);
            msgs = msgsAndAccount[0];
            sequence = msgsAndAccount[1].sequence;
        }
        return this.simulateTransaction(wallet.getPubKey(), sequence, msgs, gasPrice, memo);
    }
    /**
     * @description Sign a transaction
     * the calling function is responsible for creating the messages.
     *
     * @throws UnexpectedClientError if a malformed response is returned with no GRPC error
     * at any point.
     * @returns The Signature.
     */
    async sign(wallet, messaging, zeroFee, gasPrice = this.getGasPrice(), memo, account) {
        const msgsPromise = await messaging();
        const accountPromise = account
            ? await account()
            : this.account(wallet.getAddress());
        const msgsAndAccount = await Promise.all([msgsPromise, accountPromise]);
        const msgs = msgsAndAccount[0];
        return this.signTransaction(wallet, msgs, msgsAndAccount[1], zeroFee, gasPrice, memo);
    }
    /**
     * @description Send a transaction
     * the calling function is responsible for creating the messages.
     *
     * @throws UnexpectedClientError if a malformed response is returned with no GRPC error
     * at any point.
     * @returns The Tx Hash.
     */
    async send(wallet, messaging, zeroFee, gasPrice = this.getGasPrice(), memo, broadcastMode, account, gasAdjustment = constants_1.GAS_MULTIPLIER) {
        const msgsPromise = messaging();
        const accountPromise = account
            ? await account()
            : this.account(wallet.getAddress());
        const msgsAndAccount = await Promise.all([msgsPromise, accountPromise]);
        const msgs = msgsAndAccount[0];
        return this.signAndSendTransaction(wallet, msgsAndAccount[1], msgs, zeroFee, gasPrice, memo !== null && memo !== void 0 ? memo : this.defaultClientMemo, broadcastMode !== null && broadcastMode !== void 0 ? broadcastMode : this.defaultBroadcastMode(msgs), gasAdjustment);
    }
    /**
     * @description Calculate the default broadcast mode.
     */
    defaultBroadcastMode(msgs) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (msgs.length === 1 &&
            (((_a = msgs[0]) === null || _a === void 0 ? void 0 : _a.typeUrl) === "/klyraprotocol.clob.MsgPlaceOrder" ||
                ((_b = msgs[0]) === null || _b === void 0 ? void 0 : _b.typeUrl) === "/klyraprotocol.clob.MsgCancelOrder")) {
            const orderFlags = ((_c = msgs[0]) === null || _c === void 0 ? void 0 : _c.typeUrl) === "/klyraprotocol.clob.MsgPlaceOrder"
                ? (_f = (_e = ((_d = msgs[0]) === null || _d === void 0 ? void 0 : _d.value).order) === null || _e === void 0 ? void 0 : _e.orderId) === null || _f === void 0 ? void 0 : _f.orderFlags
                : (_h = ((_g = msgs[0]) === null || _g === void 0 ? void 0 : _g.value).orderId) === null || _h === void 0 ? void 0 : _h.orderFlags;
            switch (orderFlags) {
                case types_1.OrderFlags.SHORT_TERM:
                    return tendermint_rpc_1.Method.BroadcastTxSync;
                case types_1.OrderFlags.LONG_TERM:
                case types_1.OrderFlags.CONDITIONAL:
                    return tendermint_rpc_1.Method.BroadcastTxCommit;
                default:
                    break;
            }
        }
        return tendermint_rpc_1.Method.BroadcastTxSync;
    }
    /**
     * @description Sign and send a message
     *
     * @returns The Tx Response.
     */
    async signTransaction(wallet, messages, account, zeroFee, gasPrice = this.getGasPrice(), memo, gasAdjustment = constants_1.GAS_MULTIPLIER) {
        // protocol expects timestamp nonce in UTC milliseconds, which is the unit returned by Date.now()
        const sequence = this.useTimestampNonce ? Date.now() : account.sequence;
        // Simulate transaction if no fee is specified.
        const fee = zeroFee
            ? {
                amount: [],
                gas: "1000000",
            }
            : await this.simulateTransaction(wallet.getPubKey(), sequence, messages, gasPrice, memo, gasAdjustment);
        const txOptions = {
            sequence,
            accountNumber: account.accountNumber,
            chainId: this.chainId,
        };
        // Generate signed transaction.
        return wallet.signTransaction(messages, txOptions, fee, memo);
    }
    /**
     * @description Retrieve an account structure for transactions.
     * For short term orders, the sequence doesn't matter. Use cached if available.
     * For long term and conditional orders, a round trip to validator must be made.
     * when timestamp nonce is supported, no need to fetch account sequence number
     */
    async account(address, orderFlags) {
        if (orderFlags === types_1.OrderFlags.SHORT_TERM || this.useTimestampNonce) {
            if (this.accountNumberCache.has(address)) {
                // If order is SHORT_TERM or if timestamp nonce is enabled, the sequence doesn't matter
                return this.accountNumberCache.get(address);
            }
        }
        const account = await this.get.getAccount(address);
        this.accountNumberCache.set(address, account);
        return account;
    }
    /**
     * @description Sign and send a message
     *
     * @returns The Tx Response.
     */
    async signAndSendTransaction(wallet, account, messages, zeroFee, gasPrice = this.getGasPrice(), memo, broadcastMode, gasAdjustment = constants_1.GAS_MULTIPLIER) {
        const signedTransaction = await this.signTransaction(wallet, messages, account, zeroFee, gasPrice, memo, gasAdjustment);
        return this.sendSignedTransaction(signedTransaction, broadcastMode);
    }
    /**
     * @description Send signed transaction.
     *
     * @returns The Tx Response.
     */
    async sendSignedTransaction(signedTransaction, broadcastMode) {
        return this.get.tendermintClient.broadcastTransaction(signedTransaction, broadcastMode !== null && broadcastMode !== void 0 ? broadcastMode : tendermint_rpc_1.Method.BroadcastTxSync);
    }
    /**
     * @description Simulate broadcasting a transaction.
     *
     * @throws UnexpectedClientError if a malformed response is returned with no GRPC error
     * at any point.
     * @returns The Fee for broadcasting a transaction.
     */
    async simulateTransaction(pubKey, sequence, messages, gasPrice = this.getGasPrice(), memo, gasAdjustment = constants_1.GAS_MULTIPLIER) {
        // Get simulated response.
        const encodedMessages = messages.map((message) => this.registry.encodeAsAny(message));
        const simulationResponse = await this.get.stargateQueryClient.tx.simulate(encodedMessages, memo, pubKey, sequence);
        // The promise should have been rejected if the gasInfo was undefined.
        if (simulationResponse.gasInfo === undefined) {
            throw new errors_1.UnexpectedClientError();
        }
        // Calculate and return fee from gasEstimate.
        const gasEstimate = math_1.Uint53.fromString(simulationResponse.gasInfo.gasUsed.toString()).toNumber();
        const fee = (0, stargate_1.calculateFee)(Math.floor(gasEstimate * gasAdjustment), gasPrice);
        // TODO: see if we should uncomment this or not
        // Temporary workaround before IBC denom is supported in '@cosmjs/stargate'.
        // The '@cosmjs/stargate' does not support denom with '/', so currently GAS_PRICE is
        // represented in 'uusdc', and the output of `calculateFee` is in '', which is replaced
        // below by USDC_DENOM string.
        // const amount: Coin[] = fee.amount.map((coin: Coin) => {
        //   if (coin.denom === "uusdc") {
        //     return {
        //       amount: coin.amount,
        //       denom: this.denoms.USDC_DENOM,
        //     };
        //   }
        //   return coin;
        // });
        // return {
        //   ...fee,
        //   amount,
        // };
        return fee;
    }
    // ------ State-Changing Requests ------ //
    async placeOrder(subaccount, clientId, clobPairId, side, quantums, subticks, routerFeePpm, routerSubaccount, timeInForce, orderFlags, reduceOnly, goodTilBlock, goodTilBlockTime, clientMetadata = 0, conditionType = proto_includes_1.Order_ConditionType.CONDITION_TYPE_UNSPECIFIED, conditionalOrderTriggerSubticks = long_1.default.fromInt(0), broadcastMode) {
        const msg = await this.placeOrderMsg(subaccount.address, subaccount.subaccountNumber, clientId, clobPairId, side, quantums, subticks, routerFeePpm, routerSubaccount.address, routerSubaccount.subaccountNumber, timeInForce, orderFlags, reduceOnly, goodTilBlock, goodTilBlockTime, clientMetadata, conditionType, conditionalOrderTriggerSubticks);
        const account = this.account(subaccount.address, orderFlags);
        return this.send(subaccount.wallet, () => Promise.resolve([msg]), true, undefined, undefined, broadcastMode, () => account);
    }
    async placeOrderMsg(address, subaccountNumber, clientId, clobPairId, side, quantums, subticks, routerFeePpm, routerSubaccountAddress, routerSubaccountNumber, timeInForce, orderFlags, reduceOnly, goodTilBlock, goodTilBlockTime, clientMetadata = 0, conditionType = proto_includes_1.Order_ConditionType.CONDITION_TYPE_UNSPECIFIED, conditionalOrderTriggerSubticks = long_1.default.fromInt(0)) {
        return new Promise((resolve) => {
            const msg = this.composer.composeMsgPlaceOrder(address, subaccountNumber, clientId, clobPairId, orderFlags, goodTilBlock !== null && goodTilBlock !== void 0 ? goodTilBlock : 0, goodTilBlockTime !== null && goodTilBlockTime !== void 0 ? goodTilBlockTime : 0, side, quantums, subticks, routerFeePpm, routerSubaccountAddress, routerSubaccountNumber, timeInForce, reduceOnly, clientMetadata, conditionType, conditionalOrderTriggerSubticks);
            resolve(msg);
        });
    }
    async placeOrderObject(subaccount, routerSubaccount, placeOrder, broadcastMode) {
        var _a, _b;
        return this.placeOrder(subaccount, placeOrder.clientId, placeOrder.clobPairId, placeOrder.side, placeOrder.quantums, placeOrder.subticks, placeOrder.routerFeePpm, routerSubaccount, placeOrder.timeInForce, placeOrder.orderFlags, placeOrder.reduceOnly, placeOrder.goodTilBlock, placeOrder.goodTilBlockTime, placeOrder.clientMetadata, (_a = placeOrder.conditionType) !== null && _a !== void 0 ? _a : proto_includes_1.Order_ConditionType.CONDITION_TYPE_UNSPECIFIED, (_b = placeOrder.conditionalOrderTriggerSubticks) !== null && _b !== void 0 ? _b : long_1.default.fromInt(0), broadcastMode);
    }
    async cancelOrder(subaccount, clientId, orderFlags, clobPairId, goodTilBlock, goodTilBlockTime, broadcastMode) {
        const msg = await this.cancelOrderMsg(subaccount.address, subaccount.subaccountNumber, clientId, orderFlags, clobPairId, goodTilBlock !== null && goodTilBlock !== void 0 ? goodTilBlock : 0, goodTilBlockTime !== null && goodTilBlockTime !== void 0 ? goodTilBlockTime : 0);
        return this.send(subaccount.wallet, () => Promise.resolve([msg]), true, undefined, undefined, broadcastMode);
    }
    async cancelOrderMsg(address, subaccountNumber, clientId, orderFlags, clobPairId, goodTilBlock, goodTilBlockTime) {
        return new Promise((resolve) => {
            const msg = this.composer.composeMsgCancelOrder(address, subaccountNumber, clientId, clobPairId, orderFlags, goodTilBlock !== null && goodTilBlock !== void 0 ? goodTilBlock : 0, goodTilBlockTime !== null && goodTilBlockTime !== void 0 ? goodTilBlockTime : 0);
            resolve(msg);
        });
    }
    async cancelOrderObject(subaccount, cancelOrder, broadcastMode) {
        return this.cancelOrder(subaccount, cancelOrder.clientId, cancelOrder.orderFlags, cancelOrder.clobPairId, cancelOrder.goodTilBlock, cancelOrder.goodTilBlockTime, broadcastMode);
    }
    async batchCancelShortTermOrders(subaccount, shortTermOrders, goodTilBlock, broadcastMode) {
        const msg = await this.batchCancelShortTermOrdersMsg(subaccount.address, subaccount.subaccountNumber, shortTermOrders, goodTilBlock);
        return this.send(subaccount.wallet, () => Promise.resolve([msg]), true, undefined, undefined, broadcastMode);
    }
    async batchCancelShortTermOrdersMsg(address, subaccountNumber, shortTermOrders, goodTilBlock) {
        return new Promise((resolve) => {
            const msg = this.composer.composeMsgBatchCancelShortTermOrders(address, subaccountNumber, shortTermOrders, goodTilBlock);
            resolve(msg);
        });
    }
    async transfer(subaccount, recipientAddress, recipientSubaccountNumber, assetId, amount, broadcastMode) {
        const msg = await this.transferMsg(subaccount.address, subaccount.subaccountNumber, recipientAddress, recipientSubaccountNumber, assetId, amount);
        return this.send(subaccount.wallet, () => Promise.resolve([msg]), false, undefined, undefined, broadcastMode);
    }
    async transferMsg(address, subaccountNumber, recipientAddress, recipientSubaccountNumber, assetId, amount) {
        return new Promise((resolve) => {
            const msg = this.composer.composeMsgTransfer(address, subaccountNumber, recipientAddress, recipientSubaccountNumber, assetId, amount);
            resolve(msg);
        });
    }
    async deposit(subaccount, assetId, quantums, broadcastMode) {
        const msg = await this.depositMsg(subaccount.address, subaccount.subaccountNumber, assetId, quantums);
        return this.send(subaccount.wallet, () => Promise.resolve([msg]), false, undefined, undefined, broadcastMode);
    }
    async depositMsg(address, subaccountNumber, assetId, quantums) {
        return new Promise((resolve) => {
            const msg = this.composer.composeMsgDepositToSubaccount(address, subaccountNumber, assetId, quantums);
            resolve(msg);
        });
    }
    async withdraw(subaccount, assetId, quantums, recipient, broadcastMode) {
        const msg = await this.withdrawMsg(subaccount.address, subaccount.subaccountNumber, assetId, quantums, recipient);
        return this.send(subaccount.wallet, () => Promise.resolve([msg]), false, undefined, undefined, broadcastMode);
    }
    async withdrawMsg(address, subaccountNumber, assetId, quantums, recipient) {
        return new Promise((resolve) => {
            const msg = this.composer.composeMsgWithdrawFromSubaccount(address, subaccountNumber, assetId, quantums, recipient);
            resolve(msg);
        });
    }
    async sendNativeToken(subaccount, recipient, coinDenom, quantums, zeroFee = true, broadcastMode) {
        const msg = await this.sendNativeTokenMsg(subaccount.address, recipient, coinDenom, quantums);
        return this.send(subaccount.wallet, () => Promise.resolve([msg]), zeroFee, this.defaultGasPrice, undefined, broadcastMode);
    }
    async sendNativeTokenMsg(address, recipient, coinDenom, quantums) {
        if (coinDenom !== constants_1.TDAI_DENOM) {
            throw new Error("Unsupported coinDenom");
        }
        return new Promise((resolve) => {
            const msg = this.composer.composeMsgSendToken(address, recipient, coinDenom, quantums);
            resolve(msg);
        });
    }
}
exports.default = NodePost;
//# sourceMappingURL=data:application/json;base64,