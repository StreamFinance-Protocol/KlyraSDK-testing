import { type IndexerHistoricalFunding, type IndexerCandleContents, type IndexerOrderbook, type IndexerPerpetualMarket, type IndexerTrade } from "@klyra/shared";
import RestClient from "../lib/rest-client";
export default class MarketsClient extends RestClient {
    /**
     * @description Get all perpetual markets
     *
     * @returns All perpetual markets
     */
    getAllPerpetualMarkets(): Promise<{
        markets: Record<string, IndexerPerpetualMarket>;
    }>;
    /**
     * @description Get a perpetual market by its id
     *
     * @param marketId The id of the market to get
     * @returns The perpetual market
     */
    getPerpetualMarket(marketId: string): Promise<IndexerPerpetualMarket>;
    /**
     * @description Get the orderbook for a market
     *
     * @param marketId The id of the market to get the orderbook for
     * @returns The orderbook for the market
     */
    getPerpetualMarketOrderbook(marketId: string): Promise<IndexerOrderbook>;
    /**
     * @description Get the trades for a market
     *
     * @param marketId The id of the market to get the trades for
     * @returns The trades for the market
     */
    getPerpetualMarketTrades(market: string, startingBeforeOrAtHeight?: number | null, startingBeforeOrAt?: string | null, limit?: number | null, page?: number | null): Promise<{
        trades: IndexerTrade[];
    }>;
    /**
     * @description Get the candles for a market
     *
     * @param marketId The id of the market to get the candles for
     * @returns The candles for the market
     */
    getPerpetualMarketCandles(market: string, resolution: string, fromISO?: string | null, toISO?: string | null, limit?: number | null): Promise<{
        candles: IndexerCandleContents[];
    }>;
    /**
     * @description Get the historical funding for a perpetual market
     *
     * @param market The id of the market to get the historical funding for
     * @returns The historical funding for the perpetual market
     */
    getPerpetualMarketHistoricalFunding(market: string, effectiveBeforeOrAt?: string | null, effectiveBeforeOrAtHeight?: number | null, limit?: number | null): Promise<{
        historicalFunding: IndexerHistoricalFunding[];
    }>;
    /**
     * @description Get the sparklines for a market.
     * This is a list of the last 24 hours of candle data
     *
     * @param period The period to get the sparklines for
     * @returns The sparklines for the market
     */
    getPerpetualMarketSparklines(period: string): Promise<Record<string, string[]>>;
}
