"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rest_client_1 = __importDefault(require("../lib/rest-client"));
// TODO: add comments to the methods that explain what they do
// TODO(UCC) - add error handleing if for example you call getPerpetualMarket and the market doesn't exist
class MarketsClient extends rest_client_1.default {
    /**
     * @description Get all perpetual markets
     *
     * @returns All perpetual markets
     */
    async getAllPerpetualMarkets() {
        return this.get("/v4/perpetualMarkets");
    }
    /**
     * @description Get a perpetual market by its id
     *
     * @param marketId The id of the market to get
     * @returns The perpetual market
     */
    async getPerpetualMarket(marketId) {
        const markets = await this.get(`/v4/perpetualMarkets`, {
            ticker: marketId,
        });
        if (!markets.markets[marketId]) {
            throw new Error(`Market ${marketId} not found`);
        }
        return markets.markets[marketId];
    }
    /**
     * @description Get the orderbook for a market
     *
     * @param marketId The id of the market to get the orderbook for
     * @returns The orderbook for the market
     */
    async getPerpetualMarketOrderbook(marketId) {
        return this.get(`/v4/orderbooks/perpetualMarket/${marketId}`);
    }
    /**
     * @description Get the trades for a market
     *
     * @param marketId The id of the market to get the trades for
     * @returns The trades for the market
     */
    async getPerpetualMarketTrades(market, startingBeforeOrAtHeight, startingBeforeOrAt, limit, page) {
        const uri = `/v4/trades/perpetualMarket/${market}`;
        return this.get(uri, {
            createdBeforeOrAtHeight: startingBeforeOrAtHeight,
            createdBeforeOrAt: startingBeforeOrAt,
            limit,
            page,
        });
    }
    /**
     * @description Get the candles for a market
     *
     * @param marketId The id of the market to get the candles for
     * @returns The candles for the market
     */
    async getPerpetualMarketCandles(market, resolution, fromISO, toISO, limit) {
        const uri = `/v4/candles/perpetualMarkets/${market}`;
        return this.get(uri, {
            resolution,
            fromISO,
            toISO,
            limit,
        });
    }
    /**
     * @description Get the historical funding for a perpetual market
     *
     * @param market The id of the market to get the historical funding for
     * @returns The historical funding for the perpetual market
     */
    async getPerpetualMarketHistoricalFunding(market, effectiveBeforeOrAt, effectiveBeforeOrAtHeight, limit) {
        const uri = `/v4/historicalFunding/${market}`;
        return this.get(uri, {
            effectiveBeforeOrAt,
            effectiveBeforeOrAtHeight,
            limit,
        });
    }
    /**
     * @description Get the sparklines for a market.
     * This is a list of the last 24 hours of candle data
     *
     * @param period The period to get the sparklines for
     * @returns The sparklines for the market
     */
    async getPerpetualMarketSparklines(period) {
        const uri = "/v4/sparklines";
        return this.get(uri, {
            timePeriod: period,
        });
    }
}
exports.default = MarketsClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbmRleGVyL21hcmtldHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFPQSxxRUFBNEM7QUFFNUMsOERBQThEO0FBQzlELDBHQUEwRztBQUMxRyxNQUFxQixhQUFjLFNBQVEscUJBQVU7SUFDbkQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxzQkFBc0I7UUFHMUIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLGtCQUFrQixDQUFDLFFBQWdCO1FBQ3ZDLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FFM0Isc0JBQXNCLEVBQUU7WUFDekIsTUFBTSxFQUFFLFFBQVE7U0FDakIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLFVBQVUsUUFBUSxZQUFZLENBQUMsQ0FBQztRQUNsRCxDQUFDO1FBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQywyQkFBMkIsQ0FDL0IsUUFBZ0I7UUFFaEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyx3QkFBd0IsQ0FDNUIsTUFBYyxFQUNkLHdCQUF3QyxFQUN4QyxrQkFBa0MsRUFDbEMsS0FBcUIsRUFDckIsSUFBb0I7UUFFcEIsTUFBTSxHQUFHLEdBQUcsOEJBQThCLE1BQU0sRUFBRSxDQUFDO1FBQ25ELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDbkIsdUJBQXVCLEVBQUUsd0JBQXdCO1lBQ2pELGlCQUFpQixFQUFFLGtCQUFrQjtZQUNyQyxLQUFLO1lBQ0wsSUFBSTtTQUNMLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyx5QkFBeUIsQ0FDN0IsTUFBYyxFQUNkLFVBQWtCLEVBQ2xCLE9BQXVCLEVBQ3ZCLEtBQXFCLEVBQ3JCLEtBQXFCO1FBRXJCLE1BQU0sR0FBRyxHQUFHLGdDQUFnQyxNQUFNLEVBQUUsQ0FBQztRQUNyRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ25CLFVBQVU7WUFDVixPQUFPO1lBQ1AsS0FBSztZQUNMLEtBQUs7U0FDTixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsbUNBQW1DLENBQ3ZDLE1BQWMsRUFDZCxtQkFBbUMsRUFDbkMseUJBQXlDLEVBQ3pDLEtBQXFCO1FBRXJCLE1BQU0sR0FBRyxHQUFHLHlCQUF5QixNQUFNLEVBQUUsQ0FBQztRQUM5QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ25CLG1CQUFtQjtZQUNuQix5QkFBeUI7WUFDekIsS0FBSztTQUNOLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxLQUFLLENBQUMsNEJBQTRCLENBQ2hDLE1BQWM7UUFFZCxNQUFNLEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ25CLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQXpIRCxnQ0F5SEMifQ==