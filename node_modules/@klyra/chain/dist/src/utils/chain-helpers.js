"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.round = round;
exports.calculateQuantums = calculateQuantums;
exports.calculateVaultQuantums = calculateVaultQuantums;
exports.calculateSubticks = calculateSubticks;
exports.calculateSide = calculateSide;
exports.calculateTimeInForce = calculateTimeInForce;
exports.calculateOrderFlags = calculateOrderFlags;
exports.calculateClientMetadata = calculateClientMetadata;
exports.calculateConditionType = calculateConditionType;
exports.calculateConditionalOrderTriggerSubticks = calculateConditionalOrderTriggerSubticks;
const long_1 = __importDefault(require("long"));
const shared_1 = require("@klyra/shared");
const proto_includes_1 = require("../lib/proto-includes");
const types_1 = require("../types");
function round(input, base) {
    const rounded = Math.floor(input / base) * base;
    return Number(rounded.toFixed(10)); // Use toFixed to avoid floating point precision issues
}
function calculateQuantums(size, atomicResolution, stepBaseQuantums) {
    const rawQuantums = size * Math.pow(10, -atomicResolution);
    const quantums = round(rawQuantums, stepBaseQuantums);
    // stepBaseQuantums functions as minimum order size
    const result = Math.max(quantums, stepBaseQuantums);
    return long_1.default.fromNumber(result);
}
function calculateVaultQuantums(size) {
    return BigInt((size * 1000000).toFixed(0));
}
function calculateSubticks(price, atomicResolution, quantumConversionExponent, subticksPerTick) {
    const QUOTE_QUANTUMS_ATOMIC_RESOLUTION = -6;
    const exponent = atomicResolution -
        quantumConversionExponent -
        QUOTE_QUANTUMS_ATOMIC_RESOLUTION;
    const rawSubticks = price * Math.pow(10, exponent);
    const subticks = round(rawSubticks, subticksPerTick);
    const result = Math.max(subticks, subticksPerTick);
    return long_1.default.fromNumber(result);
}
function calculateSide(side) {
    return side === shared_1.OrderSide.BUY ? proto_includes_1.Order_Side.SIDE_BUY : proto_includes_1.Order_Side.SIDE_SELL;
}
function calculateTimeInForce(type, timeInForce, execution, postOnly) {
    switch (type) {
        case shared_1.OrderType.MARKET:
            switch (timeInForce) {
                default:
                    return proto_includes_1.Order_TimeInForce.TIME_IN_FORCE_IOC;
            }
        case shared_1.OrderType.LIMIT:
            switch (timeInForce) {
                case shared_1.OrderTimeInForce.GTT:
                    if (typeof postOnly === "undefined") {
                        throw new Error("postOnly must be set if order type is LIMIT and timeInForce is GTT");
                    }
                    return postOnly
                        ? proto_includes_1.Order_TimeInForce.TIME_IN_FORCE_POST_ONLY
                        : proto_includes_1.Order_TimeInForce.TIME_IN_FORCE_UNSPECIFIED;
                case shared_1.OrderTimeInForce.IOC:
                    return proto_includes_1.Order_TimeInForce.TIME_IN_FORCE_IOC;
                default:
                    throw new Error("Unexpected code path: timeInForce");
            }
        case shared_1.OrderType.STOP_LIMIT:
        case shared_1.OrderType.TAKE_PROFIT_LIMIT:
            if (typeof execution === "undefined") {
                throw new Error("execution must be set if order type is STOP_LIMIT or TAKE_PROFIT_LIMIT");
            }
            switch (execution) {
                case shared_1.OrderExecution.DEFAULT:
                    return proto_includes_1.Order_TimeInForce.TIME_IN_FORCE_UNSPECIFIED;
                case shared_1.OrderExecution.POST_ONLY:
                    return proto_includes_1.Order_TimeInForce.TIME_IN_FORCE_POST_ONLY;
                case shared_1.OrderExecution.IOC:
                    return proto_includes_1.Order_TimeInForce.TIME_IN_FORCE_IOC;
                default:
                    throw new Error("Unexpected code path: timeInForce");
            }
        case shared_1.OrderType.STOP_MARKET:
        case shared_1.OrderType.TAKE_PROFIT_MARKET:
            if (typeof execution === "undefined") {
                throw new Error("execution must be set if order type is STOP_MARKET or TAKE_PROFIT_MARKET");
            }
            switch (execution) {
                case shared_1.OrderExecution.DEFAULT:
                    throw new Error("Execution value DEFAULT not supported for STOP_MARKET or TAKE_PROFIT_MARKET");
                case shared_1.OrderExecution.POST_ONLY:
                    throw new Error("Execution value POST_ONLY not supported for STOP_MARKET or TAKE_PROFIT_MARKET");
                case shared_1.OrderExecution.IOC:
                    return proto_includes_1.Order_TimeInForce.TIME_IN_FORCE_IOC;
                default:
                    throw new Error("Unexpected code path: timeInForce");
            }
        default:
            throw new Error("Unexpected code path: timeInForce");
    }
}
function calculateOrderFlags(type, timeInForce) {
    switch (type) {
        case shared_1.OrderType.MARKET:
            return types_1.OrderFlags.SHORT_TERM;
        case shared_1.OrderType.LIMIT:
            if (timeInForce === undefined) {
                throw new Error("timeInForce must be set if orderType is LIMIT");
            }
            if (timeInForce === shared_1.OrderTimeInForce.GTT) {
                return types_1.OrderFlags.LONG_TERM;
            }
            return types_1.OrderFlags.SHORT_TERM;
        case shared_1.OrderType.STOP_LIMIT:
            return types_1.OrderFlags.CONDITIONAL;
        case shared_1.OrderType.TAKE_PROFIT_LIMIT:
            return types_1.OrderFlags.CONDITIONAL;
        case shared_1.OrderType.STOP_MARKET:
            return types_1.OrderFlags.CONDITIONAL;
        case shared_1.OrderType.TAKE_PROFIT_MARKET:
            return types_1.OrderFlags.CONDITIONAL;
        default:
            throw new Error("Unexpected code path: orderFlags");
    }
}
function calculateClientMetadata(orderType) {
    switch (orderType) {
        case shared_1.OrderType.MARKET:
            return 1;
        case shared_1.OrderType.STOP_MARKET:
            return 1;
        case shared_1.OrderType.TAKE_PROFIT_MARKET:
            return 1;
        default:
            return 0;
    }
}
function calculateConditionType(orderType) {
    switch (orderType) {
        case shared_1.OrderType.LIMIT:
            return proto_includes_1.Order_ConditionType.CONDITION_TYPE_UNSPECIFIED;
        case shared_1.OrderType.MARKET:
            return proto_includes_1.Order_ConditionType.CONDITION_TYPE_UNSPECIFIED;
        case shared_1.OrderType.STOP_LIMIT:
            return proto_includes_1.Order_ConditionType.CONDITION_TYPE_STOP_LOSS;
        case shared_1.OrderType.STOP_MARKET:
            return proto_includes_1.Order_ConditionType.CONDITION_TYPE_STOP_LOSS;
        case shared_1.OrderType.TAKE_PROFIT_LIMIT:
            return proto_includes_1.Order_ConditionType.CONDITION_TYPE_TAKE_PROFIT;
        case shared_1.OrderType.TAKE_PROFIT_MARKET:
            return proto_includes_1.Order_ConditionType.CONDITION_TYPE_TAKE_PROFIT;
        default:
            return proto_includes_1.Order_ConditionType.CONDITION_TYPE_UNSPECIFIED;
    }
}
function calculateConditionalOrderTriggerSubticks(orderType, atomicResolution, quantumConversionExponent, subticksPerTick, triggerPrice) {
    switch (orderType) {
        case shared_1.OrderType.LIMIT:
            return long_1.default.fromNumber(0);
        case shared_1.OrderType.MARKET:
            return long_1.default.fromNumber(0);
        case shared_1.OrderType.STOP_LIMIT:
        case shared_1.OrderType.STOP_MARKET:
        case shared_1.OrderType.TAKE_PROFIT_LIMIT:
        case shared_1.OrderType.TAKE_PROFIT_MARKET:
            return maybeGetSubticks(atomicResolution, quantumConversionExponent, subticksPerTick, triggerPrice);
        default:
            return long_1.default.fromNumber(0);
    }
}
function maybeGetSubticks(atomicResolution, quantumConversionExponent, subticksPerTick, triggerPrice) {
    if (triggerPrice === undefined) {
        throw new Error("triggerPrice must be set if orderType is STOP_LIMIT, STOP_MARKET, TAKE_PROFIT_LIMIT, or TAKE_PROFIT_MARKET");
    }
    return calculateSubticks(triggerPrice, atomicResolution, quantumConversionExponent, subticksPerTick);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhaW4taGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9jaGFpbi1oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBY0Esc0JBR0M7QUFFRCw4Q0FVQztBQUVELHdEQUVDO0FBRUQsOENBZUM7QUFFRCxzQ0FFQztBQUVELG9EQWlGQztBQUVELGtEQTZCQztBQUVELDBEQVlDO0FBRUQsd0RBb0JDO0FBRUQsNEZBMkJDO0FBek9ELGdEQUF3QjtBQUN4QiwwQ0FLdUI7QUFDdkIsMERBSStCO0FBQy9CLG9DQUFzQztBQUV0QyxTQUFnQixLQUFLLENBQUMsS0FBYSxFQUFFLElBQVk7SUFDL0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ2hELE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLHVEQUF1RDtBQUM3RixDQUFDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQy9CLElBQVksRUFDWixnQkFBd0IsRUFDeEIsZ0JBQXdCO0lBRXhCLE1BQU0sV0FBVyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDM0QsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3RELG1EQUFtRDtJQUNuRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3BELE9BQU8sY0FBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRUQsU0FBZ0Isc0JBQXNCLENBQUMsSUFBWTtJQUNqRCxPQUFPLE1BQU0sQ0FBQyxDQUFDLElBQUksR0FBRyxPQUFTLENB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