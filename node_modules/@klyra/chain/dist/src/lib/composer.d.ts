import { type EncodeObject, type Registry } from "@cosmjs/proto-signing";
import { type OrderBatch } from "@klyra/proto/src/codegen/klyraprotocol/clob/tx";
import { type Any } from "cosmjs-types/google/protobuf/any";
import Long from "long";
import { Order_ConditionType, type Order_Side, type Order_TimeInForce } from "./proto-includes";
export default class Composer {
    composeMsgPlaceOrder(address: string, subaccountNumber: number, clientId: number, clobPairId: number, orderFlags: number, goodTilBlock: number, goodTilBlockTime: number, side: Order_Side, quantums: Long, subticks: Long, routerFeePpm: number, routerSubaccountAddress: string, routerSubaccountNumber: number, timeInForce: Order_TimeInForce, reduceOnly: boolean, clientMetadata: number, conditionType?: Order_ConditionType, conditionalOrderTriggerSubticks?: Long): EncodeObject;
    composeMsgCancelOrder(address: string, subaccountNumber: number, clientId: number, clobPairId: number, orderFlags: number, goodTilBlock: number, goodTilBlockTime: number): EncodeObject;
    composeMsgBatchCancelShortTermOrders(address: string, subaccountNumber: number, shortTermCancels: OrderBatch[], goodTilBlock: number): EncodeObject;
    composeMsgTransfer(address: string, subaccountNumber: number, recipientAddress: string, recipientSubaccountNumber: number, assetId: number, amount: Long): EncodeObject;
    composeMsgDepositToSubaccount(address: string, subaccountNumber: number, assetId: number, quantums: Long): EncodeObject;
    composeMsgWithdrawFromSubaccount(address: string, subaccountNumber: number, assetId: number, quantums: Long, recipient?: string): EncodeObject;
    composeMsgSendToken(address: string, recipient: string, coinDenom: string, quantums: string): EncodeObject;
    validateGoodTilBlockAndTime(orderFlags: number, goodTilBlock: number, goodTilBlockTime: number): void;
    wrapMessageAsAny(registry: Registry, message: EncodeObject): Any;
    wrapMessageArrAsAny(registry: Registry, messages: EncodeObject[]): Any[];
}
