"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalWallet = void 0;
const amino_1 = require("@cosmjs/amino");
const proto_signing_1 = require("@cosmjs/proto-signing");
const stargate_1 = require("@cosmjs/stargate");
const long_1 = __importDefault(require("long"));
const protobufjs_1 = __importDefault(require("protobufjs"));
const registry_1 = require("./registry");
const signer_1 = require("./signer");
// Required for encoding and decoding queries that are of type Long.
protobufjs_1.default.util.Long = long_1.default;
protobufjs_1.default.configure();
class LocalWallet {
    constructor(offlineSigner, accounts, address, pubKey, transactionSigner) {
        this.offlineSigner = offlineSigner;
        this.accounts = accounts;
        this.address = address;
        this.pubKey = pubKey;
        this.transactionSigner = transactionSigner;
    }
    static async fromOfflineSigner(signer) {
        const stargateClient = await stargate_1.SigningStargateClient.offline(signer, {
            registry: (0, registry_1.generateRegistry)(),
        });
        const accounts = await signer.getAccounts();
        const firstAccount = accounts[0];
        if (!firstAccount) {
            throw new Error("No accounts found");
        }
        const address = firstAccount.address;
        const pubKey = (0, amino_1.encodeSecp256k1Pubkey)(firstAccount.pubkey);
        const transactionSigner = new signer_1.TransactionSigner(address, stargateClient);
        return new LocalWallet(signer, accounts, address, pubKey, transactionSigner);
    }
    static async fromMnemonic(mnemonic, prefix) {
        const signer = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {
            prefix,
        });
        return LocalWallet.fromOfflineSigner(signer);
    }
    getAccounts() {
        return this.accounts;
    }
    getAddress() {
        return this.address;
    }
    getPubKey() {
        return this.pubKey;
    }
    async signTransaction(messages, transactionOptions, fee, memo = "") {
        return this.transactionSigner.signTransaction([...messages], transactionOptions, fee, memo);
    }
}
exports.LocalWallet = LocalWallet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtd2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9sb2NhbC13YWxsZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEseUNBSXVCO0FBQ3ZCLHlEQUsrQjtBQUMvQiwrQ0FBeUQ7QUFDekQsZ0RBQXdCO0FBQ3hCLDREQUFrQztBQUVsQyx5Q0FBOEM7QUFDOUMscUNBQTZDO0FBRTdDLG9FQUFvRTtBQUNwRSxvQkFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBSSxDQUFDO0FBQzFCLG9CQUFRLENBQUMsU0FBUyxFQUFFLENBQUM7QUFFckIsTUFBYSxXQUFXO0lBQ3RCLFlBQ21CLGFBQTRCLEVBQzVCLFFBQWdDLEVBQ2hDLE9BQWUsRUFDZixNQUF1QixFQUN2QixpQkFBb0M7UUFKcEMsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsYUFBUSxHQUFSLFFBQVEsQ0FBd0I7UUFDaEMsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNmLFdBQU0sR0FBTixNQUFNLENBQWlCO1FBQ3ZCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7SUFDcEQsQ0FBQztJQUVKLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBcUI7UUFDbEQsTUFBTSxjQUFjLEdBQUcsTUFBTSxnQ0FBcUIsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2pFLFFBQVEsRUFBRSxJQUFBLDJCQUFnQixHQUFFO1NBQzdCLENBQUMsQ0FBQztRQUNILE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzVDLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3ZDLENBQUM7UUFDRCxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO1FBQ3JDLE1BQU0sTUFBTSxHQUFHLElBQUEsNkJBQXFCLEVBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0saUJBQWlCLEdBQUcsSUFBSSwwQkFBaUIsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFFekUsT0FBTyxJQUFJLFdBQVcsQ0FDcEIsTUFBTSxFQUNOLFFBQVEsRUFDUixPQUFPLEVBQ1AsTUFBTSxFQUNOLGlCQUFpQixDQUNsQixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUN2QixRQUFnQixFQUNoQixNQUFlO1FBRWYsTUFBTSxNQUFNLEdBQUcsTUFBTSx1Q0FBdUIsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFO1lBQ2xFLE1BQU07U0FDUCxDQUFDLENBQUM7UUFDSCxPQUFPLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQsS0FBSyxDQUFDLGVBQWUsQ0FDbkIsUUFBaUMsRUFDakMsa0JBQXNDLEVBQ3RDLEdBQVksRUFDWixJQUFJLEdBQUcsRUFBRTtRQUVULE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FDM0MsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxFQUNiLGtCQUFrQixFQUNsQixHQUFHLEVBQ0gsSUFBSSxDQUNMLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFsRUQsa0NBa0VDIn0=