"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const long_1 = __importDefault(require("long"));
const protobufjs_1 = __importDefault(require("protobufjs"));
const constants_1 = require("../constants");
const proto_includes_1 = require("./proto-includes");
protobufjs_1.default.util.Long = long_1.default;
protobufjs_1.default.configure();
class Composer {
    // ------------ x/clob ------------
    composeMsgPlaceOrder(address, subaccountNumber, clientId, clobPairId, orderFlags, goodTilBlock, goodTilBlockTime, side, quantums, subticks, routerFeePpm, routerSubaccountAddress, routerSubaccountNumber, timeInForce, reduceOnly, clientMetadata, conditionType = proto_includes_1.Order_ConditionType.CONDITION_TYPE_UNSPECIFIED, conditionalOrderTriggerSubticks = long_1.default.fromInt(0)) {
        this.validateGoodTilBlockAndTime(orderFlags, goodTilBlock, goodTilBlockTime);
        const subaccountId = {
            owner: address,
            number: subaccountNumber,
        };
        const routerSubaccountId = {
            owner: routerSubaccountAddress,
            number: routerSubaccountNumber,
        };
        const orderId = {
            subaccountId,
            clientId,
            orderFlags,
            clobPairId,
        };
        const order = {
            orderId,
            side,
            quantums,
            subticks,
            goodTilBlock: goodTilBlock === 0 ? undefined : goodTilBlock,
            goodTilBlockTime: goodTilBlock === 0 ? goodTilBlockTime : undefined,
            timeInForce,
            reduceOnly,
            clientMetadata,
            conditionType,
            conditionalOrderTriggerSubticks,
            routerFeePpm,
            routerSubaccountId,
        };
        const msg = {
            order,
        };
        return {
            typeUrl: constants_1.Messages.PLACE_ORDER,
            value: msg,
        };
    }
    composeMsgCancelOrder(address, subaccountNumber, clientId, clobPairId, orderFlags, goodTilBlock, goodTilBlockTime) {
        this.validateGoodTilBlockAndTime(orderFlags, goodTilBlock, goodTilBlockTime);
        const subaccountId = {
            owner: address,
            number: subaccountNumber,
        };
        const orderId = {
            subaccountId,
            clientId,
            orderFlags,
            clobPairId,
        };
        const msg = {
            orderId,
            goodTilBlock: goodTilBlock === 0 ? undefined : goodTilBlock,
            goodTilBlockTime: goodTilBlock === 0 ? goodTilBlockTime : undefined,
        };
        return {
            typeUrl: constants_1.Messages.CANCEL_ORDER,
            value: msg,
        };
    }
    composeMsgBatchCancelShortTermOrders(address, subaccountNumber, shortTermCancels, goodTilBlock) {
        const subaccountId = {
            owner: address,
            number: subaccountNumber,
        };
        const msg = {
            subaccountId,
            shortTermCancels,
            goodTilBlock,
        };
        return {
            typeUrl: constants_1.Messages.BATCH_CANCEL,
            value: msg,
        };
    }
    // ------------ x/sending ------------
    composeMsgTransfer(address, subaccountNumber, recipientAddress, recipientSubaccountNumber, assetId, amount) {
        const sender = {
            owner: address,
            number: subaccountNumber,
        };
        const recipient = {
            owner: recipientAddress,
            number: recipientSubaccountNumber,
        };
        const transfer = {
            sender,
            recipient,
            assetId,
            amount,
        };
        const msg = {
            transfer,
        };
        return {
            typeUrl: constants_1.Messages.CREATE_TRANSFER,
            value: msg,
        };
    }
    composeMsgDepositToSubaccount(address, subaccountNumber, assetId, quantums) {
        const recipient = {
            owner: address,
            number: subaccountNumber,
        };
        const msg = {
            sender: address,
            recipient,
            assetId,
            quantums,
        };
        return {
            typeUrl: constants_1.Messages.DEPOSIT_TO_SUBACCOUNT,
            value: msg,
        };
    }
    composeMsgWithdrawFromSubaccount(address, subaccountNumber, assetId, quantums, recipient = address) {
        const sender = {
            owner: address,
            number: subaccountNumber,
        };
        const msg = {
            sender,
            recipient,
            assetId,
            quantums,
        };
        return {
            typeUrl: constants_1.Messages.WITHDRAW_FROM_SUBACCOUNT,
            value: msg,
        };
    }
    // ------------ x/bank ------------
    composeMsgSendToken(address, recipient, coinDenom, quantums) {
        const coin = {
            denom: coinDenom,
            amount: quantums,
        };
        const msg = {
            fromAddress: address,
            toAddress: recipient,
            amount: [coin],
        };
        return {
            typeUrl: constants_1.Messages.SEND,
            value: msg,
        };
    }
    // ------------ util ------------
    validateGoodTilBlockAndTime(orderFlags, goodTilBlock, goodTilBlockTime) {
        if (orderFlags === 0 && goodTilBlock === 0) {
            throw new Error("goodTilBlock must be set if orderFlags is 0");
        }
        else if (orderFlags !== 0 && goodTilBlockTime === 0) {
            throw new Error("goodTilBlockTime must be set if orderFlags is not 0");
        }
    }
    wrapMessageAsAny(registry, message) {
        return registry.encodeAsAny(message);
    }
    wrapMessageArrAsAny(registry, messages) {
        const encodedMessages = messages.map((message) => this.wrapMessageAsAny(registry, message));
        return encodedMessages;
    }
}
exports.default = Composer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9zZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2NvbXBvc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBUUEsZ0RBQXdCO0FBQ3hCLDREQUFrQztBQUNsQyw0Q0FBd0M7QUFDeEMscURBYTBCO0FBRTFCLG9CQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxjQUFJLENBQUM7QUFDMUIsb0JBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUVyQixNQUFxQixRQUFRO0lBQzNCLG1DQUFtQztJQUM1QixvQkFBb0IsQ0FDekIsT0FBZSxFQUNmLGdCQUF3QixFQUN4QixRQUFnQixFQUNoQixVQUFrQixFQUNsQixVQUFrQixFQUNsQixZQUFvQixFQUNwQixnQkFBd0IsRUFDeEIsSUFBZ0IsRUFDaEIsUUFBYyxFQUNkLFFBQWMsRUFDZCxZQUFvQixFQUNwQix1QkFBK0IsRUFDL0Isc0JBQThCLEVBQzlCLFdBQThCLEVBQzlCLFVBQW1CLEVBQ25CLGNBQXNCLEVBQ3RCLGdCQUFxQyxvQ0FBbUIsQ0FBQywwQkFBMEIsRUFDbkYsa0NBQXdDLGNBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRXZELElBQUksQ0FBQywyQkFBMkIsQ0FDOUIsVUFBVSxFQUNWLFlBQVksRUFDWixnQkFBZ0IsQ0FDakIsQ0FBQztRQUVGLE1BQU0sWUFBWSxHQUFpQjtZQUNqQyxLQUFLLEVBQUUsT0FBTztZQUNkLE1BQU0sRUFBRSxnQkFBZ0I7U0FDekIsQ0FBQztRQUVGLE1BQU0sa0JBQWtCLEdBQWlCO1lBQ3ZDLEtBQUssRUFBRSx1QkFBdUI7WUFDOUIsTUFBTSxFQUFFLHNCQUFzQjtTQUMvQixDQUFDO1FBRUYsTUFBTSxPQUFPLEdBQVk7WUFDdkIsWUFBWTtZQUNaLFFBQVE7WUFDUixVQUFVO1lBQ1YsVUFBVTtTQUNYLENBQUM7UUFFRixNQUFNLEtBQUssR0FBVTtZQUNuQixPQUFPO1lBQ1AsSUFBSTtZQUNKLFFB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