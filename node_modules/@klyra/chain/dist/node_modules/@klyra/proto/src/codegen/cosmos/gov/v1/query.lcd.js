"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LCDQueryClient = void 0;
const helpers_1 = require("../../../helpers");
class LCDQueryClient {
    constructor({ requestClient }) {
        this.req = requestClient;
        this.constitution = this.constitution.bind(this);
        this.proposal = this.proposal.bind(this);
        this.proposals = this.proposals.bind(this);
        this.vote = this.vote.bind(this);
        this.votes = this.votes.bind(this);
        this.params = this.params.bind(this);
        this.deposit = this.deposit.bind(this);
        this.deposits = this.deposits.bind(this);
        this.tallyResult = this.tallyResult.bind(this);
    }
    /* Constitution queries the chain's constitution. */
    async constitution(_params = {}) {
        const endpoint = `cosmos/gov/v1/constitution`;
        return await this.req.get(endpoint);
    }
    /* Proposal queries proposal details based on ProposalID. */
    async proposal(params) {
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}`;
        return await this.req.get(endpoint);
    }
    /* Proposals queries all proposals based on given status. */
    async proposals(params) {
        const options = {
            params: {}
        };
        if (typeof (params === null || params === void 0 ? void 0 : params.proposalStatus) !== "undefined") {
            options.params.proposal_status = params.proposalStatus;
        }
        if (typeof (params === null || params === void 0 ? void 0 : params.voter) !== "undefined") {
            options.params.voter = params.voter;
        }
        if (typeof (params === null || params === void 0 ? void 0 : params.depositor) !== "undefined") {
            options.params.depositor = params.depositor;
        }
        if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/gov/v1/proposals`;
        return await this.req.get(endpoint, options);
    }
    /* Vote queries voted information based on proposalID, voterAddr. */
    async vote(params) {
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/votes/${params.voter}`;
        return await this.req.get(endpoint);
    }
    /* Votes queries votes of a given proposal. */
    async votes(params) {
        const options = {
            params: {}
        };
        if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/votes`;
        return await this.req.get(endpoint, options);
    }
    /* Params queries all parameters of the gov module. */
    async params(params) {
        const endpoint = `cosmos/gov/v1/params/${params.paramsType}`;
        return await this.req.get(endpoint);
    }
    /* Deposit queries single deposit information based on proposalID, depositAddr. */
    async deposit(params) {
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/deposits/${params.depositor}`;
        return await this.req.get(endpoint);
    }
    /* Deposits queries all deposits of a single proposal. */
    async deposits(params) {
        const options = {
            params: {}
        };
        if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/deposits`;
        return await this.req.get(endpoint, options);
    }
    /* TallyResult queries the tally of a proposal vote. */
    async tallyResult(params) {
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/tally`;
        return await this.req.get(endpoint);
    }
}
exports.LCDQueryClient = LCDQueryClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkubGNkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BrbHlyYS9wcm90by9zcmMvY29kZWdlbi9jb3Ntb3MvZ292L3YxL3F1ZXJ5LmxjZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBdUQ7QUFHdkQsTUFBYSxjQUFjO0lBR3pCLFlBQVksRUFDVixhQUFhLEVBR2Q7UUFDQyxJQUFJLENBQUMsR0FBRyxHQUFHLGFBQWEsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJ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