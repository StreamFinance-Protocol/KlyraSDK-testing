import { Long, DeepPartial } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
/** MarketPrice is used by the application to store/retrieve oracle prices. */
export interface MarketPrice {
    /** Unique, sequentially-generated value that matches `MarketParam`. */
    id: number;
    /**
     * Static value. The exponent of the price. See the comment on the duplicate
     * MarketParam field for more information.
     */
    exponent: number;
    /**
     * The spot price value that is updated by oracle price updates. `0` if it has
     * never been updated, `>0` otherwise.
     */
    spotPrice: Long;
    /**
     * The pnl price value that is updated by oracle price updates. `0` if it has
     * never been updated, `>0` otherwise.
     */
    pnlPrice: Long;
}
/** MarketPrice is used by the application to store/retrieve oracle prices. */
export interface MarketPriceSDKType {
    id: number;
    exponent: number;
    spot_price: Long;
    pnl_price: Long;
}
/** MarketSpotPrice is used by the application to store/retrieve spot prices. */
export interface MarketSpotPrice {
    /** Unique, sequentially-generated value that matches `MarketParam`. */
    id: number;
    /**
     * Static value. The exponent of the price. See the comment on the duplicate
     * MarketParam field for more information.
     */
    exponent: number;
    /**
     * The spot price value that is updated by oracle price updates. `0` if it has
     * never been updated, `>0` otherwise.
     */
    spotPrice: Long;
}
/** MarketSpotPrice is used by the application to store/retrieve spot prices. */
export interface MarketSpotPriceSDKType {
    id: number;
    exponent: number;
    spot_price: Long;
}
/** MarketPriceUpdate is used to update the price of a single market. */
export interface MarketPriceUpdate {
    /** The id of market to update */
    marketId: number;
    /** The updated spot price */
    spotPrice: Long;
    /** The updated pnl price */
    pnlPrice: Long;
}
/** MarketPriceUpdate is used to update the price of a single market. */
export interface MarketPriceUpdateSDKType {
    market_id: number;
    spot_price: Long;
    pnl_price: Long;
}
/** MarketSpotPriceUpdate is used to update the spot price of a single market. */
export interface MarketSpotPriceUpdate {
    /** The id of market to update */
    marketId: number;
    /** The updated spot price */
    spotPrice: Long;
}
/** MarketSpotPriceUpdate is used to update the spot price of a single market. */
export interface MarketSpotPriceUpdateSDKType {
    market_id: number;
    spot_price: Long;
}
/** MarketPnlPriceUpdate is used to update the pnl price of a single market. */
export interface MarketPnlPriceUpdate {
    /** The id of market to update */
    marketId: number;
    /** The updated pnl price */
    pnlPrice: Long;
}
/** MarketPnlPriceUpdate is used to update the pnl price of a single market. */
export interface MarketPnlPriceUpdateSDKType {
    market_id: number;
    pnl_price: Long;
}
/** MarketPriceUpdates is a collection of MarketPriceUpdate messages. */
export interface MarketPriceUpdates {
    marketPriceUpdates: MarketPriceUpdate[];
}
/** MarketPriceUpdates is a collection of MarketPriceUpdate messages. */
export interface MarketPriceUpdatesSDKType {
    market_price_updates: MarketPriceUpdateSDKType[];
}
export declare const MarketPrice: {
    encode(message: MarketPrice, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MarketPrice;
    fromPartial(object: DeepPartial<MarketPrice>): MarketPrice;
};
export declare const MarketSpotPrice: {
    encode(message: MarketSpotPrice, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MarketSpotPrice;
    fromPartial(object: DeepPartial<MarketSpotPrice>): MarketSpotPrice;
};
export declare const MarketPriceUpdate: {
    encode(message: MarketPriceUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MarketPriceUpdate;
    fromPartial(object: DeepPartial<MarketPriceUpdate>): MarketPriceUpdate;
};
export declare const MarketSpotPriceUpdate: {
    encode(message: MarketSpotPriceUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MarketSpotPriceUpdate;
    fromPartial(object: DeepPartial<MarketSpotPriceUpdate>): MarketSpotPriceUpdate;
};
export declare const MarketPnlPriceUpdate: {
    encode(message: MarketPnlPriceUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MarketPnlPriceUpdate;
    fromPartial(object: DeepPartial<MarketPnlPriceUpdate>): MarketPnlPriceUpdate;
};
export declare const MarketPriceUpdates: {
    encode(message: MarketPriceUpdates, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MarketPriceUpdates;
    fromPartial(object: DeepPartial<MarketPriceUpdates>): MarketPriceUpdates;
};
