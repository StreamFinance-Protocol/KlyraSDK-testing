import { Long, DeepPartial } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
/** LiquidationsConfig stores all configurable fields related to liquidations. */
export interface LiquidationsConfig {
    /**
     * The maximum liquidation fee (in parts-per-million). This fee goes
     * 100% to the insurance fund.
     */
    insuranceFundFeePpm: number;
    /** The fraction of the remaining collateral taken as a validator fee. */
    validatorFeePpm: number;
    /** The fraction of the remaining collateral taken as a liquidity fee. */
    liquidityFeePpm: number;
    /**
     * Config about how the fillable-price spread from the oracle price
     * increases based on the adjusted bankruptcy rating of the subaccount.
     */
    fillablePriceConfig?: FillablePriceConfig;
    /** The maximum value that the cumulative insurance fund delta can take. */
    maxCumulativeInsuranceFundDelta: Long;
}
/** LiquidationsConfig stores all configurable fields related to liquidations. */
export interface LiquidationsConfigSDKType {
    insurance_fund_fee_ppm: number;
    validator_fee_ppm: number;
    liquidity_fee_ppm: number;
    fillable_price_config?: FillablePriceConfigSDKType;
    max_cumulative_insurance_fund_delta: Long;
}
/**
 * FillablePriceConfig stores all configurable fields related to calculating
 * the fillable price for liquidating a position.
 */
export interface FillablePriceConfig {
    /** The rate at which the Adjusted Bankruptcy Rating increases. */
    bankruptcyAdjustmentPpm: number;
    /**
     * The maximum value that the liquidation spread can take, as
     * a ratio against the position's maintenance margin.
     */
    spreadToMaintenanceMarginRatioPpm: number;
}
/**
 * FillablePriceConfig stores all configurable fields related to calculating
 * the fillable price for liquidating a position.
 */
export interface FillablePriceConfigSDKType {
    bankruptcy_adjustment_ppm: number;
    spread_to_maintenance_margin_ratio_ppm: number;
}
export declare const LiquidationsConfig: {
    encode(message: LiquidationsConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LiquidationsConfig;
    fromPartial(object: DeepPartial<LiquidationsConfig>): LiquidationsConfig;
};
export declare const FillablePriceConfig: {
    encode(message: FillablePriceConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FillablePriceConfig;
    fromPartial(object: DeepPartial<FillablePriceConfig>): FillablePriceConfig;
};
