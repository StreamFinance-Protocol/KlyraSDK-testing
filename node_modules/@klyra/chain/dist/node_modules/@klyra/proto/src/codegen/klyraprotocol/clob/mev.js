"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MevNodeToNodeMetrics = exports.ValidatorMevMatches = exports.ClobMidPrice = exports.MEVLiquidationMatch = exports.MEVMatch = void 0;
const subaccount_1 = require("../subaccounts/subaccount");
const clob_pair_1 = require("./clob_pair");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
function createBaseMEVMatch() {
    return {
        takerOrderSubaccountId: undefined,
        takerFeePpm: 0,
        makerOrderSubaccountId: undefined,
        makerOrderSubticks: helpers_1.Long.UZERO,
        makerOrderIsBuy: false,
        makerFeePpm: 0,
        clobPairId: 0,
        fillAmount: helpers_1.Long.UZERO
    };
}
exports.MEVMatch = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.takerOrderSubaccountId !== undefined) {
            subaccount_1.SubaccountId.encode(message.takerOrderSubaccountId, writer.uint32(10).fork()).ldelim();
        }
        if (message.takerFeePpm !== 0) {
            writer.uint32(16).int32(message.takerFeePpm);
        }
        if (message.makerOrderSubaccountId !== undefined) {
            subaccount_1.SubaccountId.encode(message.makerOrderSubaccountId, writer.uint32(26).fork()).ldelim();
        }
        if (!message.makerOrderSubticks.isZero()) {
            writer.uint32(32).uint64(message.makerOrderSubticks);
        }
        if (message.makerOrderIsBuy === true) {
            writer.uint32(40).bool(message.makerOrderIsBuy);
        }
        if (message.makerFeePpm !== 0) {
            writer.uint32(48).int32(message.makerFeePpm);
        }
        if (message.clobPairId !== 0) {
            writer.uint32(56).uint32(message.clobPairId);
        }
        if (!message.fillAmount.isZero()) {
            writer.uint32(64).uint64(message.fillAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMEVMatch();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.takerOrderSubaccountId = subaccount_1.SubaccountId.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.takerFeePpm = reader.int32();
                    break;
                case 3:
                    message.makerOrderSubaccountId = subaccount_1.SubaccountId.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.makerOrderSubticks = reader.uint64();
                    break;
                case 5:
                    message.makerOrderIsBuy = reader.bool();
                    break;
                case 6:
                    message.makerFeePpm = reader.int32();
                    break;
                case 7:
                    message.clobPairId = reader.uint32();
                    break;
                case 8:
                    message.fillAmount = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMEVMatch();
        message.takerOrderSubaccountId = object.takerOrderSubaccountId !== undefined && object.takerOrderSubaccountId !== null ? subaccount_1.SubaccountId.fromPartial(object.takerOrderSubaccountId) : undefined;
        message.takerFeePpm = (_a = object.takerFeePpm) !== null && _a !== void 0 ? _a : 0;
        message.makerOrderSubaccountId = object.makerOrderSubaccountId !== undefined && object.makerOrderSubaccountId !== null ? subaccount_1.SubaccountId.fromPartial(object.makerOrderSubaccountId) : undefined;
        message.makerOrderSubticks = object.makerOrderSubticks !== undefined && object.makerOrderSubticks !== null ? helpers_1.Long.fromValue(object.makerOrderSubticks) : helpers_1.Long.UZERO;
        message.makerOrderIsBuy = (_b = object.makerOrderIsBuy) !== null && _b !== void 0 ? _b : false;
        message.makerFeePpm = (_c = object.makerFeePpm) !== null && _c !== void 0 ? _c : 0;
        message.clobPairId = (_d = object.clobPairId) !== null && _d !== void 0 ? _d : 0;
        message.fillAmount = object.fillAmount !== undefined && object.fillAmount !== null ? helpers_1.Long.fromValue(object.fillAmount) : helpers_1.Long.UZERO;
        return message;
    }
};
function createBaseMEVLiquidationMatch() {
    return {
        liquidatedSubaccountId: undefined,
        insuranceFundDeltaQuoteQuantums: helpers_1.Long.ZERO,
        validatorFeeQuoteQuantums: helpers_1.Long.ZERO,
        liquidityFeeQuoteQuantums: helpers_1.Long.ZERO,
        makerOrderSubaccountId: undefined,
        makerOrderSubticks: helpers_1.Long.UZERO,
        makerOrderIsBuy: false,
        makerFeePpm: 0,
        clobPairId: 0,
        fillAmount: helpers_1.Long.UZERO
    };
}
exports.MEVLiquidationMatch = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.liquidatedSubaccountId !== undefined) {
            subaccount_1.SubaccountId.encode(message.liquidatedSubaccountId, writer.uint32(10).fork()).ldelim();
        }
        if (!message.insuranceFundDeltaQuoteQuantums.isZero()) {
            writer.uint32(16).int64(message.insuranceFundDeltaQuoteQuantums);
        }
        if (!message.validatorFeeQuoteQuantums.isZero()) {
            writer.uint32(24).int64(message.validatorFeeQuoteQuantums);
        }
        if (!message.liquidityFeeQuoteQuantums.isZero()) {
            writer.uint32(32).int64(message.liquidityFeeQuoteQuantums);
        }
        if (message.makerOrderSubaccountId !== undefined) {
            subaccount_1.SubaccountId.encode(message.makerOrderSubaccountId, writer.uint32(42).fork()).ldelim();
        }
        if (!message.makerOrderSubticks.isZero()) {
            writer.uint32(48).uint64(message.makerOrderSubticks);
        }
        if (message.makerOrderIsBuy === true) {
            writer.uint32(56).bool(message.makerOrderIsBuy);
        }
        if (message.makerFeePpm !== 0) {
            writer.uint32(64).int32(message.makerFeePpm);
        }
        if (message.clobPairId !== 0) {
            writer.uint32(72).uint32(message.clobPairId);
        }
        if (!message.fillAmount.isZero()) {
            writer.uint32(80).uint64(message.fillAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMEVLiquidationMatch();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.liquidatedSubaccountId = subaccount_1.SubaccountId.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.insuranceFundDeltaQuoteQuantums = reader.int64();
                    break;
                case 3:
                    message.validatorFeeQuoteQuantums = reader.int64();
                    break;
                case 4:
                    message.liquidityFeeQuoteQuantums = reader.int64();
                    break;
                case 5:
                    message.makerOrderSubaccountId = subaccount_1.SubaccountId.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.makerOrderSubticks = reader.uint64();
                    break;
                case 7:
                    message.makerOrderIsBuy = reader.bool();
                    break;
                case 8:
                    message.makerFeePpm = reader.int32();
                    break;
                case 9:
                    message.clobPairId = reader.uint32();
                    break;
                case 10:
                    message.fillAmount = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMEVLiquidationMatch();
        message.liquidatedSubaccountId = object.liquidatedSubaccountId !== undefined && object.liquidatedSubaccountId !== null ? subaccount_1.SubaccountId.fromPartial(object.liquidatedSubaccountId) : undefined;
        message.insuranceFundDeltaQuoteQuantums = object.insuranceFundDeltaQuoteQuantums !== undefined && object.insuranceFundDeltaQuoteQuantums !== null ? helpers_1.Long.fromValue(object.insuranceFundDeltaQuoteQuantums) : helpers_1.Long.ZERO;
        message.validatorFeeQuoteQuantums = object.validatorFeeQuoteQuantums !== undefined && object.validatorFeeQuoteQuantums !== null ? helpers_1.Long.fromValue(object.validatorFeeQuoteQuantums) : helpers_1.Long.ZERO;
        message.liquidityFeeQuoteQuantums = object.liquidityFeeQuoteQuantums !== undefined && object.liquidityFeeQuoteQuantums !== null ? helpers_1.Long.fromValue(object.liquidityFeeQuoteQuantums) : helpers_1.Long.ZERO;
        message.makerOrderSubaccountId = object.makerOrderSubaccountId !== undefined && object.makerOrderSubaccountId !== null ? subaccount_1.SubaccountId.fromPartial(object.makerOrderSubaccountId) : undefined;
        message.makerOrderSubticks = object.makerOrderSubticks !== undefined && object.makerOrderSubticks !== null ? helpers_1.Long.fromValue(object.makerOrderSubticks) : helpers_1.Long.UZERO;
        message.makerOrderIsBuy = (_a = object.makerOrderIsBuy) !== null && _a !== void 0 ? _a : false;
        message.makerFeePpm = (_b = object.makerFeePpm) !== null && _b !== void 0 ? _b : 0;
        message.clobPairId = (_c = object.clobPairId) !== null && _c !== void 0 ? _c : 0;
        message.fillAmount = object.fillAmount !== undefined && object.fillAmount !== null ? helpers_1.Long.fromValue(object.fillAmount) : helpers_1.Long.UZERO;
        return message;
    }
};
function createBaseClobMidPrice() {
    return {
        clobPair: undefined,
        subticks: helpers_1.Long.UZERO
    };
}
exports.ClobMidPrice = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.clobPair !== undefined) {
            clob_pair_1.ClobPair.encode(message.clobPair, writer.uint32(10).fork()).ldelim();
        }
        if (!message.subticks.isZero()) {
            writer.uint32(16).uint64(message.subticks);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClobMidPrice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.clobPair = clob_pair_1.ClobPair.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.subticks = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseClobMidPrice();
        message.clobPair = object.clobPair !== undefined && object.clobPair !== null ? clob_pair_1.ClobPair.fromPartial(object.clobPair) : undefined;
        message.subticks = object.subticks !== undefined && object.subticks !== null ? helpers_1.Long.fromValue(object.subticks) : helpers_1.Long.UZERO;
        return message;
    }
};
function createBaseValidatorMevMatches() {
    return {
        matches: [],
        liquidationMatches: []
    };
}
exports.ValidatorMevMatches = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.matches) {
            exports.MEVMatch.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.liquidationMatches) {
            exports.MEVLiquidationMatch.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidatorMevMatches();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.matches.push(exports.MEVMatch.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.liquidationMatches.push(exports.MEVLiquidationMatch.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseValidatorMevMatches();
        message.matches = ((_a = object.matches) === null || _a === void 0 ? void 0 : _a.map(e => exports.MEVMatch.fromPartial(e))) || [];
        message.liquidationMatches = ((_b = object.liquidationMatches) === null || _b === void 0 ? void 0 : _b.map(e => exports.MEVLiquidationMatch.fromPartial(e))) || [];
        return message;
    }
};
function createBaseMevNodeToNodeMetrics() {
    return {
        validatorMevMatches: undefined,
        clobMidPrices: [],
        bpMevMatches: undefined,
        proposalReceiveTime: helpers_1.Long.UZERO
    };
}
exports.MevNodeToNodeMetrics = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.validatorMevMatches !== undefined) {
            exports.ValidatorMevMatches.encode(message.validatorMevMatches, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.clobMidPrices) {
            exports.ClobMidPrice.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.bpMevMatches !== undefined) {
            exports.ValidatorMevMatches.encode(message.bpMevMatches, writer.uint32(26).fork()).ldelim();
        }
        if (!message.proposalReceiveTime.isZero()) {
            writer.uint32(32).uint64(message.proposalReceiveTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMevNodeToNodeMetrics();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorMevMatches = exports.ValidatorMevMatches.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.clobMidPrices.push(exports.ClobMidPrice.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.bpMevMatches = exports.ValidatorMevMatches.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.proposalReceiveTime = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMevNodeToNodeMetrics();
        message.validatorMevMatches = object.validatorMevMatches !== undefined && object.validatorMevMatches !== null ? exports.ValidatorMevMatches.fromPartial(object.validatorMevMatches) : undefined;
        message.clobMidPrices = ((_a = object.clobMidPrices) === null || _a === void 0 ? void 0 : _a.map(e => exports.ClobMidPrice.fromPartial(e))) || [];
        message.bpMevMatches = object.bpMevMatches !== undefined && object.bpMevMatches !== null ? exports.ValidatorMevMatches.fromPartial(object.bpMevMatches) : undefined;
        message.proposalReceiveTime = object.proposalReceiveTime !== undefined && object.proposalReceiveTime !== null ? helpers_1.Long.fromValue(object.proposalReceiveTime) : helpers_1.Long.UZERO;
        return message;
    }
};
//# sourceMappingURL=data:application/json;base64,