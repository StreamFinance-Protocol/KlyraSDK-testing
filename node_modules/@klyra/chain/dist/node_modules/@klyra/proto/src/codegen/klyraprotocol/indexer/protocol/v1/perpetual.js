"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerpetualMarketTypeSDKType = exports.PerpetualMarketType = void 0;
exports.perpetualMarketTypeFromJSON = perpetualMarketTypeFromJSON;
exports.perpetualMarketTypeToJSON = perpetualMarketTypeToJSON;
/**
 * Market type of perpetual.
 * Defined in perpetual.
 */
var PerpetualMarketType;
(function (PerpetualMarketType) {
    /** PERPETUAL_MARKET_TYPE_CROSS - Market type for cross margin perpetual markets. */
    PerpetualMarketType[PerpetualMarketType["PERPETUAL_MARKET_TYPE_CROSS"] = 0] = "PERPETUAL_MARKET_TYPE_CROSS";
    /** PERPETUAL_MARKET_TYPE_ISOLATED - Market type for isolated margin perpetual markets. */
    PerpetualMarketType[PerpetualMarketType["PERPETUAL_MARKET_TYPE_ISOLATED"] = 1] = "PERPETUAL_MARKET_TYPE_ISOLATED";
    PerpetualMarketType[PerpetualMarketType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PerpetualMarketType || (exports.PerpetualMarketType = PerpetualMarketType = {}));
exports.PerpetualMarketTypeSDKType = PerpetualMarketType;
function perpetualMarketTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "PERPETUAL_MARKET_TYPE_CROSS":
            return PerpetualMarketType.PERPETUAL_MARKET_TYPE_CROSS;
        case 1:
        case "PERPETUAL_MARKET_TYPE_ISOLATED":
            return PerpetualMarketType.PERPETUAL_MARKET_TYPE_ISOLATED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PerpetualMarketType.UNRECOGNIZED;
    }
}
function perpetualMarketTypeToJSON(object) {
    switch (object) {
        case PerpetualMarketType.PERPETUAL_MARKET_TYPE_CROSS:
            return "PERPETUAL_MARKET_TYPE_CROSS";
        case PerpetualMarketType.PERPETUAL_MARKET_TYPE_ISOLATED:
            return "PERPETUAL_MARKET_TYPE_ISOLATED";
        case PerpetualMarketType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVycGV0dWFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BrbHlyYS9wcm90by9zcmMvY29kZWdlbi9rbHlyYXByb3RvY29sL2luZGV4ZXIvcHJvdG9jb2wvdjEvcGVycGV0dWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQWFBLGtFQWVDO0FBQ0QsOERBWUM7QUF6Q0Q7OztHQUdHO0FBQ0gsSUFBWSxtQkFPWDtBQVBELFdBQVksbUJBQW1CO0lBQzdCLG9GQUFvRjtJQUNwRiwyR0FBK0IsQ0FBQTtJQUUvQiwwRkFBMEY7SUFDMUYsaUhBQWtDLENBQUE7SUFDbEMsOEVBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQVBXLG1CQUFtQixtQ0FBbkIsbUJBQW1CLFFBTzlCO0FBQ1ksUUFBQSwwQkFBMEIsR0FBRyxtQkFBbUIsQ0FBQztBQUM5RCxTQUFnQiwyQkFBMkIsQ0FBQyxNQUFXO0lBQ3JELFFBQVEsTUFBTSxFQUFFLENBQUM7UUFDZixLQUFLLENBQUMsQ0FBQztRQUNQLEtBQUssNkJBQTZCO1lBQ2hDLE9BQU8sbUJBQW1CLENBQUMsMkJBQTJCLENBQUM7UUFFekQsS0FBSyxDQUFDLENBQUM7UUFDUCxLQUFLLGdDQUFnQztZQUNuQyxPQUFPLG1CQUFtQixDQUFDLDhCQUE4QixDQUFDO1FBRTVELEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDUixLQUFLLGNBQWMsQ0FBQztRQUNwQjtZQUNFLE9BQU8sbUJBQW1CLENBQUMsWUFBWSxDQUFDO0lBQzVDLENBQUM7QUFDSCxDQUFDO0FBQ0QsU0FBZ0IseUJBQXlCLENBQUMsTUFBMkI7SUFDbkUsUUFBUSxNQUFNLEVBQUUsQ0FBQztRQUNmLEtBQUssbUJBQW1CLENBQUMsMkJBQTJCO1lBQ2xELE9BQU8sNkJBQTZCLENBQUM7UUFFdkMsS0FBSyxtQkFBbUIsQ0FBQyw4QkFBOEI7WUFDckQsT0FBTyxnQ0FBZ0MsQ0FBQztRQUUxQyxLQUFLLG1CQUFtQixDQUFDLFlBQVksQ0FBQztRQUN0QztZQUNFLE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7QUFDSCxDQUFDIn0=