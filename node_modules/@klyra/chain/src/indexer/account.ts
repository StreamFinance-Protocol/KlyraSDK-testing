import {
  type OrderSide,
  type OrderStatus,
  type OrderType,
  type IndexerPerpetualPositionStatus,
  type IndexerSubaccountAssetPosition,
  type IndexerSubaccountFill,
  type IndexerSubaccountHistoricalPnl,
  type IndexerSubaccountOrder,
  type IndexerSubaccountPerpetualPositionSubscribed,
  type IndexerSubaccountResponse,
  type IndexerSubaccountTransfer,
} from "@klyra/shared";
import RestClient from "../lib/rest-client";

// TODO: add comments to the methods that explain what they do
export default class AccountClient extends RestClient {
  async getSubaccounts(
    address: string,
    limit?: number
  ): Promise<{ subaccounts: IndexerSubaccountResponse[] }> {
    return this.get(`/v4/addresses/${address}`, { limit });
  }

  async getSubaccount(
    address: string,
    subaccountNumber: number
  ): Promise<{ subaccount: IndexerSubaccountResponse }> {
    return this.get(
      `/v4/addresses/${address}/subaccountNumber/${subaccountNumber}`
    );
  }

  async getSubaccountPerpetualPositions(
    address: string,
    subaccountNumber: number,
    status?: IndexerPerpetualPositionStatus | null,
    limit?: number | null,
    createdBeforeOrAtHeight?: number | null,
    createdBeforeOrAt?: string | null
  ): Promise<{
    positions: IndexerSubaccountPerpetualPositionSubscribed[];
  }> {
    return this.get("/v4/perpetualPositions", {
      address,
      subaccountNumber,
      status,
      limit,
      createdBeforeOrAtHeight,
      createdBeforeOrAt,
    });
  }

  async getSubaccountAssetPositions(
    address: string,
    subaccountNumber: number,
    status?: IndexerPerpetualPositionStatus | null,
    limit?: number | null,
    createdBeforeOrAtHeight?: number | null,
    createdBeforeOrAt?: string | null
  ): Promise<{
    positions: IndexerSubaccountAssetPosition[];
  }> {
    return this.get("/v4/assetPositions", {
      address,
      subaccountNumber,
      status,
      limit,
      createdBeforeOrAtHeight,
      createdBeforeOrAt,
    });
  }

  async getSubaccountTransfers(
    address: string,
    subaccountNumber: number,
    limit?: number | null,
    createdBeforeOrAtHeight?: number | null,
    createdBeforeOrAt?: string | null,
    page?: number | null
  ): Promise<{
    transfers: IndexerSubaccountTransfer[];
  }> {
    return this.get("/v4/transfers", {
      address,
      subaccountNumber,
      limit,
      createdBeforeOrAtHeight,
      createdBeforeOrAt,
      page,
    });
  }

  async getParentSubaccountNumberTransfers(
    address: string,
    parentSubaccountNumber: number,
    limit?: number | null,
    createdBeforeOrAtHeight?: number | null,
    createdBeforeOrAt?: string | null,
    page?: number | null
  ): Promise<{
    transfers: IndexerSubaccountTransfer[];
  }> {
    return this.get("/v4/transfers/parentSubaccountNumber", {
      address,
      parentSubaccountNumber,
      limit,
      createdBeforeOrAtHeight,
      createdBeforeOrAt,
      page,
    });
  }

  async getSubaccountOrders(
    address: string,
    subaccountNumber: number,
    ticker?: string | null,
    side?: OrderSide | null,
    status?: OrderStatus | null,
    type?: OrderType | null,
    limit?: number | null,
    goodTilBlockBeforeOrAt?: number | null,
    goodTilBlockTimeBeforeOrAt?: string | null,
    returnLatestOrders?: boolean | null
  ): Promise<IndexerSubaccountOrder[]> {
    return this.get("/v4/orders", {
      address,
      subaccountNumber,
      ticker,
      side,
      status,
      type,
      limit,
      goodTilBlockBeforeOrAt,
      goodTilBlockTimeBeforeOrAt,
      returnLatestOrders,
    });
  }

  async getOrder(orderId: string): Promise<IndexerSubaccountOrder> {
    return this.get(`/v4/orders/${orderId}`);
  }

  async getSubaccountFills(
    address: string,
    subaccountNumber: number,
    ticker?: string | null,
    limit?: number | null,
    createdBeforeOrAtHeight?: number | null,
    createdBeforeOrAt?: string | null,
    page?: number | null
  ): Promise<{
    fills: IndexerSubaccountFill[];
  }> {
    return this.get("/v4/fills", {
      address,
      subaccountNumber,
      ticker,
      limit,
      createdBeforeOrAtHeight,
      createdBeforeOrAt,
      page,
    });
  }

  async getParentSubaccountNumberFills(
    address: string,
    parentSubaccountNumber: number,
    ticker?: string | null,
    limit?: number | null,
    createdBeforeOrAtHeight?: number | null,
    createdBeforeOrAt?: string | null,
    page?: number | null
  ): Promise<{
    fills: IndexerSubaccountFill[];
  }> {
    return this.get("/v4/fills/parentSubaccountNumber", {
      address,
      parentSubaccountNumber,
      ticker,
      limit,
      createdBeforeOrAtHeight,
      createdBeforeOrAt,
      page,
    });
  }

  async getSubaccountHistoricalPNLs(
    address: string,
    subaccountNumber: number,
    createdBeforeOrAtHeight?: number | null,
    createdBeforeOrAt?: string | null,
    createdOnOrAfterHeight?: number | null,
    createdOnOrAfter?: string | null,
    limit?: number | null,
    page?: number | null
  ): Promise<{ historicalPnls: IndexerSubaccountHistoricalPnl[] }> {
    return this.get("/v4/historical-pnl", {
      address,
      subaccountNumber,
      createdBeforeOrAtHeight,
      createdBeforeOrAt,
      createdOnOrAfterHeight,
      createdOnOrAfter,
      limit,
      page,
    });
  }
}
