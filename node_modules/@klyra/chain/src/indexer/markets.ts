import {
  type IndexerHistoricalFunding,
  type IndexerCandleContents,
  type IndexerOrderbook,
  type IndexerPerpetualMarket,
  type IndexerTrade,
} from "@klyra/shared";
import RestClient from "../lib/rest-client";

// TODO: add comments to the methods that explain what they do
// TODO(UCC) - add error handleing if for example you call getPerpetualMarket and the market doesn't exist
export default class MarketsClient extends RestClient {
  /**
   * @description Get all perpetual markets
   *
   * @returns All perpetual markets
   */
  async getAllPerpetualMarkets(): Promise<{
    markets: Record<string, IndexerPerpetualMarket>;
  }> {
    return this.get("/v4/perpetualMarkets");
  }

  /**
   * @description Get a perpetual market by its id
   *
   * @param marketId The id of the market to get
   * @returns The perpetual market
   */
  async getPerpetualMarket(marketId: string): Promise<IndexerPerpetualMarket> {
    const markets = await this.get<{
      markets: Record<string, IndexerPerpetualMarket>;
    }>(`/v4/perpetualMarkets`, {
      ticker: marketId,
    });
    if (!markets.markets[marketId]) {
      throw new Error(`Market ${marketId} not found`);
    }
    return markets.markets[marketId];
  }

  /**
   * @description Get the orderbook for a market
   *
   * @param marketId The id of the market to get the orderbook for
   * @returns The orderbook for the market
   */
  async getPerpetualMarketOrderbook(
    marketId: string
  ): Promise<IndexerOrderbook> {
    return this.get(`/v4/orderbooks/perpetualMarket/${marketId}`);
  }

  /**
   * @description Get the trades for a market
   *
   * @param marketId The id of the market to get the trades for
   * @returns The trades for the market
   */
  async getPerpetualMarketTrades(
    market: string,
    startingBeforeOrAtHeight?: number | null,
    startingBeforeOrAt?: string | null,
    limit?: number | null,
    page?: number | null
  ): Promise<{ trades: IndexerTrade[] }> {
    const uri = `/v4/trades/perpetualMarket/${market}`;
    return this.get(uri, {
      createdBeforeOrAtHeight: startingBeforeOrAtHeight,
      createdBeforeOrAt: startingBeforeOrAt,
      limit,
      page,
    });
  }

  /**
   * @description Get the candles for a market
   *
   * @param marketId The id of the market to get the candles for
   * @returns The candles for the market
   */
  async getPerpetualMarketCandles(
    market: string,
    resolution: string,
    fromISO?: string | null,
    toISO?: string | null,
    limit?: number | null
  ): Promise<{ candles: IndexerCandleContents[] }> {
    const uri = `/v4/candles/perpetualMarkets/${market}`;
    return this.get(uri, {
      resolution,
      fromISO,
      toISO,
      limit,
    });
  }

  /**
   * @description Get the historical funding for a perpetual market
   *
   * @param market The id of the market to get the historical funding for
   * @returns The historical funding for the perpetual market
   */
  async getPerpetualMarketHistoricalFunding(
    market: string,
    effectiveBeforeOrAt?: string | null,
    effectiveBeforeOrAtHeight?: number | null,
    limit?: number | null
  ): Promise<{ historicalFunding: IndexerHistoricalFunding[] }> {
    const uri = `/v4/historicalFunding/${market}`;
    return this.get(uri, {
      effectiveBeforeOrAt,
      effectiveBeforeOrAtHeight,
      limit,
    });
  }

  /**
   * @description Get the sparklines for a market.
   * This is a list of the last 24 hours of candle data
   *
   * @param period The period to get the sparklines for
   * @returns The sparklines for the market
   */
  async getPerpetualMarketSparklines(
    period: string
  ): Promise<Record<string, string[]>> {
    const uri = "/v4/sparklines";
    return this.get(uri, {
      timePeriod: period,
    });
  }
}
