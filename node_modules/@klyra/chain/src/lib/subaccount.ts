import { MAX_SUBACCOUNT_NUMBER } from "@klyra/shared";
import { type LocalWallet } from "./local-wallet";

/**
 * @description A class that contains a wallet and a subaccount number
 * It's used to execute transactions on behalf of a subaccount
 */
export class WalletSubaccountInfo {
  readonly wallet: LocalWallet;
  readonly subaccountNumber: number;

  constructor(wallet: LocalWallet, subaccountNumber = 0) {
    if (subaccountNumber < 0 || subaccountNumber > MAX_SUBACCOUNT_NUMBER) {
      throw new Error(
        `Subaccount number must be between 0 and ${MAX_SUBACCOUNT_NUMBER}`
      );
    }
    this.wallet = wallet;
    this.subaccountNumber = subaccountNumber;
  }

  get address(): string {
    const address = this.wallet.getAddress();
    if (address.length > 0) {
      return address;
    }
    throw new Error("Address not set");
  }
}

/**
 * @description A class that contains a subaccount number and an address
 * It's used to identify a subaccount, even when the wallet is not available
 *
 * With this class you can get the address of the subaccount, but you cannot sign transactions
 */
export class SubaccountInfo {
  readonly subaccountNumber: number;
  readonly address: string;

  constructor(address: string, subaccountNumber = 0) {
    if (subaccountNumber < 0 || subaccountNumber > MAX_SUBACCOUNT_NUMBER) {
      throw new Error(
        `Subaccount number must be between 0 and ${MAX_SUBACCOUNT_NUMBER}`
      );
    }

    this.subaccountNumber = subaccountNumber;
    this.address = address;
  }
}
