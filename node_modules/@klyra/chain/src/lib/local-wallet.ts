import {
  type Secp256k1Pubkey,
  type StdFee,
  encodeSecp256k1Pubkey,
} from "@cosmjs/amino";
import {
  type AccountData,
  DirectSecp256k1HdWallet,
  type EncodeObject,
  type OfflineSigner,
} from "@cosmjs/proto-signing";
import { SigningStargateClient } from "@cosmjs/stargate";
import Long from "long";
import protobuf from "protobufjs";
import { type TransactionOptions } from "../types";
import { generateRegistry } from "./registry";
import { TransactionSigner } from "./signer";

// Required for encoding and decoding queries that are of type Long.
protobuf.util.Long = Long;
protobuf.configure();

export class LocalWallet {
  private constructor(
    private readonly offlineSigner: OfflineSigner,
    private readonly accounts: readonly AccountData[],
    private readonly address: string,
    private readonly pubKey: Secp256k1Pubkey,
    private readonly transactionSigner: TransactionSigner
  ) {}

  static async fromOfflineSigner(signer: OfflineSigner): Promise<LocalWallet> {
    const stargateClient = await SigningStargateClient.offline(signer, {
      registry: generateRegistry(),
    });
    const accounts = await signer.getAccounts();
    const firstAccount = accounts[0];
    if (!firstAccount) {
      throw new Error("No accounts found");
    }
    const address = firstAccount.address;
    const pubKey = encodeSecp256k1Pubkey(firstAccount.pubkey);
    const transactionSigner = new TransactionSigner(address, stargateClient);

    return new LocalWallet(
      signer,
      accounts,
      address,
      pubKey,
      transactionSigner
    );
  }

  static async fromMnemonic(
    mnemonic: string,
    prefix?: string
  ): Promise<LocalWallet> {
    const signer = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {
      prefix,
    });
    return LocalWallet.fromOfflineSigner(signer);
  }

  getAccounts(): readonly AccountData[] {
    return this.accounts;
  }

  getAddress(): string {
    return this.address;
  }

  getPubKey(): Secp256k1Pubkey {
    return this.pubKey;
  }

  async signTransaction(
    messages: readonly EncodeObject[],
    transactionOptions: TransactionOptions,
    fee?: StdFee,
    memo = ""
  ): Promise<Uint8Array> {
    return this.transactionSigner.signTransaction(
      [...messages],
      transactionOptions,
      fee,
      memo
    );
  }
}
