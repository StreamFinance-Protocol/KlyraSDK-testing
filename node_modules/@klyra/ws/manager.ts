import {
  ErrorEvent,
  MessageEvent as NodeMessageEvent,
  WebSocket as NodeWebSocket,
} from "ws";
import {
  MessageChannel,
  MessageType,
  WebSocketConfig,
  WebSocketMessage,
} from "@klyra/shared";
import { EventEmitter, EventCallback } from "@klyra/shared";

type WebSocketInstance = WebSocket | NodeWebSocket;

export class WebSocketManager {
  private ws: WebSocketInstance | null = null;
  private url: string;
  private reconnectInterval: number;
  private intentionalClose: boolean = false;
  public isConnected: boolean = false;
  public eventEmitter: EventEmitter;
  public subscribedChannels: [MessageChannel, string?][] = [];

  constructor(config: WebSocketConfig) {
    this.url = config.url;
    this.reconnectInterval = config.reconnectInterval || 5000;
    this.eventEmitter = new EventEmitter();
  }

  // checks if we are on the client or server and returns the appropriate WebSocket
  private getWebSocket(): WebSocketInstance {
    if (typeof window !== "undefined") {
      return new WebSocket(this.url);
    } else {
      return new NodeWebSocket(this.url);
    }
  }

  connect(): void {
    this.intentionalClose = false;
    this.ws = this.getWebSocket();

    this.ws.onopen = () => {
      console.log("WebSocket is now open!");
      this.isConnected = true;
    };

    this.ws.onmessage = (event: MessageEvent | NodeMessageEvent) => {
      console.log("NEW WS MSG", event.data.toString());
      try {
        const message: WebSocketMessage<unknown> = JSON.parse(
          event.data.toString()
        );

        // add to susbcribed messages if it is a subscribed channel
        if (message.type === MessageType.SUBSCRIBE) {
          this.subscribedChannels.push([message.channel, message.id]);
        }

        // if it's a unsubscribe message, remove from subscribed channels
        if (message.type === MessageType.UNSUBSCRIBED) {
          this.subscribedChannels = this.subscribedChannels.filter(
            ([channel, id]) =>
              channel !== message.channel || (id && id !== message.id)
          );
        }

        this.eventEmitter.emit("message", message);
      } catch (error) {
        console.error("Error parsing WebSocket message:", error);
      }
    };

    this.ws.onclose = () => {
      console.log("WebSocket disconnected.");
      this.eventEmitter.emit("disconnected");
      this.isConnected = false;
      if (!this.intentionalClose) {
        setTimeout(() => this.connect(), this.reconnectInterval);
      }
    };

    this.ws.onerror = (error: ErrorEvent) => {
      console.error("WebSocket error:", error);
      this.eventEmitter.emit("error", error);
    };
  }

  send(message: WebSocketMessage<unknown>): void {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      // if it's a subscribe message, and the channel is already subscribed, don't send it
      if (message.type === MessageType.SUBSCRIBE) {
        const isSubscribed = this.subscribedChannels.some(
          ([channel, id]) =>
            channel === message.channel && id && id === message.id
        );
        if (isSubscribed) {
          return;
        }
      }

      this.ws.send(JSON.stringify(message));
    } else {
      console.error("WebSocket is not open");
    }
  }

  on(event: string, callback: EventCallback): void {
    this.eventEmitter.on(event, callback);
  }

  off(event: string, callback: EventCallback): void {
    this.eventEmitter.off(event, callback);
  }

  disconnect(): void {
    this.intentionalClose = true;
    this.ws?.close();
    this.subscribedChannels = [];
  }
}
