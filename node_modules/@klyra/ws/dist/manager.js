"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketManager = void 0;
const ws_1 = require("ws");
const shared_1 = require("@klyra/shared");
const shared_2 = require("@klyra/shared");
class WebSocketManager {
    constructor(config) {
        this.ws = null;
        this.intentionalClose = false;
        this.isConnected = false;
        this.subscribedChannels = [];
        this.url = config.url;
        this.reconnectInterval = config.reconnectInterval || 5000;
        this.eventEmitter = new shared_2.EventEmitter();
    }
    // checks if we are on the client or server and returns the appropriate WebSocket
    getWebSocket() {
        if (typeof window !== "undefined") {
            return new WebSocket(this.url);
        }
        else {
            return new ws_1.WebSocket(this.url);
        }
    }
    connect() {
        this.intentionalClose = false;
        this.ws = this.getWebSocket();
        this.ws.onopen = () => {
            console.log("WebSocket is now open!");
            this.isConnected = true;
        };
        this.ws.onmessage = (event) => {
            console.log("NEW WS MSG", event.data.toString());
            try {
                const message = JSON.parse(event.data.toString());
                // add to susbcribed messages if it is a subscribed channel
                if (message.type === shared_1.MessageType.SUBSCRIBE) {
                    this.subscribedChannels.push([message.channel, message.id]);
                }
                // if it's a unsubscribe message, remove from subscribed channels
                if (message.type === shared_1.MessageType.UNSUBSCRIBED) {
                    this.subscribedChannels = this.subscribedChannels.filter(([channel, id]) => channel !== message.channel || (id && id !== message.id));
                }
                this.eventEmitter.emit("message", message);
            }
            catch (error) {
                console.error("Error parsing WebSocket message:", error);
            }
        };
        this.ws.onclose = () => {
            console.log("WebSocket disconnected.");
            this.eventEmitter.emit("disconnected");
            this.isConnected = false;
            if (!this.intentionalClose) {
                setTimeout(() => this.connect(), this.reconnectInterval);
            }
        };
        this.ws.onerror = (error) => {
            console.error("WebSocket error:", error);
            this.eventEmitter.emit("error", error);
        };
    }
    send(message) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            // if it's a subscribe message, and the channel is already subscribed, don't send it
            if (message.type === shared_1.MessageType.SUBSCRIBE) {
                const isSubscribed = this.subscribedChannels.some(([channel, id]) => channel === message.channel && id && id === message.id);
                if (isSubscribed) {
                    return;
                }
            }
            this.ws.send(JSON.stringify(message));
        }
        else {
            console.error("WebSocket is not open");
        }
    }
    on(event, callback) {
        this.eventEmitter.on(event, callback);
    }
    off(event, callback) {
        this.eventEmitter.off(event, callback);
    }
    disconnect() {
        var _a;
        this.intentionalClose = true;
        (_a = this.ws) === null || _a === void 0 ? void 0 : _a.close();
        this.subscribedChannels = [];
    }
}
exports.WebSocketManager = WebSocketManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL21hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkJBSVk7QUFDWiwwQ0FLdUI7QUFDdkIsMENBQTREO0FBSTVELE1BQWEsZ0JBQWdCO0lBUzNCLFlBQVksTUFBdUI7UUFSM0IsT0FBRSxHQUE2QixJQUFJLENBQUM7UUFHcEMscUJBQWdCLEdBQVksS0FBSyxDQUFDO1FBQ25DLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBRTdCLHVCQUFrQixHQUFnQyxFQUFFLENBQUM7UUFHMUQsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxNQUFNLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDO1FBQzFELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxxQkFBWSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVELGlGQUFpRjtJQUN6RSxZQUFZO1FBQ2xCLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFLENBQUM7WUFDbEMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakMsQ0FBQzthQUFNLENBQUM7WUFDTixPQUFPLElBQUksY0FBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQyxDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRTlCLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtZQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDMUIsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFzQyxFQUFFLEVBQUU7WUFDN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQztnQkFDSCxNQUFNLE9BQU8sR0FBOEIsSUFBSSxDQUFDLEtBQUssQ0FDbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FDdEIsQ0FBQztnQkFFRiwyREFBMkQ7Z0JBQzNELElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxvQkFBVyxDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUMzQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDOUQsQ0FBQztnQkFFRCxpRUFBaUU7Z0JBQ2pFLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxvQkFBVyxDQUFDLFlBQVksRUFBRSxDQUFDO29CQUM5QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FDdEQsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQ2hCLE9BQU8sS0FBSyxPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQzNELENBQUM7Z0JBQ0osQ0FBQztnQkFFRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDN0MsQ0FBQztZQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7Z0JBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMzRCxDQUFDO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBQzNCLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDM0QsQ0FBQztRQUNILENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFO1lBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBa0M7UUFDckMsSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxLQUFLLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNyRCxvRkFBb0Y7WUFDcEYsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLG9CQUFXLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBQzNDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQy9DLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUNoQixPQUFPLEtBQUssT0FBTyxDQUFDLE9BQU8sSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLE9BQU8sQ0FBQyxFQUFFLENBQ3pELENBQUM7Z0JBQ0YsSUFBSSxZQUFZLEVBQUUsQ0FBQztvQkFDakIsT0FBTztnQkFDVCxDQUFDO1lBQ0gsQ0FBQztZQUVELElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN4QyxDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUN6QyxDQUFDO0lBQ0gsQ0FBQztJQUVELEVBQUUsQ0FBQyxLQUFhLEVBQUUsUUFBdUI7UUFDdkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxHQUFHLENBQUMsS0FBYSxFQUFFLFFBQXVCO1FBQ3hDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsVUFBVTs7UUFDUixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQzdCLE1BQUEsSUFBSSxDQUFDLEVBQUUsMENBQUUsS0FBSyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztJQUMvQixDQUFDO0NBQ0Y7QUExR0QsNENBMEdDIn0=