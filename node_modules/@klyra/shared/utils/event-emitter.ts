export type EventCallback<T extends unknown[] = unknown[]> = (
  ...args: T
) => void;

export class EventEmitter<T extends unknown[] = unknown[]> {
  private events: Record<string, EventCallback<T>[]> = {};

  on(event: string, listener: EventCallback<T>): void {
    (this.events[event] ??= []).push(listener);
  }

  off(event: string, listenerToRemove: EventCallback<T>): void {
    const listeners = this.events[event] ?? [];

    this.events[event] = listeners.filter(
      (listener) => listener !== listenerToRemove
    );
  }

  emit(event: string, ...args: T): void {
    const listeners = this.events[event] ?? [];

    listeners.forEach((listener) => {
      listener.apply(this, args);
    });
  }

  once(event: string, listener: EventCallback<T>): void {
    const onceWrapper = (...args: T): void => {
      listener.apply(this, args);
      this.off(event, onceWrapper);
    };
    this.on(event, onceWrapper);
  }

  removeAllListeners(event?: string): void {
    if (event) {
      this.events[event] = [];
    } else {
      this.events = {};
    }
  }

  listenerCount(event: string): number {
    const listeners = this.events[event] ?? [];
    return listeners.length;
  }

  rawListeners(event: string): EventCallback<T>[] {
    return this.events[event] ?? [];
  }
}
