import { type WebSocketMessage } from "../websocket";

export enum IndexerPerpetualMarketStatus {
  ACTIVE = "ACTIVE",
  PAUSED = "PAUSED",
  CANCEL_ONLY = "CANCEL_ONLY",
  POST_ONLY = "POST_ONLY",
  INITIALIZING = "INITIALIZING",
  FINAL_SETTLEMENT = "FINAL_SETTLEMENT",
}

export interface IndexerOraclePriceMarket {
  spotPrice: string;
  pnlPrice: string;
  effectiveAt: string;
  effectiveAtHeight: string;
  marketId: number;
}

export interface IndexerHistoricalFunding {
  ticker: string;
  rate: string;
  price: string;
  effectiveAtHeight: string;
  effectiveAt: string;
}

export enum IndexerPerpetualMarketType {
  CROSS = "CROSS",
  ISOLATED = "ISOLATED",
}

export interface IndexerPerpetualMarket {
  clobPairId: string;
  ticker: string;
  status: IndexerPerpetualMarketStatus;
  pnlPrice: string;
  spotPrice: string;
  priceChange24H: string;
  volume24H: string;
  trades24H: number;
  nextFundingRate: string;
  initialMarginFraction: string;
  maintenanceMarginFraction: string;
  openInterest: string;
  atomicResolution: number;
  quantumConversionExponent: number;
  tickSize: string;
  stepSize: string;
  stepBaseQuantums: string;
  subticksPerTick: string;
  marketType: IndexerPerpetualMarketType;
  openInterestLowerCap: string;
  openInterestUpperCap: string;
  baseOpenInterest: string;
  perpYieldIndex: string;
}

export type IndexerTradingPerpetualMarket = Partial<IndexerPerpetualMarket>;

type IndexerMarketBatchUpdateContents = {
  oraclePrices?: Record<string, IndexerOraclePriceMarket>;
  trading?: Record<string, IndexerTradingPerpetualMarket>;
}[];

interface IndexerMarketSubscribedContents {
  markets: Record<string, IndexerPerpetualMarket>;
}

export type IndexerMarketBatchUpdateMessage =
  WebSocketMessage<IndexerMarketBatchUpdateContents>;

export type IndexerMarketSubscribedMessage =
  WebSocketMessage<IndexerMarketSubscribedContents>;
