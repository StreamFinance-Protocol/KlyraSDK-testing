"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const store_1 = require("../core/store");
const trades_processor_1 = require("../processors/trades.processor");
const markets_processor_1 = require("../processors/markets.processor");
const mocks_1 = require("./mocks");
(0, globals_1.describe)("MarketsProcessor", () => {
    let store;
    let marketsProcessor;
    (0, globals_1.beforeAll)(() => {
        store = new store_1.Store();
        marketsProcessor = new markets_processor_1.MarketsProcessor(store);
    });
    (0, globals_1.it)("should be defined", () => {
        (0, globals_1.expect)(trades_processor_1.TradesProcessor).toBeDefined();
    });
    (0, globals_1.it)("should process markets", () => {
        marketsProcessor.processSubscribed(mocks_1.MarketsMocks.SUBSCRIBED_MESSAGE);
        const markets = store.getState().markets;
        (0, globals_1.expect)(markets).toBeDefined();
        (0, globals_1.expect)(Object.keys(markets).length).toBe(2);
        (0, globals_1.expect)(markets["BTC-USD"]).toBeDefined();
        const market = markets["ETH-USD"];
        (0, globals_1.expect)(market).toBeDefined();
        if (!market) {
            throw new Error("Market is undefined");
        }
        (0, globals_1.expect)(market.perpetual.trades24H).toBe(2109);
        (0, globals_1.expect)(market.status.canTrade).toBe(true);
    });
    (0, globals_1.it)("should process oracle price updates", () => {
        var _a, _b;
        const previousMarkets = store.getState().markets;
        const previousMarket = previousMarkets["ETH-USD"];
        (0, globals_1.expect)(previousMarket).toBeDefined();
        (0, globals_1.expect)(previousMarket === null || previousMarket === void 0 ? void 0 : previousMarket.status.canTrade).toBe(true);
        marketsProcessor.processBatchUpdate(mocks_1.MarketsMocks.ORACLE_PRICE_UPDATE_MESSAGE);
        const markets = store.getState().markets;
        (0, globals_1.expect)((_a = markets["ETH-USD"]) === null || _a === void 0 ? void 0 : _a.spotPrice).toBe(2582.364261);
        (0, globals_1.expect)((_b = markets["BTC-USD"]) === null || _b === void 0 ? void 0 : _b.spotPrice).toBe(63360.41819);
    });
    (0, globals_1.it)("should process trading market updates", () => {
        var _a;
        const previousMarkets = store.getState().markets;
        const previousMarket = previousMarkets["BTC-USD"];
        (0, globals_1.expect)(previousMarket).toBeDefined();
        (0, globals_1.expect)(previousMarket === null || previousMarket === void 0 ? void 0 : previousMarket.status.canTrade).toBe(true);
        marketsProcessor.processBatchUpdate(mocks_1.MarketsMocks.TRADING_MARKET_UPDATE_MESSAGE);
        const markets = store.getState().markets;
        (0, globals_1.expect)((_a = markets["BTC-USD"]) === null || _a === void 0 ? void 0 : _a.perpetual.trades24H).toBe(10000);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0cy1wcm9jZXNzb3IudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9fX3Rlc3RzX18vbWFya2V0cy1wcm9jZXNzb3IudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUFnRTtBQUNoRSx5Q0FBc0M7QUFDdEMscUVBQWlFO0FBQ2pFLHVFQUFtRTtBQUNuRSxtQ0FBdUM7QUFFdkMsSUFBQSxrQkFBUSxFQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUNoQyxJQUFJLEtBQVksQ0FBQztJQUNqQixJQUFJLGdCQUFrQyxDQUFDO0lBRXZDLElBQUEsbUJBQVMsRUFBQyxHQUFHLEVBQUU7UUFDYixLQUFLLEdBQUcsSUFBSSxhQUFLLEVBQUUsQ0FBQztRQUNwQixnQkFBZ0IsR0FBRyxJQUFJLG9DQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxZQUFFLEVBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1FBQzNCLElBQUEsZ0JBQU0sRUFBQyxrQ0FBZSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLFlBQUUsRUFBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7UUFDaEMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsb0JBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRXBFLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUM7UUFDekMsSUFBQSxnQkFBTSxFQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzlCLElBQUEsZ0JBQU0sRUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QyxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLFNBQVMs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