"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const store_1 = require("../core/store");
const candles_processor_1 = require("../processors/candles.processor");
const mocks_1 = require("./mocks");
(0, globals_1.describe)("CandlesProcessor", () => {
    let store;
    let candlesProcessor;
    (0, globals_1.beforeAll)(() => {
        store = new store_1.Store();
        candlesProcessor = new candles_processor_1.CandlesProcessor(store);
    });
    (0, globals_1.it)("should be defined", () => {
        (0, globals_1.expect)(candles_processor_1.CandlesProcessor).toBeDefined();
    });
    (0, globals_1.it)("should process candles", () => {
        candlesProcessor.processSubscribed(mocks_1.CandlesMocks.SUBSCRIBED_MESSAGE);
        const candles = store.getState().candles;
        const marketCandles = candles["ETH-USD"];
        const resolutionCandles = marketCandles === null || marketCandles === void 0 ? void 0 : marketCandles["1MIN"];
        (0, globals_1.expect)(resolutionCandles).toBeDefined();
        (0, globals_1.expect)(marketCandles === null || marketCandles === void 0 ? void 0 : marketCandles["5MIN"]).toBeUndefined();
        (0, globals_1.expect)(resolutionCandles === null || resolutionCandles === void 0 ? void 0 : resolutionCandles.length).toBe(8);
        // Since the candles are in reverse chronological order, the processor
        // should have reversed them.
        const candle = resolutionCandles === null || resolutionCandles === void 0 ? void 0 : resolutionCandles[resolutionCandles.length - 1];
        if (!candle) {
            throw new Error("Candle is undefined");
        }
        (0, globals_1.expect)(candle.startedAtMilliseconds).toBe(1727275620000);
        (0, globals_1.expect)(candle.low).toBe(2632.6);
        (0, globals_1.expect)(candle.high).toBe(2632.6);
        (0, globals_1.expect)(candle.open).toBe(2632.6);
        (0, globals_1.expect)(candle.close).toBe(2632.6);
        (0, globals_1.expect)(candle.baseTokenVolume).toBe(0);
        (0, globals_1.expect)(candle.usdVolume).toBe(0);
    });
    (0, globals_1.it)("should process batch update", () => {
        candlesProcessor.processBatchUpdate(mocks_1.CandlesMocks.BATCH_UPDATE_MESSAGE);
        const candles = store.getState().candles;
        const marketCandles = candles["ETH-USD"];
        const resolutionCandles = marketCandles === null || marketCandles === void 0 ? void 0 : marketCandles["1MIN"];
        (0, globals_1.expect)(resolutionCandles).toBeDefined();
        // one new candle should have been added, one should have been updated
        (0, globals_1.expect)(resolutionCandles === null || resolutionCandles === void 0 ? void 0 : resolutionCandles.length).toBe(9);
        // the last candle should be the one that was added
        const candle = resolutionCandles === null || resolutionCandles === void 0 ? void 0 : resolutionCandles[resolutionCandles.length - 1];
        if (!candle) {
            throw new Error("Candle is undefined");
        }
        (0, globals_1.expect)(candle.startedAtMilliseconds).toBe(1727275680000);
        (0, globals_1.expect)(candle.low).toBe(2632.6);
        (0, globals_1.expect)(candle.high).toBe(2632.6);
        (0, globals_1.expect)(candle.open).toBe(2632.6);
        (0, globals_1.expect)(candle.close).toBe(2632.6);
        (0, globals_1.expect)(candle.baseTokenVolume).toBe(0);
        (0, globals_1.expect)(candle.usdVolume).toBe(0);
        // the second to last candle should be the one that was updated
        const candle2 = resolutionCandles[resolutionCandles.length - 2];
        if (!candle2) {
            throw new Error("Candle2 is undefined");
        }
        (0, globals_1.expect)(candle2.startedAtMilliseconds).toBe(1727275620000);
        (0, globals_1.expect)(candle2.low).toBe(263.6);
        (0, globals_1.expect)(candle2.high).toBe(263.6);
        (0, globals_1.expect)(candle2.open).toBe(263.6);
        (0, globals_1.expect)(candle2.close).toBe(263.6);
        (0, globals_1.expect)(candle2.baseTokenVolume).toBe(0);
        (0, globals_1.expect)(candle2.usdVolume).toBe(0);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuZGxlcy1wcm9jZXNzb3IudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9fX3Rlc3RzX18vY2FuZGxlcy1wcm9jZXNzb3IudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUFnRTtBQUNoRSx5Q0FBc0M7QUFDdEMsdUVBQW1FO0FBQ25FLG1DQUF1QztBQUV2QyxJQUFBLGtCQUFRLEVBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO0lBQ2hDLElBQUksS0FBWSxDQUFDO0lBQ2pCLElBQUksZ0JBQWtDLENBQUM7SUFFdkMsSUFBQSxtQkFBUyxFQUFDLEdBQUcsRUFBRTtRQUNiLEtBQUssR0FBRyxJQUFJLGFBQUssRUFBRSxDQUFDO1FBQ3BCLGdCQUFnQixHQUFHLElBQUksb0NBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLFlBQUUsRUFBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDM0IsSUFBQSxnQkFBTSxFQUFDLG9DQUFnQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDekMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLFlBQUUsRUFBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7UUFDaEMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsb0JBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRXBFLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUM7UUFDekMsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0saUJBQWlCLEdBQUcsYUFBYSxhQUFiLGFBQWEsdUJBQWIsYUFBYSxDQUFHLE1BQU0sQ0FBQyxDQUFDO1FBRWxELElBQUEsZ0JBQU0sRUFBQyxpQkFBaUIsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3hDLElBQUEsZ0JBQU0sRUFBQyxhQUFhLGFB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