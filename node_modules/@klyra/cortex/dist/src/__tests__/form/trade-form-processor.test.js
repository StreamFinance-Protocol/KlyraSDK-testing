"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const shared_1 = require("@klyra/shared");
const store_1 = require("../../core/store");
const trade_form_processor_1 = require("../../processors/forms/trade/trade-form.processor");
const accounts_1 = require("../../types/accounts");
const account_processor_1 = require("../../processors/account/account.processor");
const markets_processor_1 = require("../../processors/markets.processor");
const forms_1 = require("../../types/forms");
const orderbooks_processor_1 = require("../../processors/orderbooks.processor");
const mocks_1 = require("../mocks");
const ORDERBOOK_SUBSCRIBED_MESSAGE = {
    type: "subscribed",
    connection_id: "54480a41-95fe-4253-9b39-44a465690af2",
    message_id: 4,
    channel: "v4_orderbook",
    id: "BTC-USD",
    contents: {
        bids: [
            { price: "62613.6", size: "0.415" },
            { price: "62612.1", size: "0.415" },
            { price: "62606.6", size: "7.673" },
            { price: "62606.5", size: "15.346" },
            { price: "62606.4", size: "46.038" },
            { price: "62606", size: "2.301" },
            { price: "62605.9", size: "0.768" },
            { price: "62605.8", size: "99.775" },
            { price: "62605.7", size: "0.768" },
            { price: "62605.6", size: "8.444" },
        ],
        asks: [
            { price: "62629.9", size: "0.415" },
            { price: "62633.6", size: "0.415" },
            { price: "62637.9", size: "0.758" },
            { price: "62638.7", size: "0.758" },
            { price: "62638.8", size: "0.758" },
            { price: "62638.9", size: "0.758" },
            { price: "62639.1", size: "1.516" },
            { price: "62639.5", size: "3.032" },
            { price: "62639.7", size: "2.274" },
            { price: "62639.8", size: "0.758" },
        ],
    },
};
(0, globals_1.describe)("TradesProcessor", () => {
    let store;
    let tradeFormProcessor;
    let accountProcessor;
    let orderbookProcessor;
    (0, globals_1.beforeAll)(() => {
        store = new store_1.Store();
        tradeFormProcessor = new trade_form_processor_1.TradeFormProcessor(store);
        accountProcessor = new account_processor_1.AccountProcessor(store);
        orderbookProcessor = new orderbooks_processor_1.OrderbooksProcessor(store);
        // set market prices
        const marketsProcessor = new markets_processor_1.MarketsProcessor(store);
        marketsProcessor.processSubscribed(mocks_1.MarketsMocks.SUBSCRIBED_MESSAGE);
        accountProcessor.processSubscribed(mocks_1.AccountsMocks.SUBSCRIBED_MESSAGE);
        orderbookProcessor.processSubscribed(ORDERBOOK_SUBSCRIBED_MESSAGE);
    });
    (0, globals_1.beforeEach)(() => {
        tradeFormProcessor.resetForm();
        tradeFormProcessor.processInput("marketId", "BTC-USD");
        tradeFormProcessor.processInput("marginMode", accounts_1.MarginMode.CROSS);
    });
    (0, globals_1.test)("should be defined", () => {
        (0, globals_1.expect)(trade_form_processor_1.TradeFormProcessor).toBeDefined();
    });
    (0, globals_1.test)("should handle schema validation errors", () => {
        var _a;
        tradeFormProcessor.processInput("quoteSize", null);
        const formState = store.getState().forms.trade;
        (0, globals_1.expect)(Object.keys((_a = formState.errors) !== null && _a !== void 0 ? _a : {}).length).toBe(1);
    });
    (0, globals_1.test)("should update the form state", () => {
        var _a;
        tradeFormProcessor.processInput("quoteSize", 1);
        tradeFormProcessor.processInput("price", 0.1);
        const formState = store.getState().forms.trade;
        (0, globals_1.expect)(Object.keys((_a = formState.errors) !== null && _a !== void 0 ? _a : {}).length).toBe(0);
        const inputs = formState.inputs;
        (0, globals_1.expect)(inputs.price).toBe(0.1);
        (0, globals_1.expect)(inputs.quoteSize).toBe(1);
    });
    (0, globals_1.test)("should calculate the quote size", () => {
        tradeFormProcessor.processInput("baseSize", 0.1);
        tradeFormProcessor.processInput("price", 0.1);
        const formState = store.getState().forms.trade;
        const inputs = formState.inputs;
        (0, globals_1.expect)(inputs.quoteSize).toBe(1);
    });
    (0, globals_1.test)("should generate a summary for a sell order", () => {
        var _a;
        tradeFormProcessor.processInput("quoteSize", 1);
        tradeFormProcessor.processInput("price", 0.1);
        tradeFormProcessor.processInput("side", shared_1.OrderSide.SELL);
        const formState = store.getState().forms.trade;
        (0, globals_1.expect)(Object.keys((_a = formState.errors) !== null && _a !== void 0 ? _a : {}).length).toBe(0);
        const { summary } = formState;
        (0, globals_1.expect)(summary).not.toBeNull();
        (0, globals_1.expect)(summary === null || summary === void 0 ? void 0 : summary.price).toBe(0.1);
        (0, globals_1.expect)(summary === null || summary === void 0 ? void 0 : summary.total).toBe(-0.1);
        (0, globals_1.expect)(summary === null || summary === void 0 ? void 0 : summary.baseSize).toBe(0.1);
    });
    (0, globals_1.test)("should generate a summary for a buy order", () => {
        var _a;
        tradeFormProcessor.processInput("quoteSize", 1);
        tradeFormProcessor.processInput("price", 0.1);
        tradeFormProcessor.processInput("side", shared_1.OrderSide.BUY);
        const formState = store.getState().forms.trade;
        (0, globals_1.expect)(Object.keys((_a = formState.errors) !== null && _a !== void 0 ? _a : {}).length).toBe(0);
        const { summary } = formState;
        (0, globals_1.expect)(summary).not.toBeNull();
        (0, globals_1.expect)(summary === null || summary === void 0 ? void 0 : summary.price).toBe(0.1);
        (0, globals_1.expect)(summary === null || summary === void 0 ? void 0 : summary.total).toBe(0.1);
        (0, globals_1.expect)(summary === null || summary === void 0 ? void 0 : summary.baseSize).toBe(0.1);
    });
    // TODO: add tests for the other trade types (market, stop-limit, take-profit-limit, stop-market, take-profit-market)
    (0, globals_1.test)("should calculate the price for a buy market order", () => {
        var _a, _b, _c;
        tradeFormProcessor.processInput("type", forms_1.TradeFormType.MARKET);
        tradeFormProcessor.processInput("side", shared_1.OrderSide.BUY);
        tradeFormProcessor.processInput("baseSize", 100);
        const formState = store.getState().forms.trade;
        (0, globals_1.expect)(Object.keys((_a = formState.errors) !== null && _a !== void 0 ? _a : {}).length).toBe(0);
        const { summary } = formState;
        (0, globals_1.expect)(summary).not.toBeNull();
        // since the market order is buying, it should take the first ask price
        const firstAsk = (_b = store.getState().orderbooks["BTC-USD"]) === null || _b === void 0 ? void 0 : _b.asks[0];
        (0, globals_1.expect)(summary === null || summary === void 0 ? void 0 : summary.price).toBe(firstAsk === null || firstAsk === void 0 ? void 0 : firstAsk.price);
        (0, globals_1.expect)(summary === null || summary === void 0 ? void 0 : summary.total).toBe(100);
        // TODO: when we add custom slippage, we need to update this to check against the payloadPrice
        const slippage = 0.01;
        (0, globals_1.expect)(summary === null || summary === void 0 ? void 0 : summary.payloadPrice).toBe(((_c = summary === null || summary === void 0 ? void 0 : summary.price) !== null && _c !== void 0 ? _c : 0) * (1 + slippage));
    });
    (0, globals_1.test)("should calculate the price for a sell market order", () => {
        var _a, _b, _c;
        tradeFormProcessor.processInput("type", forms_1.TradeFormType.MARKET);
        tradeFormProcessor.processInput("side", shared_1.OrderSide.SELL);
        tradeFormProcessor.processInput("baseSize", 100);
        const formState = store.getState().forms.trade;
        (0, globals_1.expect)(Object.keys((_a = formState.errors) !== null && _a !== void 0 ? _a : {}).length).toBe(0);
        const { summary } = formState;
        (0, globals_1.expect)(summary).not.toBeNull();
        // since the market order is selling, it should take the first ask price
        const firstBid = (_b = store.getState().orderbooks["BTC-USD"]) === null || _b === void 0 ? void 0 : _b.bids[0];
        (0, globals_1.expect)(summary === null || summary === void 0 ? void 0 : summary.price).toBe(firstBid === null || firstBid === void 0 ? void 0 : firstBid.price);
        (0, globals_1.expect)(summary === null || summary === void 0 ? void 0 : summary.total).toBe(-100);
        // TODO: when we add custom slippage, we need to update this to check against the payloadPrice
        const slippage = 0.01;
        (0, globals_1.expect)(summary === null || summary === void 0 ? void 0 : summary.payloadPrice).toBe(((_c = summary === null || summary === void 0 ? void 0 : summary.price) !== null && _c !== void 0 ? _c : 0) * (1 - slippage));
    });
    (0, globals_1.test)("should calculate the options for a market order", () => {
        var _a;
        tradeFormProcessor.processInput("type", forms_1.TradeFormType.MARKET);
        const formState = store.getState().forms.trade;
        (0, globals_1.expect)(Object.keys((_a = formState.errors) !== null && _a !== void 0 ? _a : {}).length).toBe(0);
        const options = formState.options;
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsReduceOnly).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsExecution).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.executionOptions).toEqual([shared_1.OrderExecution.IOC]);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsGoodTilTime).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsPrice).toBe(false);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsTriggerPrice).toBe(false);
    });
    (0, globals_1.test)("should calculate the options for a Take Profit market order", () => {
        tradeFormProcessor.processInput("type", forms_1.TradeFormType.TAKE_PROFIT_MARKET);
        const formState = store.getState().forms.trade;
        const options = formState.options;
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsReduceOnly).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsExecution).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.executionOptions).toEqual([shared_1.OrderExecution.IOC]);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsGoodTilTime).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsPrice).toBe(false);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsTriggerPrice).toBe(true);
    });
    (0, globals_1.test)("should calculate the options for a limit order with GTT", () => {
        var _a;
        tradeFormProcessor.processInput("type", forms_1.TradeFormType.LIMIT);
        tradeFormProcessor.processInput("side", shared_1.OrderSide.SELL);
        tradeFormProcessor.processInput("baseSize", 100);
        tradeFormProcessor.processInput("timeInForce", shared_1.OrderTimeInForce.GTT);
        const formState = store.getState().forms.trade;
        (0, globals_1.expect)(Object.keys((_a = formState.errors) !== null && _a !== void 0 ? _a : {}).length).toBe(0);
        const options = formState.options;
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsPrice).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsTimeInForce).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsGoodTilTime).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsPostOnly).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsReduceOnly).toBe(false);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsTriggerPrice).toBe(false);
    });
    (0, globals_1.test)("should calculate the options for a limit order with IOC", () => {
        var _a;
        tradeFormProcessor.processInput("type", forms_1.TradeFormType.LIMIT);
        tradeFormProcessor.processInput("side", shared_1.OrderSide.SELL);
        tradeFormProcessor.processInput("baseSize", 100);
        tradeFormProcessor.processInput("timeInForce", shared_1.OrderTimeInForce.IOC);
        const formState = store.getState().forms.trade;
        (0, globals_1.expect)(Object.keys((_a = formState.errors) !== null && _a !== void 0 ? _a : {}).length).toBe(0);
        const options = formState.options;
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsPrice).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsTimeInForce).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsGoodTilTime).toBe(false);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsPostOnly).toBe(false);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsReduceOnly).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsTriggerPrice).toBe(false);
    });
    (0, globals_1.test)("should calculate the options for a Take Profit limit order with default execution", () => {
        tradeFormProcessor.processInput("type", forms_1.TradeFormType.TAKE_PROFIT_LIMIT);
        tradeFormProcessor.processInput("execution", shared_1.OrderExecution.DEFAULT);
        const formState = store.getState().forms.trade;
        const options = formState.options;
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsReduceOnly).toBe(false);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsExecution).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.executionOptions).toEqual([
            shared_1.OrderExecution.DEFAULT,
            shared_1.OrderExecution.IOC,
            shared_1.OrderExecution.POST_ONLY,
        ]);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsGoodTilTime).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsPrice).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsTriggerPrice).toBe(true);
    });
    (0, globals_1.test)("should calculate the options for a Take Profit limit order with IOC", () => {
        tradeFormProcessor.processInput("type", forms_1.TradeFormType.TAKE_PROFIT_LIMIT);
        tradeFormProcessor.processInput("execution", shared_1.OrderExecution.IOC);
        const formState = store.getState().forms.trade;
        const options = formState.options;
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsReduceOnly).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsExecution).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.executionOptions).toEqual([
            shared_1.OrderExecution.DEFAULT,
            shared_1.OrderExecution.IOC,
            shared_1.OrderExecution.POST_ONLY,
        ]);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsGoodTilTime).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsPrice).toBe(true);
        (0, globals_1.expect)(options === null || options === void 0 ? void 0 : options.needsTriggerPrice).toBe(true);
    });
    // test("should calculate the price for a sell market order that takes more than one order from the orderbook", () => {
    //   tradeFormProcessor.processInput("type", TradeFormType.MARKET);
    //   tradeFormProcessor.processInput("side", OrderSide.SELL);
    //   tradeFormProcessor.processInput("quoteSize", 1000);
    //   const formState = store.getState().forms["trade"];
    //   expect(Object.keys(formState.errors ??{}).length).toBe(0);
    //   const { summary } = formState;
    //   expect(summary).not.toBeNull();
    //   // since the market order is selling, it should take the first ask price
    //   const firstBid = store.getState().orderbooks["BTC-USD"].bids[0];
    //   expect(summary?.price).toBe(firstBid.price);
    //   expect(summary?.total).toBe(-100);
    //   // TODO: when we add custom slippage, we need to update this to check against the payloadPrice
    //   const slippage = 0.01;
    //   expect(summary?.payloadPrice).toBe(summary?.price * (1 - slippage));
    // });
});
//# sourceMappingURL=data:application/json;base64,