import type { OrderSide, OrderTimeInForce, OrderExecution } from "@klyra/shared";
import type { MarginMode } from "./accounts";
export declare enum FormType {
    TRADE = "trade",
    DEPOSIT = "deposit",
    WITHDRAW = "withdraw",
    TRANSFER = "transfer",
    CLOSE_POSITION = "close_position"
}
export interface BaseForm<TInputs, TSummary, TOptions> {
    inputs: TInputs;
    postResults: Record<string, unknown> | null;
    errors: Record<string, string> | null;
    summary: TSummary | null;
    options: TOptions | null;
}
export declare enum TradeFormType {
    MARKET = "MARKET",
    LIMIT = "LIMIT",
    STOP_LIMIT = "STOP_LIMIT",
    TAKE_PROFIT_LIMIT = "TAKE_PROFIT_LIMIT",
    STOP_MARKET = "STOP_MARKET",
    TAKE_PROFIT_MARKET = "TAKE_PROFIT_MARKET"
}
interface CommonTradeFormInputs {
    type: TradeFormType;
    marketId: string;
    side: OrderSide;
    marginMode: MarginMode;
    leverage?: number;
    baseSize: number;
    quoteSize: number;
    timeInForce?: OrderTimeInForce;
    execution?: OrderExecution;
    goodTilTime?: number;
    reduceOnly?: boolean;
    internal?: InternalTradeState;
}
interface InternalTradeState {
    price?: number;
    filled?: boolean;
    worstPrice?: number;
}
export interface MarketTradeInputs extends CommonTradeFormInputs {
    type: TradeFormType.MARKET;
}
export interface LimitTradeInputs extends CommonTradeFormInputs {
    type: TradeFormType.LIMIT;
    price: number;
}
export interface StopLimitTradeInputs extends CommonTradeFormInputs {
    type: TradeFormType.STOP_LIMIT;
    price: number;
    triggerPrice: number;
}
export interface TakeProfitLimitTradeInputs extends CommonTradeFormInputs {
    type: TradeFormType.TAKE_PROFIT_LIMIT;
    price: number;
    triggerPrice: number;
}
export interface StopMarketTradeInputs extends CommonTradeFormInputs {
    type: TradeFormType.STOP_MARKET;
    triggerPrice: number;
}
export interface TakeProfitMarketTradeInputs extends CommonTradeFormInputs {
    type: TradeFormType.TAKE_PROFIT_MARKET;
    triggerPrice: number;
}
export type TradeFormInputsUnion = MarketTradeInputs | LimitTradeInputs | StopLimitTradeInputs | TakeProfitLimitTradeInputs | StopMarketTradeInputs | TakeProfitMarketTradeInputs;
export type TradeForm = BaseForm<TradeFormInputsUnion, TradeFormSummary, TradeFormOptions>;
export type TradeFormInputs = TradeForm["inputs"];
export type TradeFormInputsKeys = keyof MarketTradeInputs | keyof LimitTradeInputs | keyof StopLimitTradeInputs | keyof TakeProfitLimitTradeInputs | keyof StopMarketTradeInputs | keyof TakeProfitMarketTradeInputs;
type MarketTradeFormInputsUnion = MarketTradeInputs | TakeProfitMarketTradeInputs | StopMarketTradeInputs;
type LimitTradeFormInputsUnion = LimitTradeInputs | StopLimitTradeInputs | TakeProfitLimitTradeInputs;
export type MarketTradeForm = BaseForm<MarketTradeFormInputsUnion, TradeFormSummary, TradeFormOptions>;
export type MarketTradeFormInputs = MarketTradeForm["inputs"];
export type LimitTradeForm = BaseForm<LimitTradeFormInputsUnion, TradeFormSummary, TradeFormOptions>;
export type LimitTradeFormInputs = LimitTradeForm["inputs"];
export interface TradeFormOptions {
    needsPrice?: boolean;
    needsTriggerPrice?: boolean;
    needsPostOnly?: boolean;
    needsReduceOnly?: boolean;
    needsTimeInForce?: boolean;
    timeInForceOptions?: OrderTimeInForce[];
    needsGoodTilTime?: boolean;
    needsExecution?: boolean;
    executionOptions?: OrderExecution[];
    needsMarginMode?: boolean;
}
export interface TradeFormSummary {
    price: number | null;
    payloadPrice: number | null;
    baseSize: number | null;
    quoteSize: number | null;
    fee: number | null;
    feeRate: number | null;
    total: number | null;
    filled: boolean | null;
    positionMargin: number | null;
    indexSlippage?: number | null;
}
export interface DepositInputs {
    assetId: string;
    amount: number;
}
export type DepositForm = BaseForm<DepositInputs, null, null>;
export interface WithdrawInputs {
    assetId: string;
    amount: number;
}
export type WithdrawForm = BaseForm<WithdrawInputs, null, null>;
export interface TransferInputs {
    assetId: string;
    amount: number;
}
export type TransferForm = BaseForm<TransferInputs, null, null>;
export interface ClosePositionInputs {
    assetId: string;
    amount: number;
}
export type ClosePositionForm = BaseForm<ClosePositionInputs, null, null>;
export type AllFormTypes = TradeForm | DepositForm | WithdrawForm | TransferForm | ClosePositionForm;
export {};
