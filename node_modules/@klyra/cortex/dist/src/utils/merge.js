"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.merge = merge;
exports.transform = transform;
function merge(source, target) {
    return { ...source, ...target };
}
function transform(existing, input, keymap) {
    const output = existing ? { ...existing } : {};
    if (input) {
        for (const [type, map] of Object.entries(keymap)) {
            for (const [key, target] of Object.entries(map)) {
                const value = getValue(input, key, type);
                if (value !== undefined) {
                    output[target] = value;
                }
            }
        }
    }
    return output;
}
function getValue(input, key, type) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- We use any to allow for any type of value
    const value = input[key];
    if (value === undefined)
        return undefined;
    switch (type) {
        case "number":
            return Number(value);
        case "string":
            return String(value);
        case "boolean":
            return Boolean(value);
        case "datetime":
            return new Date(String(value)).getTime();
        default:
            return value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvbWVyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQkFFQztBQU9ELDhCQW1CQztBQTVCRCxTQUFnQixLQUFLLENBQUksTUFBUyxFQUFFLE1BQWM7SUFDaEQsT0FBTyxFQUFFLEdBQUcsTUFBTSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFDbEMsQ0FBQztBQU9ELFNBQWdCLFNBQVMsQ0FDdkIsUUFBdUIsRUFDdkIsS0FBc0MsRUFDdEMsTUFBc0Q7SUFFdEQsTUFBTSxNQUFNLEdBQU0sUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFFLEVBQVEsQ0FBQztJQUV6RCxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ1YsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUNqRCxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUNoRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDekMsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFLENBQUM7b0JBQ3hCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUF5QixDQUFDO2dCQUM3QyxDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUNmLEtBQTBCLEVBQzFCLEdBQVcsRUFDWCxJQUFZO0lBRVosZ0hBQWdIO0lBQ2hILE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixJQUFJLEtBQUssS0FBSyxTQUFTO1FBQUUsT0FBTyxTQUFTLENBQUM7SUFFMUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztRQUNiLEtBQUssUUFBUTtZQUNYLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssUUFBUTtZQUNYLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssU0FBUztZQUNaLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLEtBQUssVUFBVTtZQUNiLE9BQU8sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDM0M7WUFDRSxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0FBQ0gsQ0FBQyJ9