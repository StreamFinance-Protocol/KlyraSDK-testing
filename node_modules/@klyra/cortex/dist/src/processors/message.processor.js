"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageProcessor = void 0;
const shared_1 = require("@klyra/shared");
const markets_processor_1 = require("./markets.processor");
const trades_processor_1 = require("./trades.processor");
const orderbooks_processor_1 = require("./orderbooks.processor");
const candles_processor_1 = require("./candles.processor");
const account_processor_1 = require("./account/account.processor");
class MessageProcessor {
    constructor(store) {
        this.accountProcessor = new account_processor_1.AccountProcessor(store);
        this.marketsProcessor = new markets_processor_1.MarketsProcessor(store);
        this.tradesProcessor = new trades_processor_1.TradesProcessor(store);
        this.orderbooksProcessor = new orderbooks_processor_1.OrderbooksProcessor(store);
        this.candlesProcessor = new candles_processor_1.CandlesProcessor(store);
    }
    process(message) {
        if (message.channel.length === 0)
            return;
        switch (message.channel) {
            case shared_1.MessageChannel.MARKETS:
                this.processMarketUpdate(message);
                break;
            case shared_1.MessageChannel.TRADES:
                this.processTradeUpdate(message);
                break;
            case shared_1.MessageChannel.ORDERBOOK:
                this.processOrderbookUpdate(message);
                break;
            case shared_1.MessageChannel.CANDLES:
                this.processCandleUpdate(message);
                break;
            case shared_1.MessageChannel.PARENT_SUBACCOUNTS:
                this.processAccountUpdate(message);
                break;
            default:
                throw new Error(`Unsupported message channel: ${message.channel}`);
        }
    }
    processMarketUpdate(msg) {
        if (msg.type === shared_1.MessageType.CHANNEL_BATCH_DATA) {
            this.marketsProcessor.processBatchUpdate(msg);
        }
        else if (msg.type === shared_1.MessageType.SUBSCRIBED) {
            this.marketsProcessor.processSubscribed(msg);
        }
    }
    processTradeUpdate(msg) {
        if (msg.type === shared_1.MessageType.CHANNEL_BATCH_DATA) {
            this.tradesProcessor.processBatchUpdate(msg);
        }
        else if (msg.type === shared_1.MessageType.SUBSCRIBED) {
            this.tradesProcessor.processSubscribed(msg);
        }
        return {};
    }
    processOrderbookUpdate(msg) {
        if (msg.type === shared_1.MessageType.CHANNEL_BATCH_DATA) {
            this.orderbooksProcessor.processBatchUpdate(msg);
        }
        else if (msg.type === shared_1.MessageType.SUBSCRIBED) {
            this.orderbooksProcessor.processSubscribed(msg);
        }
        return {};
    }
    processAccountUpdate(msg) {
        if (msg.type === shared_1.MessageType.CHANNEL_BATCH_DATA) {
            this.accountProcessor.processBatchUpdate(msg);
        }
        else if (msg.type === shared_1.MessageType.SUBSCRIBED) {
            this.accountProcessor.processSubscribed(msg);
        }
        return {};
    }
    processCandleUpdate(msg) {
        if (msg.type === shared_1.MessageType.CHANNEL_BATCH_DATA) {
            this.candlesProcessor.processBatchUpdate(msg);
        }
        else if (msg.type === shared_1.MessageType.SUBSCRIBED) {
            this.candlesProcessor.processSubscribed(msg);
        }
        return {};
    }
}
exports.MessageProcessor = MessageProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvY2Vzc29ycy9tZXNzYWdlLnByb2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwQ0FjdUI7QUFHdkIsMkRBQXVEO0FBQ3ZELHlEQUFxRDtBQUNyRCxpRUFBNkQ7QUFDN0QsMkRBQXVEO0FBQ3ZELG1FQUErRDtBQUUvRCxNQUFhLGdCQUFnQjtJQU8zQixZQUFZLEtBQVk7UUFDdEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksb0NBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksb0NBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGtDQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksMENBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksb0NBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFrQztRQUN4QyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUM7WUFBRSxPQUFPO1FBRXpDLFFBQVEsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3hCLEtBQUssdUJBQWMsQ0FBQyxPQUFPO2dCQUN6QixJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ2xDLE1BQU07WUFDUixLQUFLLHVCQUFjLENBQUMsTUFBTTtnQkFDeEIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNqQyxNQUFNO1lBQ1IsS0FBSyx1QkFBYyxDQUFDLFNBQVM7Z0JBQzNCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFP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