"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandlesProcessor = void 0;
const merge_1 = require("../utils/merge");
class CandlesProcessor {
    constructor(store) {
        this.store = store;
    }
    processSubscribed(msg) {
        const { marketId, resolution } = this.getMarketAndResolution(msg.id);
        const payload = msg.contents.candles;
        const modified = payload.reverse().map(this.processCandle.bind(this));
        this.updateCandles(marketId, resolution, modified);
    }
    // Even though this is a batch update, we only want to update the last candle
    // because the indexer will send the latest candle for a given resolution
    // and time period.
    processBatchUpdate(msg) {
        var _a, _b, _c, _d;
        const { marketId, resolution } = this.getMarketAndResolution(msg.id);
        const existingCandles = this.store.getState().candles;
        const payload = msg.contents;
        const newCandlesArray = (_b = (_a = existingCandles[marketId]) === null || _a === void 0 ? void 0 : _a[resolution]) !== null && _b !== void 0 ? _b : [];
        const lastExistingCandle = (_c = newCandlesArray[newCandlesArray.length - 1]) !== null && _c !== void 0 ? _c : null;
        const lastExistingCandleTimestamp = (_d = lastExistingCandle === null || lastExistingCandle === void 0 ? void 0 : lastExistingCandle.startedAtMilliseconds) !== null && _d !== void 0 ? _d : 0;
        for (const candle of payload) {
            const newCandle = this.processCandle(candle);
            const newCandleTimestamp = newCandle.startedAtMilliseconds;
            if (newCandleTimestamp === lastExistingCandleTimestamp) {
                newCandlesArray.pop();
            }
            newCandlesArray.push(newCandle);
        }
        this.updateCandles(marketId, resolution, newCandlesArray);
    }
    getMarketAndResolution(id) {
        if (!id)
            throw new Error("No id provided");
        const [marketId, resolution] = id.split("/");
        const resolutionEnum = resolution;
        return { marketId: marketId, resolution: resolutionEnum };
    }
    processCandle(payload) {
        return (0, merge_1.transform)(undefined, payload, {
            number: {
                low: "low",
                high: "high",
                open: "open",
                close: "close",
                baseTokenVolume: "baseTokenVolume",
                usdVolume: "usdVolume",
                trades: "trades",
            },
            datetime: {
                startedAt: "startedAtMilliseconds",
                updatedAt: "updatedAtMilliseconds",
            },
        });
    }
    updateCandles(marketId, resolution, candles) {
        const existingCandles = this.store.getState().candles;
        this.store.setState({
            candles: {
                ...existingCandles,
                [marketId]: {
                    ...existingCandles[marketId],
                    [resolution]: candles,
                },
            },
        });
    }
}
exports.CandlesProcessor = CandlesProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuZGxlcy5wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvY2Vzc29ycy9jYW5kbGVzLnByb2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQSwwQ0FBMkM7QUFJM0MsTUFBYSxnQkFBZ0I7SUFHM0IsWUFBWSxLQUFZO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFTSxpQkFBaUIsQ0FBQyxHQUFvQztRQUMzRCxNQUFNLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFckUsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFFckMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXRFLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsNkVBQTZFO0lBQzdFLHlFQUF5RTtJQUN6RSxtQkFBbUI7SUFDWixrQkFBa0IsQ0FBQyxHQUFxQzs7UUFDN0QsTUFBTSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDO1FBQ3RELE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFFN0IsTUFBTSxlQUFlLEdBQUcsTUFBQSxNQUFBLGVBQWUsQ0FBQyxRQUFRLENBQUMsMENBQUcsVUFBVSxDQUFDLG1DQUFJLEVBQUUsQ0FBQztRQUV0RSxNQUFNLGtCQUFrQixHQUN0QixNQUFBLGVBQWUsQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxtQ0FBSSxJQUFJLENBQUM7UUFDdEQsTUFBTSwyQkFBMkIsR0FDL0IsTUFBQSxrQkFBa0IsYUFBbEIsa0JBQWtCLHVCQUFsQixrQkFBa0IsQ0FBRSxxQkFBcUIsbUNBQUksQ0FBQyxDQUFDO1FBQ2pELEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFLENBQUM7WUFDN0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3QyxNQUFNLGtCQUFrQixHQUFHLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQztZQUUzRCxJQUFJLGtCQUFrQixLQUFLLDJCQUEyQixFQUFFLENBQUM7Z0JBQ3ZELGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN4QixDQUFDO1lBRUQsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxFQUFzQjtRQUluRCxJQUFJLENBQUMsRUFBRTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUUzQyxNQUFNLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0MsTUFBTSxjQUFjLEdBQUcsVUFBcUMsQ0FBQztRQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVMsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLENBQUM7SUFDN0QsQ0FBQztJQUVPLGFBQWEsQ0FBQyxPQUE4QjtRQUNsRCxPQUFPLElBQUEsaUJBQVMsRUFBZSxTQUFTLEVBQUUsT0FBTyxFQUFFO1lBQ2pELE1BQU0sRUFBRTtnQkFDTixHQUFHLEVBQUUsS0FBSztnQkFDVixJQUFJLEVBQUUsTUFBTTtnQkFDWixJQUFJLEVBQUUsTUFBTTtnQkFDWixLQUFLLEVBQUUsT0FBTztnQkFDZCxlQUFlLEVBQUUsaUJBQWlCO2dCQUNsQyxTQUFTLEVBQUUsV0FBVztnQkFDdEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRCxRQUFRLEVBQUU7Z0JBQ1IsU0FBUyxFQUFFLHVCQUF1QjtnQkFDbEMsU0FBUyxFQUFFLHVCQUF1QjthQUNuQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxhQUFhLENBQ25CLFFBQWdCLEVBQ2hCLFVBQWtCLEVBQ2xCLE9BQXVCO1FBRXZCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDO1FBQ3RELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQ2xCLE9BQU8sRUFBRTtnQkFDUCxHQUFHLGVBQWU7Z0JBQ2xCLENBQUMsUUFBUSxDQUFDLEVBQUU7b0JBQ1YsR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDO29CQUM1QixDQUFDLFVBQVUsQ0FBQyxFQUFFLE9BQU87aUJBQ3RCO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUExRkQsNENBMEZDIn0=