"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerpetualPositionsProcessor = void 0;
const shared_1 = require("@klyra/shared");
const accounts_1 = require("../../types/accounts");
const market_id_1 = require("../../utils/market-id");
const indexer_conversion_1 = require("../../utils/indexer-conversion");
class PerpetualPositionsProcessor {
    constructor(store) {
        this.store = store;
    }
    process(existing, payload) {
        var _a;
        if (!payload)
            return existing;
        const result = {};
        for (const [market, value] of Object.entries(payload)) {
            const existingPosition = (_a = existing[market]) !== null && _a !== void 0 ? _a : {};
            const newPosition = this.processPerpetualPosition(existingPosition, value);
            if (newPosition) {
                result[market] = newPosition;
            }
            else {
                // delete the key
                const { [market]: _, ...rest } = result;
                return rest;
            }
        }
        return result !== existing ? result : existing;
    }
    processChanges(existing, payload) {
        var _a;
        if (!payload)
            return existing;
        const result = existing;
        for (const item of payload) {
            if (item.market) {
                const newPosition = this.processPerpetualPosition((_a = existing[item.market]) !== null && _a !== void 0 ? _a : {}, 
                // TODO: find a better way to convert the payload (or don't convert at all and improve the processPerpetualPosition method)
                this.convertPerpetualPosition(item));
                if (newPosition) {
                    result[item.market] = newPosition;
                }
                else {
                    // delete the key
                    const { [item.market]: _, ...rest } = result;
                    return rest;
                }
            }
        }
        return result !== existing ? result : existing;
    }
    processPerpetualPosition(existing, payload) {
        var _a;
        if (payload.status === shared_1.IndexerPerpetualPositionStatus.CLOSED) {
            return null;
        }
        const modified = { ...existing };
        const marketId = payload.market;
        const status = payload.status;
        const entryPrice = Number(payload.entryPrice);
        const size = Number(payload.size);
        const isOpen = status === shared_1.IndexerPerpetualPositionStatus.OPEN;
        if (size && payload.status in shared_1.IndexerPerpetualPositionStatus) {
            const realizedPnl = Number(payload.realizedPnl);
            if (typeof realizedPnl === "number") {
                if (isOpen) {
                    // if the position is not closed, we need to calculate the realized PNL percent
                    if (entryPrice) {
                        const positionEntryValue = Math.abs(entryPrice * size);
                        const realizedPnlPercent = Math.abs(realizedPnl / positionEntryValue);
                        modified.realizedPnlPercent =
                            realizedPnlPercent > 0 ? realizedPnlPercent : null;
                    }
                }
                else {
                    modified.realizedPnlPercent = null;
                }
            }
            else {
                modified.realizedPnlPercent = null;
            }
        }
        const storeMarket = this.store.getState().markets[marketId];
        const marketSpotPrice = storeMarket === null || storeMarket === void 0 ? void 0 : storeMarket.spotPrice;
        if (marketSpotPrice) {
            if (isOpen) {
                const valueTotal = marketSpotPrice * size;
                const notional = Math.abs(valueTotal);
                const adjustedImf = storeMarket.configs.effectiveInitialMarginFraction || 0;
                const adjustedMmf = storeMarket.configs.maintenanceMarginFraction || 0;
                const maxLeverage = adjustedImf !== 0 ? 1 / adjustedImf : null;
                const initialRiskTotal = notional * adjustedImf;
                if (entryPrice) {
                    const entryValue = size * entryPrice;
                    const currentValue = size * marketSpotPrice;
                    const unrealizedPnl = currentValue - entryValue;
                    const unrealizedPnlPercent = entryValue !== 0 ? unrealizedPnl / Math.abs(entryValue) : null;
                    modified.unrealizedPnl = unrealizedPnl;
                    modified.unrealizedPnlPercent = unrealizedPnlPercent;
                }
                const marginMode = (_a = existing.marginMode) !== null && _a !== void 0 ? _a : (0, indexer_conversion_1.getMarginModeFromSubaccount)(payload.subaccountNumber);
                let marginValue = null;
                if (marginMode === accounts_1.MarginMode.CROSS) {
                    const maintenanceMargin = storeMarket.configs.maintenanceMarginFraction || 0;
                    marginValue = maintenanceMargin * notional;
                    modified.marginValue = marginValue;
                }
                else {
                    const subaccount = this.store.getState().user.account.subaccounts[payload.subaccountNumber];
                    const equity = Number(subaccount === null || subaccount === void 0 ? void 0 : subaccount.equity);
                    marginValue = equity;
                }
                modified.valueTotal = valueTotal;
                modified.notionalTotal = notional;
                modified.adjustedImf = adjustedImf;
                modified.adjustedMmf = adjustedMmf;
                modified.initialRiskTotal = initialRiskTotal;
                modified.maxLeverage = maxLeverage;
                modified.marginValue = marginValue;
            }
            else {
                modified.valueTotal = null;
                modified.notionalTotal = null;
                modified.adjustedImf = null;
                modified.adjustedMmf = null;
                modified.initialRiskTotal = null;
                modified.maxLeverage = null;
                modified.unrealizedPnl = null;
                modified.unrealizedPnlPercent = null;
                modified.marginValue = null;
            }
        }
        else {
            modified.realizedPnlPercent = null;
            modified.unrealizedPnl = null;
            modified.unrealizedPnlPercent = null;
            modified.valueTotal = null;
            modified.notionalTotal = null;
            modified.adjustedImf = null;
            modified.adjustedMmf = null;
            modified.initialRiskTotal = null;
            modified.maxLeverage = null;
            modified.marginValue = null;
        }
        const side = (0, indexer_conversion_1.convertIndexerPositionSide)(payload.side);
        const assetId = (0, market_id_1.getAssetIdFromMarketId)(marketId);
        const transformed = {
            ...existing,
            ...modified,
            id: payload.market,
            assetId: assetId !== null && assetId !== void 0 ? assetId : "",
            size: Number(payload.size),
            side,
            entryPrice,
            createdAtMilliseconds: payload.createdAt
                ? new Date(payload.createdAt).getTime()
                : undefined,
            exitPrice: payload.exitPrice ? Number(payload.exitPrice) : undefined,
        };
        return transformed;
    }
    convertPerpetualPosition(payload) {
        return {
            ...payload,
            createdAt: "",
            createdAtHeight: "",
        };
    }
}
exports.PerpetualPositionsProcessor = PerpetualPositionsProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVycGV0dWFsLXBvc2l0aW9ucy5wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcHJvY2Vzc29ycy9hY2NvdW50L3BlcnBldHVhbC1wb3NpdGlvbnMucHJvY2Vzc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBDQUl1QjtBQUV2QixtREFBMkU7QUFDM0UscURBQStEO0FBQy9ELHVFQUd3QztBQUV4QyxNQUFhLDJCQUEyQjtJQUd0QyxZQUFZLEtBQVk7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVNLE9BQU8sQ0FDWixRQUE0QyxFQUM1QyxPQUVhOztRQUViLElBQUksQ0FBQyxPQUFPO1lBQUUsT0FBTyxRQUFRLENBQUM7UUFFOUIsTUFBTSxNQUFNLEdBQXVDLEVBQUUsQ0FBQztRQUV0RCxLQUFLLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ3RELE1BQU0sZ0JBQWdCLEdBQUcsTUFBQSxRQUFRLENBQUMsTUFBTSxDQUFDLG1DQUFLLEVBQXlCLENBQUM7WUFDeEUsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUMvQyxnQkFBZ0IsRUFDaEIsS0FBSyxDQUNOLENBQUM7WUFDRixJQUFJLFdBQVcsRUFBRSxDQUFDO2dCQUNoQixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDO1lBQy9CLENBQUM7aUJBQU0sQ0FBQztnQkFDTixpQkFBaUI7Z0JBQ2pCLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQztnQkFDeEMsT0FBTyxJQUFJLENBQUM7WUFDZCxDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMs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