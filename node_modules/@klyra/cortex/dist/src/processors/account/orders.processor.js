"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrdersProcessor = void 0;
const shared_1 = require("@klyra/shared");
const market_id_1 = require("../../utils/market-id");
const indexer_conversion_1 = require("../../utils/indexer-conversion");
const order_status_1 = require("../../utils/order-status");
class OrdersProcessor {
    constructor(store) {
        this.store = store;
    }
    process(subaccountOrders, payload, subaccountNumber) {
        if (!payload)
            return [];
        const newOrders = payload
            .map((item) => {
            var _a;
            const id = item.id || item.clientId;
            return this.processOrder((_a = subaccountOrders.find((order) => order.id === id)) !== null && _a !== void 0 ? _a : null, item, subaccountNumber);
        })
            .filter((order) => order !== null);
        return newOrders;
    }
    processOrder(existing, payload, subaccountNumber) {
        var _a, _b, _c;
        if (!this.shouldUpdate(existing, payload)) {
            return existing;
        }
        const id = payload.id;
        if (!id)
            return null;
        const type = (0, indexer_conversion_1.convertIndexerOrderType)(payload.type);
        const side = (0, indexer_conversion_1.convertIndexerOrderSide)(payload.side);
        const status = (0, indexer_conversion_1.convertIndexerOrderStatus)(payload.status);
        const marketId = payload.ticker;
        const price = Number(payload.price);
        const size = Number(payload.size);
        if (!marketId || !price || !size) {
            return null;
        }
        const orderFlags = Number(payload.orderFlags);
        const cancelReason = payload.removalReason;
        const totalFilled = Number(payload.totalFilled) || 0;
        const remainingSize = size - totalFilled;
        const updatedAtMilliseconds = payload.updatedAt
            ? new Date(payload.updatedAt).getTime()
            : undefined;
        let modifiedStatus = status;
        if (totalFilled !== 0 && remainingSize !== 0) {
            if (status.value === shared_1.OrderStatusEnum.OPEN) {
                modifiedStatus = (0, order_status_1.getOrderStatusFromEnum)(shared_1.OrderStatusEnum.PARTIALLY_FILLED);
            }
            else if (status.value === shared_1.OrderStatusEnum.CANCELLED) {
                modifiedStatus = (0, order_status_1.getOrderStatusFromEnum)(shared_1.OrderStatusEnum.PARTIALLY_CANCELLED);
            }
        }
        if (orderFlags) {
            const isShortTermOrder = orderFlags === 0;
            const isBestEffortCancelled = modifiedStatus.value === shared_1.OrderStatusEnum.CANCELLING;
            // TODO: add types to the cancel reason
            const isUserCancelled = cancelReason === "USER_CANCELLED" ||
                cancelReason === "ORDER_REMOVAL_REASON_USER_CANCELLED";
            if (isShortTermOrder && isBestEffortCancelled && !isUserCancelled) {
                modifiedStatus = (0, order_status_1.getOrderStatusFromEnum)(shared_1.OrderStatusEnum.PENDING);
            }
        }
        const marginMode = (0, indexer_conversion_1.getMarginModeFromSubaccount)(subaccountNumber);
        const assetId = (0, market_id_1.getAssetIdFromMarketId)(marketId);
        const order = {
            subaccountNumber,
            id,
            assetId,
            clientId: Number(payload.clientId),
            type,
            side,
            status: modifiedStatus,
            timeInForce: (_a = (0, indexer_conversion_1.convertIndexerTimeInForce)(payload.timeInForce)) !== null && _a !== void 0 ? _a : undefined,
            marketId,
            clobPairId: Number(payload.clobPairId),
            price,
            size,
            triggerPrice: Number(payload.triggerPrice),
            trailingPercent: undefined,
            remainingSize,
            totalFilled,
            goodTilBlock: Number(payload.goodTilBlock),
            goodTilBlockTime: Math.floor(new Date((_b = payload.goodTilBlockTime) !== null && _b !== void 0 ? _b : 0).getTime() / 1000), // in seconds
            createdAtHeight: Number(payload.createdAtHeight),
            createdAtMilliseconds: undefined,
            unfillableAtMilliseconds: undefined,
            expiresAtMilliseconds: new Date((_c = payload.goodTilBlockTime) !== null && _c !== void 0 ? _c : 0).getTime(),
            updatedAtMilliseconds,
            postOnly: Boolean(payload.postOnly),
            reduceOnly: Boolean(payload.reduceOnly),
            cancelReason,
            marginMode,
        };
        return order;
    }
    shouldUpdate(existing, payload) {
        var _a, _b;
        const existingDate = (_a = existing === null || existing === void 0 ? void 0 : existing.updatedAtMilliseconds) !== null && _a !== void 0 ? _a : existing === null || existing === void 0 ? void 0 : existing.createdAtMilliseconds;
        const updatedAt = existingDate ? new Date(existingDate) : undefined;
        const incomingUpdatedAt = payload.updatedAt
            ? new Date(payload.updatedAt)
            : undefined;
        if (updatedAt) {
            if (incomingUpdatedAt) {
                if (updatedAt < incomingUpdatedAt) {
                    return true;
                }
                else if (updatedAt > incomingUpdatedAt) {
                    return false;
                }
            }
        }
        else if (incomingUpdatedAt) {
            return true;
        }
        const filled = (_b = existing === null || existing === void 0 ? void 0 : existing.totalFilled) !== null && _b !== void 0 ? _b : 0;
        const incomingFilled = Number(payload.totalFilled);
        if (incomingFilled > filled) {
            return true;
        }
        else if (incomingFilled < filled) {
            return false;
        }
        // If the existing order is cancelling, we need to check if the incoming order is filled, canceled, or best effort canceled
        const finalStatuses = [
            shared_1.IndexerOrderStatus.FILLED,
            shared_1.IndexerOrderStatus.CANCELED,
            shared_1.IndexerOrderStatus.BEST_EFFORT_CANCELED,
        ];
        if ((existing === null || existing === void 0 ? void 0 : existing.status.value) === shared_1.OrderStatusEnum.CANCELLING) {
            return finalStatuses.includes(payload.status);
        }
        return (existing === null || existing === void 0 ? void 0 : existing.status.isFinalized) === false;
    }
}
exports.OrdersProcessor = OrdersProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXJzLnByb2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm9jZXNzb3JzL2FjY291bnQvb3JkZXJzLnByb2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwQ0FJdUI7QUFHdkIscURBQStEO0FBQy9ELHVFQU13QztBQUN4QywyREFBa0U7QUFFbEUsTUFBYSxlQUFlO0lBRzFCLFlBQVksS0FBWTtRQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0lBRU0sT0FBTyxDQUNaLGdCQUFtQyxFQUNuQyxPQUE2QyxFQUM3QyxnQkFBd0I7UUFFeEIsSUFBSSxDQUFDLE9BQU87WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUV4QixNQUFNLFNBQVMsR0FBRyxPQUFPO2FBQ3RCLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFOztZQUNaLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNwQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQ3RCLE1BQUEsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxtQ0FBSSxJQUFJLEVBQ3pELElBQUksRUFDSixnQkFBZ0IsQ0FDakIsQ0FBQztRQUNKLENBQUMsQ0FBQzthQUNELE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBNEIsRUFBRSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQztRQUUvRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRU8sWUFBWSxDQUNsQixRQUFnQyxFQUNoQyxPQUErQixFQUMvQixnQkFBd0I7O1FBRXhCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQzFDLE9BQU8sUUFBUSxDQUFD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