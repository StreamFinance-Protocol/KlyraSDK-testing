"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubaccountProcessor = void 0;
const asset_positions_processor_1 = require("./asset-positions.processor");
const perpetual_positions_processor_1 = require("./perpetual-positions.processor");
const funding_payments_processor_1 = require("./funding-payments.processor");
const historical_pnls_processor_1 = require("./historical-pnls.processor");
const transfers_processor_1 = require("./transfers.processor");
const orders_processor_1 = require("./orders.processor");
const fills_processor_1 = require("./fills.processor");
class SubaccountProcessor {
    constructor(store) {
        this.store = store;
        this.assetPositionsProcessor = new asset_positions_processor_1.AssetPositionsProcessor(store);
        this.perpetualPositionsProcessor = new perpetual_positions_processor_1.PerpetualPositionsProcessor(store);
        this.fundingPaymentsProcessor = new funding_payments_processor_1.FundingPaymentsProcessor(store);
        this.historicalPnlsProcessor = new historical_pnls_processor_1.HistoricalPnlsProcessor(store);
        this.transfersProcessor = new transfers_processor_1.TransfersProcessor(store);
        this.ordersProcessor = new orders_processor_1.OrdersProcessor(store);
        this.fillsProcessor = new fills_processor_1.FillsProcessor(store);
    }
    process(msg, orders) {
        const existingUser = this.store.getState().user;
        const subaccountNumber = Number(msg.subaccountNumber);
        const existingSubaccount = existingUser.account.subaccounts[subaccountNumber];
        const newSubaccount = this.processSubaccount(existingSubaccount, msg, orders, true);
        return newSubaccount;
    }
    processUpdate(existingSubaccount, msg, subaccountNumber) {
        var _a, _b, _c, _d;
        const modified = existingSubaccount !== null && existingSubaccount !== void 0 ? existingSubaccount : {};
        for (const item of msg) {
            if (item.assetPositions) {
                const assetPositions = this.assetPositionsProcessor.process(item.assetPositions);
                if (assetPositions && assetPositions.length > 0) {
                    modified.assetPositions = assetPositions;
                }
            }
            if (item.perpetualPositions) {
                const perpetualPositions = this.perpetualPositionsProcessor.processChanges((_a = existingSubaccount === null || existingSubaccount === void 0 ? void 0 : existingSubaccount.positions) !== null && _a !== void 0 ? _a : {}, item.perpetualPositions);
                if (typeof perpetualPositions !== "undefined") {
                    modified.positions = perpetualPositions;
                    modified.openPositions = perpetualPositions;
                }
            }
            if (item.orders) {
                const orders = this.ordersProcessor.process((_b = existingSubaccount === null || existingSubaccount === void 0 ? void 0 : existingSubaccount.orders) !== null && _b !== void 0 ? _b : [], item.orders, subaccountNumber);
                if (orders.length > 0) {
                    modified.orders = orders;
                }
            }
            if (item.fills) {
                const fills = this.fillsProcessor.process((_c = existingSubaccount === null || existingSubaccount === void 0 ? void 0 : existingSubaccount.fills) !== null && _c !== void 0 ? _c : [], item.fills, subaccountNumber);
                if (fills.length > 0) {
                    modified.fills = fills;
                }
            }
            if (item.transfers) {
                const transfers = this.transfersProcessor.process((_d = existingSubaccount === null || existingSubaccount === void 0 ? void 0 : existingSubaccount.transfers) !== null && _d !== void 0 ? _d : [], item.transfers);
                if (transfers.length > 0) {
                    modified.transfers = transfers;
                }
            }
        }
        return modified;
    }
    processSubaccount(existing, payload, orders, firstTime) {
        var _a, _b;
        if (!payload) {
            return existing !== null && existing !== void 0 ? existing : null;
        }
        const modified = existing !== null && existing !== void 0 ? existing : {};
        const subaccountNumber = payload.subaccountNumber
            ? Number(payload.subaccountNumber)
            : 0;
        modified.subaccountNumber = subaccountNumber;
        modified.address = payload.address;
        modified.equity = Number(payload.equity);
        modified.freeCollateral = Number(payload.freeCollateral);
        modified.marginEnabled = payload.marginEnabled;
        if (firstTime) {
            const perpetualPositions = (_a = existing === null || existing === void 0 ? void 0 : existing.positions) !== null && _a !== void 0 ? _a : {};
            const newPerpetualPositions = this.perpetualPositionsProcessor.process(perpetualPositions, payload.openPerpetualPositions);
            modified.positions = newPerpetualPositions;
            modified.openPositions = newPerpetualPositions;
        }
        if (orders.length > 0) {
            const newOrders = this.ordersProcessor.process((_b = existing === null || existing === void 0 ? void 0 : existing.orders) !== null && _b !== void 0 ? _b : [], orders, subaccountNumber);
            modified.orders = newOrders;
        }
        if (Object.values(payload.assetPositions).length > 0) {
            const assetPositions = this.assetPositionsProcessor.process(Object.values(payload.assetPositions));
            if (assetPositions && assetPositions.length > 0) {
                modified.assetPositions = assetPositions;
            }
        }
        return modified;
    }
}
exports.SubaccountProcessor = SubaccountProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYWNjb3VudC5wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcHJvY2Vzc29ycy9hY2NvdW50L3N1YmFjY291bnQucHJvY2Vzc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQU9BLDJFQUFzRTtBQUN0RSxtRkFBOEU7QUFDOUUsNkVBQXdFO0FBQ3hFLDJFQUFzRTtBQUN0RSwrREFBMkQ7QUFDM0QseURBQXFEO0FBQ3JELHVEQUFtRDtBQUVuRCxNQUFhLG1CQUFtQjtJQVc5QixZQUFZLEtBQVk7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksbURBQXVCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksMkRBQTJCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUkscURBQXdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksbURBQXVCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksd0NBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGtDQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLGdDQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLE9BQU8sQ0FDWixHQUE4QixFQUM5QixNQUFnQztRQUVoQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQztRQUVoRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMs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