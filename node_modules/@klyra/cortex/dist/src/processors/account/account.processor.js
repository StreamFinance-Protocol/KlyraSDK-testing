"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountProcessor = void 0;
const subaccount_processor_1 = require("./subaccount.processor");
const account_balances_processor_1 = require("./account-balances.processor");
class AccountProcessor {
    constructor(store) {
        this.store = store;
        this.subaccountProcessor = new subaccount_processor_1.SubaccountProcessor(store);
        this.accountBalancesProcessor = new account_balances_processor_1.AccountBalancesProcessor(store);
    }
    // WebSocket Methods
    processSubscribed(msg) {
        // TODO: update other fields besides subaccounts (orders, equity, free collateral, etc)
        const payload = msg.contents;
        const orders = payload.orders;
        const subaccounts = payload.subaccount.childSubaccounts;
        const newSubaccounts = {};
        for (const subaccount of subaccounts) {
            const newSubaccount = this.subaccountProcessor.process(subaccount, orders);
            if (typeof newSubaccount !== "undefined" && newSubaccount !== null) {
                newSubaccounts[newSubaccount.subaccountNumber] = newSubaccount;
            }
        }
        this.updateSubaccounts(newSubaccounts);
    }
    processBatchUpdate(msg) {
        var _a;
        const payload = msg.contents;
        const subaccountNumber = Number((_a = msg.id) === null || _a === void 0 ? void 0 : _a.split("/")[1]);
        if (typeof subaccountNumber === "undefined" || isNaN(subaccountNumber)) {
            return;
        }
        const existingSubaccounts = this.store.getState().user.account.subaccounts;
        const existingSubaccount = existingSubaccounts[subaccountNumber];
        const newSubaccount = this.subaccountProcessor.processUpdate(existingSubaccount, payload, subaccountNumber);
        if (newSubaccount) {
            this.updateSubaccount(newSubaccount);
        }
    }
    // REST Methods
    //   public processAccountBalances(msg: IndexerAccountBalancesMessage): void {}
    updateSubaccount(subaccount) {
        const existingSubaccounts = this.store.getState().user.account.subaccounts;
        const newSubaccounts = { ...existingSubaccounts };
        newSubaccounts[subaccount.subaccountNumber] = subaccount;
        this.updateSubaccounts(newSubaccounts);
    }
    updateSubaccounts(subaccounts) {
        const current = this.store.getState().user;
        const newUser = {
            ...current,
            account: {
                ...current.account,
                subaccounts,
            },
        };
        this.store.setState({ user: newUser });
    }
}
exports.AccountProcessor = AccountProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC5wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcHJvY2Vzc29ycy9hY2NvdW50L2FjY291bnQucHJvY2Vzc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQU9BLGlFQUE2RDtBQUM3RCw2RUFBd0U7QUFFeEUsTUFBYSxnQkFBZ0I7SUFNM0IsWUFBWSxLQUFZO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLDBDQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLHFEQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxvQkFBb0I7SUFDYixpQkFBaUIsQ0FBQyxHQUF1QztRQUM5RCx1RkFBdUY7UUFDdkYsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUM3QixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzlCLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUM7UUFDeEQsTUFBTSxjQUFjLEdBQStCLEVBQUUsQ0FBQztRQUV0RCxLQUFLLE1BQU0sVUFBVSxJQUFJLFdBQVcsRUFBRSxDQUFDO1lBQ3JDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQ3BELFVBQVUsRUFDVixNQUFNLENBQ1AsQ0FBQztZQUVGLElBQUksT0FBTyxhQUFhLEtBQUssV0FBVyxJQUFJLGFBQWEsS0FBSyxJQUFJLEVBQUUsQ0FBQztnQkFDbkUsY0FBYyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLGFBQWEsQ0FBQztZQUNqRSxDQUFDO1FBQ0gsQ0FBQztRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU0sa0JBQWtCLENBQUMsR0FBd0M7O1FBQ2hFLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFDN0IsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsTUFBQSxHQUFHLENBQUMsRUFBRSwwQ0FBRSxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsSUFBSSxPQUFPLGdCQUFnQixLQUFLLFdBQVcsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDO1lBQ3ZFLE9BQU87UUFDVCxDQUFDO1FBQ0QsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQzNFLE1BQU0sa0JBQWtCLEdBQUcsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNqRSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUMxRCxrQkFBa0IsRUFDbEIsT0FBTyxFQUNQLGdCQUFnQixDQUNqQixDQUFDO1FBQ0YsSUFBSSxhQUFhLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDdkMsQ0FBQztJQUNILENBQUM7SUFFRCxlQUFlO0lBQ2YsK0VBQStFO0lBRXZFLGdCQUFnQixDQUFDLFVBQXNCO1FBQzdDLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUMzRSxNQUFNLGNBQWMsR0FBRyxFQUFFLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQztRQUNsRCxjQUFjLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsVUFBVSxDQUFDO1FBRXpELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU8saUJBQWlCLENBQUMsV0FBdUM7UUFDL0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDM0MsTUFBTSxPQUFPLEdBQUc7WUFDZCxHQUFHLE9BQU87WUFDVixPQUFPLEVBQUU7Z0JBQ1AsR0FBRyxPQUFPLENBQUMsT0FBTztnQkFDbEIsV0FBVzthQUNaO1NBQ0YsQ0FBQztRQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNGO0FBMUVELDRDQTBFQyJ9