"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradesProcessor = void 0;
const merge_1 = require("../utils/merge");
class TradesProcessor {
    constructor(store) {
        // TODO: make this configurable
        this.TRADES_LIMIT = 100;
        this.store = store;
    }
    processSubscribed(msg) {
        const newMarketTrades = [];
        for (const payload of msg.contents.trades) {
            const newTrade = this.processTrade(payload);
            if (newTrade)
                newMarketTrades.push(newTrade);
        }
        const marketId = msg.id;
        this.updateMarketTrades(marketId, newMarketTrades);
    }
    processBatchUpdate(msg) {
        const newMarketTrades = [];
        for (const array of msg.contents) {
            for (const payload of array.trades) {
                const newTrade = this.processTrade(payload);
                if (newTrade)
                    newMarketTrades.push(newTrade);
            }
        }
        const marketId = msg.id;
        this.updateMarketTrades(marketId, newMarketTrades);
    }
    processTrade(payload) {
        const newTrade = (0, merge_1.transform)(undefined, payload, {
            number: {
                price: "price",
                size: "size",
            },
            string: {
                id: "id",
                side: "side",
                type: "type",
            },
            datetime: {
                createdAt: "timestamp",
            },
        });
        return newTrade;
    }
    updateMarketTrades(marketId, newTrades) {
        var _a;
        const existingTrades = this.store.getState().trades;
        const existingMarketTrades = (_a = existingTrades[marketId]) !== null && _a !== void 0 ? _a : [];
        const updatedMarketTrades = [...existingMarketTrades, ...newTrades];
        const limitedMarketTrades = updatedMarketTrades.slice(-this.TRADES_LIMIT);
        this.store.setState({
            trades: {
                ...existingTrades,
                [marketId]: limitedMarketTrades,
            },
        });
    }
}
exports.TradesProcessor = TradesProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGVzLnByb2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9jZXNzb3JzL3RyYWRlcy5wcm9jZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBT0EsMENBQTJDO0FBRzNDLE1BQWEsZUFBZTtJQUsxQixZQUFZLEtBQVk7UUFKeEIsK0JBQStCO1FBQ2QsaUJBQVksR0FBRyxHQUFHLENBQUM7UUFJbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVNLGlCQUFpQixDQUFDLEdBQWtDO1FBQ3pELE1BQU0sZUFBZSxHQUFrQixFQUFFLENBQUM7UUFFMUMsS0FBSyxNQUFNLE9BQU8sSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzFDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDNUMsSUFBSSxRQUFRO2dCQUFFLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsQ0FBQztRQUVELE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxFQUFHLENBQUM7UUFDekIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU0sa0JBQWtCLENBQUMsR0FBbUM7UUFDM0QsTUFBTSxlQUFlLEdBQWtCLEVBQUUsQ0FBQztRQUUxQyxLQUFLLE1BQU0sS0FBSyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNqQyxLQUFLLE1BQU0sT0FBTyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDbkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDNUMsSUFBSSxRQUFRO29CQUFFLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDL0MsQ0FBQztRQUNILENBQUM7UUFFRCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsRUFBRyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVPLFlBQVksQ0FBQyxPQUFxQjtRQUN4QyxNQUFNLFFBQVEsR0FBRyxJQUFBLGlCQUFTLEVBQWMsU0FBUyxFQUFFLE9BQU8sRUFBRTtZQUMxRCxNQUFNLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLE9BQU87Z0JBQ2QsSUFBSSxFQUFFLE1BQU07YUFDYjtZQUNELE1BQU0sRUFBRTtnQkFDTixFQUFFLEVBQUUsSUFBSTtnQkFDUixJQUFJLEVBQUUsTUFBTTtnQkFDWixJQUFJLEVBQUUsTUFBTTthQUNiO1lBQ0QsUUFBUSxFQUFFO2dCQUNSLFNBQVMsRUFBRSxXQUFXO2FBQ3ZCO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVPLGtCQUFrQixDQUFDLFFBQWdCLEVBQUUsU0FBd0I7O1FBQ25FLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDO1FBRXBELE1BQU0sb0JBQW9CLEdBQUcsTUFBQSxjQUFjLENBQUMsUUFBUSxDQUFDLG1DQUFJLEVBQUUsQ0FBQztRQUM1RCxNQUFNLG1CQUFtQixHQUFHLENBQUMsR0FBRyxvQkFBb0IsRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sbUJBQW1CLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQ2xCLE1BQU0sRUFBRTtnQkFDTixHQUFHLGNBQWM7Z0JBQ2pCLENBQUMsUUFBUSxDQUFDLEVBQUUsbUJBQW1CO2FBQ2hDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBcEVELDBDQW9FQyJ9