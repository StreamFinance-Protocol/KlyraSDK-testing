"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradeFormOptionsCalculator = void 0;
const shared_1 = require("@klyra/shared");
const types_1 = require("../../../types");
const values_1 = require("./values");
class TradeFormOptionsCalculator {
    constructor(store) {
        this.store = store;
    }
    calculate(formInputs) {
        const formType = formInputs.type;
        const typeToFnMap = {
            [types_1.TradeFormType.MARKET]: this.getMarketTypeFormOptions.bind(this),
            [types_1.TradeFormType.LIMIT]: this.getLimitTypeFormOptions.bind(this),
            [types_1.TradeFormType.STOP_LIMIT]: this.getSLTPLimitTypeFormOptions.bind(this),
            [types_1.TradeFormType.TAKE_PROFIT_LIMIT]: this.getSLTPLimitTypeFormOptions.bind(this),
            [types_1.TradeFormType.STOP_MARKET]: this.getSLTPMarketTypeFormOptions.bind(this),
            [types_1.TradeFormType.TAKE_PROFIT_MARKET]: this.getSLTPMarketTypeFormOptions.bind(this),
        };
        const options = typeToFnMap[formType](formInputs);
        options.needsMarginMode = this.getNeedsMarginMode(formInputs);
        const newOptions = { ...values_1.DEFAULT_TRADE_FORM_OPTIONS, ...options };
        return newOptions;
    }
    getMarketTypeFormOptions(_) {
        const options = {};
        options.needsReduceOnly = true;
        options.needsGoodTilTime = true;
        options.needsExecution = true;
        return options;
    }
    getLimitTypeFormOptions(formInputs) {
        const options = {};
        const isGoodTilTime = formInputs.timeInForce === shared_1.OrderTimeInForce.GTT;
        options.needsPrice = true;
        options.needsTimeInForce = true;
        options.needsGoodTilTime = isGoodTilTime;
        options.needsPostOnly = isGoodTilTime;
        options.needsReduceOnly = !isGoodTilTime;
        return options;
    }
    getSLTPMarketTypeFormOptions(_) {
        const options = {};
        options.needsTriggerPrice = true;
        options.needsGoodTilTime = true;
        options.needsExecution = true;
        options.needsReduceOnly = true;
        return options;
    }
    getSLTPLimitTypeFormOptions(formInputs) {
        const options = {};
        options.needsPrice = true;
        options.needsTriggerPrice = true;
        options.needsGoodTilTime = true;
        options.needsExecution = true;
        options.needsReduceOnly = formInputs.execution === shared_1.OrderExecution.IOC;
        options.executionOptions = [
            shared_1.OrderExecution.DEFAULT,
            shared_1.OrderExecution.IOC,
            shared_1.OrderExecution.POST_ONLY,
        ];
        return options;
    }
    getNeedsMarginMode(formInputs) {
        const marketId = formInputs.marketId;
        const store = this.store.getState();
        const { subaccountNumber, account } = store.user;
        const subaccount = account.subaccounts[subaccountNumber];
        const markets = store.markets;
        const existingMarginMode = this.getExistingMarginMode(marketId, subaccount);
        if (existingMarginMode) {
            return false;
        }
        if (marketId) {
            const market = markets[marketId];
            const marketType = market === null || market === void 0 ? void 0 : market.configs.perpetualMarketType;
            if (marketType === types_1.PerpetualMarketType.CROSS) {
                // if the market is cross, then the user can select either margin mode
                return true;
            }
            // if the market is isolated, then the user can't select cross margin mode
            return false;
        }
        return true;
    }
    getExistingMarginMode(marketId, subaccount) {
        var _a, _b, _c;
        const position = (_a = subaccount === null || subaccount === void 0 ? void 0 : subaccount.openPositions) === null || _a === void 0 ? void 0 : _a[marketId];
        if (position) {
            return (_b = position.marginMode) !== null && _b !== void 0 ? _b : null;
        }
        const openOrder = (_c = subaccount === null || subaccount === void 0 ? void 0 : subaccount.orders) === null || _c === void 0 ? void 0 : _c.find((order) => order.marketId === marketId &&
            order.status.value === shared_1.OrderStatusEnum.OPEN);
        if (openOrder) {
            if (openOrder.subaccountNumber !== (subaccount === null || subaccount === void 0 ? void 0 : subaccount.subaccountNumber)) {
                // if the order is not from the subaccount, then it's isolated
                return types_1.MarginMode.ISOLATED;
            }
            // if the order is from the subaccount, then it's cross
            return types_1.MarginMode.CROSS;
        }
        return null;
    }
}
exports.TradeFormOptionsCalculator = TradeFormOptionsCalculator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGUtZm9ybS1vcHRpb25zLmNhbGN1bGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcHJvY2Vzc29ycy9mb3Jtcy90cmFkZS90cmFkZS1mb3JtLW9wdGlvbnMuY2FsY3VsYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwQ0FJdUI7QUFDdkIsMENBT3dCO0FBRXhCLHFDQUFzRDtBQUV0RCxNQUFhLDBCQUEwQjtJQUdyQyxZQUFZLEtBQVk7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVELFNBQVMsQ0FBQyxVQUEyQjtRQUNuQyxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO1FBQ2pDLE1BQU0sV0FBVyxHQUFHO1lBQ2xCLENBQUMscUJBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNoRSxDQUFDLHFCQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDOUQsQ0FBQyxxQkFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3ZFLENBQUMscUJBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUMvQixJQUFJLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUM3QyxDQUFDLHFCQUFhLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLDRCQUE0QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDekUsQ0FBQyxxQkFBYSxDQUFDLGtCQUFrQixDQUFDLEVBQ2hDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQy9DLENBQUM7UUFFRixNQUFNLE9BQU8sR0FBRyxX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