"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradeFormProcessor = void 0;
const shared_1 = require("@klyra/shared");
const shared_2 = require("@klyra/shared");
const trade_forms_1 = require("../../../schemas/trade-forms");
const forms_1 = require("../../../types/forms");
const rounder_1 = require("../../../utils/rounder");
const orderbook_1 = require("../../../utils/orderbook");
const base_form_processor_1 = require("../base-form.processor");
const values_1 = require("./values");
const trade_form_summary_calculator_1 = require("./trade-form-summary.calculator");
const trade_form_options_calculator_1 = require("./trade-form-options.calculator");
class TradeFormProcessor extends base_form_processor_1.BaseFormProcessor {
    constructor(store) {
        super(store, forms_1.FormType.TRADE);
        this.optionsProcessor = new trade_form_options_calculator_1.TradeFormOptionsCalculator(store);
        this.summaryProcessor = new trade_form_summary_calculator_1.TradeFormSummaryCalculator(store);
    }
    resetForm() {
        this.updateForm(values_1.DEFAULT_TRADE_FORM_STATE);
    }
    processInput(fieldName, value) {
        const { inputs } = this.getCurrentFormState();
        const { subaccountNumber, account } = this.store.getState().user;
        const subaccount = account.subaccounts[subaccountNumber];
        if (!subaccount) {
            throw new Error(`Subaccount number ${subaccountNumber} not found.`);
        }
        // create an internal copy of the inputs state so we can manipulate it without side effects
        const newInputs = { ...inputs, [fieldName]: value };
        this.updateForm({ inputs: newInputs });
        // validate the inputs
        const newOptions = this.optionsProcessor.calculate(newInputs);
        this.updateForm({ options: newOptions });
        const validationResult = this.validateInputs(newInputs);
        // if the inputs are invalid, set the errors in the store and return
        if (!validationResult.isValid) {
            // TODO: better error schema
            const errors = validationResult.errors.reduce((acc, error) => {
                if ("field" in error && "error" in error) {
                    acc[error.field] = error.error;
                }
                return acc;
            }, {});
            if (Object.keys(errors).length > 0) {
                this.updateForm({ errors });
                return;
            }
        }
        const calculationResult = this.calculateFormResult(newInputs, fieldName, subaccount);
        if (!calculationResult)
            return;
        const summary = this.summaryProcessor.calculate(calculationResult, subaccount);
        if (!summary)
            return;
        this.updateForm({
            inputs: calculationResult,
            postResults: {},
            summary,
        });
    }
    validateInputs(inputs) {
        const errors = [];
        // validate agains the schema using zod
        const validationResult = (0, trade_forms_1.validateTradeForm)(inputs);
        if (!validationResult.success) {
            errors.push({ field: "inputs", error: validationResult.error.message });
        }
        // TODO: make other validations
        return { isValid: errors.length === 0, errors };
    }
    calculateFormResult(newInputs, fieldName, subaccount) {
        const isBuying = newInputs.side !== shared_1.OrderSide.SELL;
        switch (newInputs.type) {
            case forms_1.TradeFormType.MARKET:
            case forms_1.TradeFormType.STOP_MARKET:
            case forms_1.TradeFormType.TAKE_PROFIT_MARKET:
                return this.calculateMarketOrder(newInputs, fieldName, subaccount, isBuying);
            case forms_1.TradeFormType.LIMIT:
            case forms_1.TradeFormType.STOP_LIMIT:
            case forms_1.TradeFormType.TAKE_PROFIT_LIMIT:
                return this.calculateLimitOrder(newInputs, fieldName, subaccount, isBuying);
            default:
                return null;
        }
    }
    calculateMarketOrder(newInputs, fieldName, subaccount, isBuying) {
        var _a, _b;
        const { marketId, baseSize, quoteSize } = newInputs;
        const storeState = this.store.getState();
        const newMarketOrder = { ...newInputs };
        const market = storeState.markets[marketId];
        if (!market)
            throw new Error(`Market ${marketId} not found.`);
        let marketOrder = null;
        if (fieldName === "baseSize") {
            marketOrder = this.calculateMarketOrderFromBaseSize(baseSize, market, isBuying);
        }
        else if (fieldName === "quoteSize") {
            marketOrder = this.calculateMarketOrderFromQuoteSize(quoteSize, market, isBuying);
        }
        else if (fieldName === "leverage") {
            const leverage = (_a = newInputs.leverage) !== null && _a !== void 0 ? _a : 0;
            marketOrder = this.calculateMarketOrderFromLeverage(leverage, market, subaccount);
        }
        if (marketOrder) {
            newMarketOrder.baseSize = marketOrder.baseSizeTotal;
            newMarketOrder.quoteSize = marketOrder.quoteSizeTotal;
            const internal = { ...newMarketOrder.internal };
            internal.filled = marketOrder.filled;
            internal.worstPrice = (_b = marketOrder.worstPrice) !== null && _b !== void 0 ? _b : undefined;
            newMarketOrder.internal = internal;
        }
        if (newMarketOrder.baseSize && newMarketOrder.quoteSize) {
            newMarketOrder.internal = {
                ...newMarketOrder.internal,
                price: newMarketOrder.baseSize / newMarketOrder.quoteSize,
            };
        }
        return newMarketOrder;
    }
    calculateMarketOrderFromLeverage(leverage, market, subaccount) {
        var _a, _b, _c;
        const stepSize = market.configs.stepSize;
        const equity = subaccount.equity;
        const spotPrice = market.spotPrice;
        // TODO: get user fee rate --- const feeRate = user.takerFeeRate;
        const positions = subaccount.openPositions;
        const positionSize = (_a = positions === null || positions === void 0 ? void 0 : positions[market.id]) === null || _a === void 0 ? void 0 : _a.size;
        if (!equity || !spotPrice || !positionSize || equity <= 0)
            return null;
        const existingLeverage = (positionSize * spotPrice) / equity;
        let isBuying = null;
        if (leverage > existingLeverage) {
            isBuying = true;
        }
        else if (existingLeverage > leverage) {
            isBuying = false;
        }
        if (isBuying === null)
            return null;
        const orderbookField = isBuying ? "asks" : "bids";
        const orderbook = (0, orderbook_1.getOrderbookFromStore)(this.store, market.market)[orderbookField];
        let quoteSizeTotal = 0;
        let baseSizeTotal = 0;
        let worstPrice = null;
        let filled = false;
        const marketOrderOrderBook = [];
        const orderbookFirstOrNull = (_b = orderbook[0]) !== null && _b !== void 0 ? _b : null;
        const currentPositionValue = positionSize * ((_c = orderbookFirstOrNull === null || orderbookFirstOrNull === void 0 ? void 0 : orderbookFirstOrNull.price) !== null && _c !== void 0 ? _c : 0) || 0;
        const targetPositionValue = leverage * equity;
        let remainingOrderSize = targetPositionValue - currentPositionValue;
        if ((isBuying && remainingOrderSize < 0) ||
            (!isBuying && remainingOrderSize > 0)) {
            // The order would decrease leverage, which is not what we want for a "leverage" input
            return null;
        }
        for (const entry of orderbook) {
            const { price, size } = entry;
            const orderSize = Math.abs(remainingOrderSize) > size * price
                ? size
                : Math.abs(remainingOrderSize) / price;
            const roundedOrderSize = (0, rounder_1.quickRound)(orderSize, stepSize);
            quoteSizeTotal += roundedOrderSize;
            const orderCost = roundedOrderSize * price;
            baseSizeTotal += orderCost;
            worstPrice = price;
            marketOrderOrderBook.push(entry);
            remainingOrderSize -= isBuying ? orderCost : -orderCost;
            if (Math.abs(remainingOrderSize) < price * stepSize) {
                filled = true;
                break;
            }
        }
        return {
            quoteSizeTotal,
            baseSizeTotal,
            worstPrice,
            filled,
        };
    }
    calculateMarketOrderFromBaseSize(baseSize, market, isBuying) {
        if (!baseSize)
            return null;
        // const stepSize = market.configs.stepSize;
        const orderbookField = isBuying ? "asks" : "bids";
        const orderbook = (0, orderbook_1.getOrderbookFromStore)(this.store, market.market)[orderbookField];
        if (orderbook.length === 0)
            return null;
        let quoteSizeTotal = 0;
        let baseSizeTotal = 0;
        let worstPrice = null;
        let filled = false;
        const marketOrderOrderBook = [];
        for (const entry of orderbook) {
            const { price, size } = entry;
            if (price && price > 0 && size) {
                const entryBaseSize = size * price;
                filled = baseSizeTotal + entryBaseSize >= baseSize;
                let matchedQuoteSize = size;
                let matchedBaseSize = entryBaseSize;
                if (filled) {
                    matchedBaseSize = baseSize - baseSizeTotal;
                    matchedQuoteSize = matchedBaseSize / price;
                    // TODO: check if we should round here (abacus does, but if we do it breaks the number)
                    // matchedQuoteSize = quickRound(matchedQuoteSize, stepSize);
                    matchedBaseSize = matchedQuoteSize * price;
                }
                quoteSizeTotal += matchedQuoteSize;
                baseSizeTotal += matchedBaseSize;
                worstPrice = price;
                marketOrderOrderBook.push(entry);
                if (filled) {
                    break;
                }
            }
        }
        return {
            quoteSizeTotal,
            baseSizeTotal,
            worstPrice,
            filled,
        };
    }
    calculateMarketOrderFromQuoteSize(quoteSize, market, isBuying) {
        if (!quoteSize)
            return null;
        const orderbookField = isBuying ? "asks" : "bids";
        const orderbook = (0, orderbook_1.getOrderbookFromStore)(this.store, market.market)[orderbookField];
        if (orderbook.length === 0)
            return null;
        let quoteSizeTotal = 0;
        let baseSizeTotal = 0;
        let worstPrice = null;
        let filled = false;
        const marketOrderOrderBook = [];
        for (const entry of orderbook) {
            const { price, size } = entry;
            if (price && size) {
                filled = quoteSizeTotal + size >= quoteSize;
                const matchedQuoteSize = filled ? quoteSize - quoteSizeTotal : size;
                const matchedBaseSize = matchedQuoteSize * price;
                quoteSizeTotal += matchedQuoteSize;
                baseSizeTotal += matchedBaseSize;
                worstPrice = price;
                marketOrderOrderBook.push(entry);
                if (filled) {
                    break;
                }
            }
        }
        return {
            quoteSizeTotal,
            baseSizeTotal,
            worstPrice,
            filled,
        };
    }
    calculateLimitOrder(newInputs, fieldName, subaccount, isBuying) {
        const { marketId, price, baseSize, quoteSize, leverage } = newInputs;
        const storeState = this.store.getState();
        const newLimitOrder = { ...newInputs };
        const market = storeState.markets[marketId];
        if (!market)
            throw new Error(`Market ${marketId} not found.`);
        const stepSize = market.configs.stepSize;
        if (fieldName === "baseSize") {
            if (price && baseSize) {
                newLimitOrder.quoteSize = (0, rounder_1.round)(baseSize / price, stepSize);
            }
        }
        else if (fieldName === "quoteSize") {
            if (price && quoteSize) {
                newLimitOrder.baseSize = (0, rounder_1.round)(quoteSize * price, stepSize);
            }
        }
        else if (fieldName === "price") {
            if (price) {
                if (newLimitOrder.baseSize) {
                    newLimitOrder.quoteSize = (0, rounder_1.round)(newLimitOrder.baseSize / price, stepSize);
                }
                else if (newLimitOrder.quoteSize) {
                    newLimitOrder.baseSize = (0, rounder_1.round)(newLimitOrder.quoteSize * price, stepSize);
                }
            }
        }
        else if (fieldName === "leverage") {
            if (leverage) {
                const calculatedSize = this.calculateSizeFromLeverageAndLimitPrice(leverage, price, market, subaccount, isBuying);
                if (calculatedSize) {
                    newLimitOrder.quoteSize = calculatedSize;
                    newLimitOrder.baseSize = calculatedSize * price;
                }
            }
        }
        return newLimitOrder;
    }
    calculateSizeFromLeverageAndLimitPrice(leverage, limitPrice, market, subaccount, isBuying) {
        var _a;
        if (!leverage || !limitPrice)
            return null;
        const equity = subaccount.equity;
        // TODO: get user fee rate
        const feeRate = 0;
        const stepSize = market.configs.stepSize;
        const positions = subaccount.openPositions;
        const positionQuoteSize = (_a = positions === null || positions === void 0 ? void 0 : positions[market.id]) === null || _a === void 0 ? void 0 : _a.size;
        const orderSign = isBuying ? 1 : -1;
        if (!equity || !positionQuoteSize)
            return null;
        const orderSize = (leverage * equity - positionQuoteSize * limitPrice) /
            (limitPrice + orderSign * leverage * limitPrice * feeRate);
        const desiredSize = Math.abs(orderSize);
        if (desiredSize < positionQuoteSize) {
            return (0, rounder_1.quickRound)(orderSize, stepSize);
        }
        const rounded = (0, rounder_1.quickRound)(desiredSize, stepSize);
        return (0, rounder_1.quickRound)(rounded, stepSize);
    }
    updateForm(newState) {
        const formType = this.formType;
        const forms = this.store.getState().forms;
        this.store.setState({
            forms: {
                ...forms,
                [formType]: { ...forms[formType], ...newState },
            },
        });
    }
    isShortTermOrder(type, timeInForce) {
        if (type === forms_1.TradeFormType.MARKET) {
            return true;
        }
        else if (type === forms_1.TradeFormType.LIMIT) {
            if (timeInForce === shared_1.OrderTimeInForce.GTT) {
                return false;
            }
            return true;
        }
        return false;
    }
    // public convertToPayload(
    //   subaccountNumber: number,
    //   TODO: get currentHeight from other places (indexer and store on state for example)
    //   currentHeight: number
    // ): PlaceOrderPayload {
    //   const state = this.store.getState();
    //   const tradeForm = state.forms[FormType.TRADE];
    //   const tradeInputs = tradeForm.inputs;
    //   // random number between 0 and 2^32 - 1
    //   const clientId = Math.floor(Math.random() * (Number.MAX_SAFE_INTEGER - 1));
    //   const orderSubaccountNumber =
    //     tradeInputs.marginMode === MarginMode.ISOLATED
    //       ? this.getSubaccountNumberForIsolatedMarket(
    //           tradeInputs.marketId,
    //           subaccountNumber
    //         )
    //       : subaccountNumber;
    //   const market = state.markets[tradeInputs.marketId];
    //   if (!market) throw new Error(`Market ${tradeInputs.marketId} not found.`);
    //   const marketInfo: PlaceOrderMarketInfo = {
    //     clobPairId: market.configs.clobPairId,
    //     atomicResolution: market.configs.atomicResolution,
    //     stepBaseQuantums: market.configs.stepBaseQuantums,
    //     quantumConversionExponent: market.configs.quantumConversionExponent,
    //     subticksPerTick: market.configs.subticksPerTick,
    //   };
    //   // TODO: get triggerPrice if needed
    //   const triggerPrice = 0;
    //   // TODO: get postOnly if needed
    //   const postOnly = false;
    //   const reduceOnly = tradeInputs.reduceOnly || false;
    //   const timeInForce = !!tradeInputs.timeInForce
    //     ? tradeInputs.type === TradeFormType.MARKET
    //       ? OrderTimeInForce.IOC
    //       : tradeInputs.timeInForce || OrderTimeInForce.IOC
    //     : null;
    //   const execution = tradeInputs.execution || OrderExecution.DEFAULT;
    //   // TODO: calculate goodTilTimeInSeconds
    //   const goodTilTimeInSeconds = tradeInputs.goodTilTime || null;
    //   const goodTilBlock = this.isShortTermOrder(
    //     tradeInputs.type,
    //     tradeInputs.timeInForce
    //   )
    //     ? currentHeight + SHORT_TERM_ORDER_DURATION
    //     : null;
    //   return {
    //     subaccountNumber: orderSubaccountNumber,
    //     marketId: tradeInputs.marketId,
    //     clientId,
    //     type: tradeInputs.type,
    //     side: tradeInputs.side,
    //     price: tradeForm.summary?.price || 0,
    //     // TODO: check if it's baseSize or quoteSize
    //     size: tradeForm.summary?.baseSize || 0,
    //     triggerPrice,
    //     reduceOnly,
    //     postOnly,
    //     marketInfo,
    //     timeInForce,
    //     execution,
    //     goodTilTimeInSeconds,
    //     goodTilBlock,
    //     currentHeight,
    //   };
    // }
    getSubaccountNumberForIsolatedMarket(marketId, subaccountNumber) {
        const subaccounts = this.store.getState().user.account.subaccounts;
        const utilizedSubaccountsMarketIdMap = Object.entries(subaccounts).reduce((acc, [_, subaccount]) => {
            var _a;
            const openPositions = subaccount.openPositions;
            const openOrders = (_a = subaccount.orders) === null || _a === void 0 ? void 0 : _a.filter((order) => {
                const status = order.status;
                return [
                    shared_1.OrderStatusEnum.OPEN,
                    shared_1.OrderStatusEnum.PENDING,
                    shared_1.OrderStatusEnum.UNTRIGGERED,
                    shared_1.OrderStatusEnum.PARTIALLY_FILLED,
                ].includes(status.value);
            });
            const positionMarketIds = Object.values(openPositions !== null && openPositions !== void 0 ? openPositions : {}).map((position) => position.id);
            const openOrderMarketIds = (openOrders !== null && openOrders !== void 0 ? openOrders : []).map((order) => order.marketId);
            const uniqueMarketIds = [
                ...new Set([...positionMarketIds, ...openOrderMarketIds]),
            ];
            acc[subaccountNumber] = uniqueMarketIds;
            return acc;
        }, {});
        let availableSubaccountNumber = subaccountNumber;
        Object.entries(utilizedSubaccountsMarketIdMap).forEach(([key, marketIds]) => {
            var _a, _b;
            const subaccountNumberToCheck = parseInt(key);
            if (subaccountNumberToCheck !== subaccountNumber) {
                if (marketIds.includes(marketId) && marketIds.length <= 1) {
                    return subaccountNumberToCheck;
                }
                else if (marketIds.length === 0) {
                    const equity = (_b = (_a = subaccounts[subaccountNumberToCheck]) === null || _a === void 0 ? void 0 : _a.equity) !== null && _b !== void 0 ? _b : 0;
                    if (availableSubaccountNumber === subaccountNumber &&
                        equity === 0) {
                        availableSubaccountNumber = subaccountNumberToCheck;
                    }
                }
            }
        });
        if (availableSubaccountNumber !== subaccountNumber) {
            return availableSubaccountNumber;
        }
        const existingSubaccountNumbers = Object.keys(utilizedSubaccountsMarketIdMap);
        for (let offset = shared_2.NUM_PARENT_SUBACCOUNTS; offset <= shared_2.MAX_SUBACCOUNT_NUMBER; offset += shared_2.NUM_PARENT_SUBACCOUNTS) {
            const tentativeSubaccountNumber = offset + subaccountNumber;
            if (!existingSubaccountNumbers.includes(tentativeSubaccountNumber.toString())) {
                return tentativeSubaccountNumber;
            }
        }
        throw new Error("No available subaccount number");
    }
}
exports.TradeFormProcessor = TradeFormProcessor;
//# sourceMappingURL=data:application/json;base64,