"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradeFormSummaryCalculator = void 0;
const shared_1 = require("@klyra/shared");
const types_1 = require("../../../types");
const orderbook_1 = require("../../../utils/orderbook");
const indexer_conversion_1 = require("../../../utils/indexer-conversion");
class TradeFormSummaryCalculator {
    constructor(store) {
        this.store = store;
    }
    calculate(calculationResult, subaccount) {
        var _a, _b, _c, _d;
        const multiplier = calculationResult.side === shared_1.OrderSide.BUY ? 1 : -1;
        const market = this.store.getState().markets[calculationResult.marketId];
        if (!market)
            return null;
        switch (calculationResult.type) {
            case types_1.TradeFormType.MARKET: {
                // TODO: get fee rate from user
                const feeRate = 0;
                const values = calculationResult;
                // const midMarketPrice = this.orderbookMidPrice(
                //   calculationResult.marketId
                // );
                // const worstPrice = calculationResult.worstPrice;
                // const slippageFromMidPrice = ...
                const price = (_b = (_a = values.internal) === null || _a === void 0 ? void 0 : _a.price) !== null && _b !== void 0 ? _b : 0;
                const side = values.side;
                // TODO: set custom slippage
                const maxSlippage = 0.01;
                let payloadPrice = null;
                if (price) {
                    payloadPrice =
                        side === shared_1.OrderSide.BUY
                            ? price * (1 + maxSlippage)
                            : price * (1 - maxSlippage);
                }
                const quoteSize = values.quoteSize;
                const baseSize = price && quoteSize ? price * quoteSize : null;
                const fee = baseSize && feeRate ? baseSize * feeRate : null;
                // TODO: check if the -1 is correct
                const total = baseSize ? baseSize * multiplier + (fee !== null && fee !== void 0 ? fee : 0) * -1 : null;
                const spotPrice = market.spotPrice;
                const priceDiff = this.slippage(price, spotPrice, side);
                // TODO: check if we should round here (abacus does, but if we do it breaks the number)
                // const indexSlippage =
                //   priceDiff && spotPrice ?
                //      Rounder.quickRound(priceDiff / spotPrice, SLIPPAGE_STEP_SIZE)
                //     : null;
                const indexSlippage = priceDiff && spotPrice ? priceDiff / spotPrice : null;
                const filled = (_d = (_c = values.internal) === null || _c === void 0 ? void 0 : _c.filled) !== null && _d !== void 0 ? _d : false;
                // TODO: These are the current values. Ideally, we would calculate the new values and send both to the frontend.
                const positionMargin = this.getPositionMargin(values.marginMode, market, subaccount);
                // const positionLeverage = this.getPositionLeverage(market, subaccount);
                // TODO: calculate new account equity
                return {
                    price,
                    payloadPrice,
                    baseSize,
                    quoteSize,
                    fee,
                    feeRate,
                    total,
                    // slippage: slippageFromMidPrice,
                    filled,
                    indexSlippage,
                    positionMargin,
                };
            }
            case types_1.TradeFormType.LIMIT: {
                const values = calculationResult;
                // const timeInForce = values.timeInForce;
                // const execution = values.execution;
                // const isMaker =
                //   timeInForce === OrderTimeInForce.GTT ||
                //   execution === OrderExecution.POST_ONLY;
                // TODO: get fee rate from user
                const feeRate = 0;
                const price = values.price;
                const quoteSize = values.quoteSize;
                const baseSize = price && quoteSize ? price * quoteSize : null;
                const fee = baseSize && feeRate ? baseSize * feeRate : null;
                const total = baseSize ? baseSize * multiplier + (fee !== null && fee !== void 0 ? fee : 0) * -1 : null;
                const positionMargin = this.getPositionMargin(values.marginMode, market, subaccount);
                // const positionLeverage = this.getPositionLeverage(market, subaccount);
                // TODO: calculate new account equity
                return {
                    price,
                    payloadPrice: price,
                    baseSize,
                    quoteSize,
                    fee,
                    feeRate,
                    total,
                    filled: true,
                    positionMargin,
                };
            }
            default:
                return null;
        }
    }
    orderbookMidPrice(marketId) {
        const orderbook = (0, orderbook_1.getOrderbookFromStore)(this.store, marketId);
        const asks = orderbook.asks;
        const bids = orderbook.bids;
        const firstAsk = asks[0];
        const firstBid = bids[0];
        if (!firstAsk || !firstBid)
            return null;
        const midPrice = (firstAsk.price + firstBid.price) / 2;
        return midPrice;
    }
    slippage(price, spotPrice, side) {
        if (!price || !spotPrice)
            return null;
        return side === shared_1.OrderSide.BUY ? price - spotPrice : spotPrice - price;
    }
    getPositionMargin(marginMode, market, subaccount) {
        var _a;
        const position = (_a = subaccount.openPositions) === null || _a === void 0 ? void 0 : _a[market.id];
        if (!position)
            return null;
        if (marginMode === types_1.MarginMode.CROSS) {
            const currentNotionalTotal = position.notionalTotal;
            const mmf = market.configs.maintenanceMarginFraction;
            if (mmf && currentNotionalTotal) {
                return currentNotionalTotal * mmf;
            }
        }
        else {
            const currentEquity = position.equity;
            if (currentEquity) {
                return currentEquity;
            }
        }
        return null;
    }
    getPositionLeverage(market, subaccount) {
        const { subaccountNumber, leverage, openPositions } = subaccount;
        const marginMode = (0, indexer_conversion_1.getMarginModeFromSubaccount)(subaccountNumber);
        if (marginMode === types_1.MarginMode.ISOLATED) {
            return leverage !== null && leverage !== void 0 ? leverage : null;
        }
        const marketId = market.id;
        const position = openPositions === null || openPositions === void 0 ? void 0 : openPositions[marketId];
        const currentLeverage = position === null || position === void 0 ? void 0 : position.leverage;
        return currentLeverage !== null && currentLeverage !== void 0 ? currentLeverage : null;
    }
    getExecutionPrice(spotPrice, limitPrice, isBuying) {
        if (!spotPrice || !limitPrice)
            return null;
        if (isBuying) {
            return Math.min(spotPrice, limitPrice);
        }
        return Math.max(spotPrice, limitPrice);
    }
}
exports.TradeFormSummaryCalculator = TradeFormSummaryCalculator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGUtZm9ybS1zdW1tYXJ5LmNhbGN1bGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcHJvY2Vzc29ycy9mb3Jtcy90cmFkZS90cmFkZS1mb3JtLXN1bW1hcnkuY2FsY3VsYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwQ0FBMEM7QUFFMUMsMENBU3dCO0FBQ3hCLHdEQUFpRTtBQUNqRSwwRUFBZ0Y7QUFFaEYsTUFBYSwwQkFBMEI7SUFHckMsWUFBWSxLQUFZO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxTQUFTLENBQ1AsaUJBQWtDLEVBQ2xDLFVBQXNCOztRQUV0QixNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLEtBQUssa0JBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLE1BQU07WUFBRSxPQUFPLElBQUksQ0FBQztRQUV6QixRQUFRLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO1lBQy9CLEtBQUsscUJBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUMxQiwrQkFBK0I7Z0JBQy9CLE1BQU0sT0FBTyxHQUFrQixDQUFDLENBQUM7Z0JBQ2pDLE1BQU0sTUFBTSxHQUFHLGlCQUEwQyxDQUFDO2dCQUMxRCxpREFBaUQ7Z0JBQ2pELCtCQUErQjtnQkFDL0IsS0FBSztnQkFDTCxtREFBbUQ7Z0JBQ25ELG1DQUFtQztnQkFDbkMsTUFBTSxLQUFLLEdBQUcsTUFBQSxNQUFBLE1BQU0sQ0FBQyxRQUFRLDBDQUFFLEtBQUssbUNBQUksQ0FBQyxDQUFDO2dC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