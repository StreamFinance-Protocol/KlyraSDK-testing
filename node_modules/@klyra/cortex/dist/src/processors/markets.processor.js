"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketsProcessor = void 0;
const shared_1 = require("@klyra/shared");
const candles_1 = require("../constants/candles");
const merge_1 = require("../utils/merge");
const market_id_1 = require("../utils/market-id");
class MarketsProcessor {
    constructor(store) {
        this.store = store;
    }
    processSubscribed(msg) {
        const newMarkets = new Map();
        for (const [id, payload] of Object.entries(msg.contents.markets)) {
            const newMarket = this.processSubscribedMarket(id, payload);
            if (newMarket)
                newMarkets.set(id, newMarket);
        }
        const newMarketsObj = Object.fromEntries(newMarkets);
        this.updateMarkets(newMarketsObj);
    }
    processBatchUpdate(msg) {
        const newMarkets = new Map();
        // TODO: change indexer structure so we don't have to do this
        // or check why this is the structure we're receiving
        msg.contents.forEach((partialUpdate) => {
            if (partialUpdate.oraclePrices) {
                for (const [id, payload] of Object.entries(partialUpdate.oraclePrices)) {
                    const newMarket = this.processBatchUpdateMarketOraclePrices(id, payload);
                    if (newMarket)
                        newMarkets.set(id, newMarket);
                }
            }
            if (partialUpdate.trading) {
                for (const [id, payload] of Object.entries(partialUpdate.trading)) {
                    const newMarket = this.processBatchUpdateMarketTrading(id, payload);
                    if (newMarket)
                        newMarkets.set(id, newMarket);
                }
            }
        });
        const newMarketsObj = Object.fromEntries(newMarkets);
        this.updateMarkets(newMarketsObj);
    }
    processSubscribedMarket(id, payload) {
        const existingMarket = this.store.getState().markets[id];
        const newMarket = (0, merge_1.transform)(existingMarket, payload, {
            string: {
                ticker: "market",
            },
            number: {
                spotPrice: "spotPrice",
                priceChange24H: "priceChange24H",
            },
        });
        if (newMarket.market) {
            newMarket.id = newMarket.market;
            const assetId = (0, market_id_1.getAssetIdFromMarketId)(newMarket.market);
            if (assetId)
                newMarket.assetId = assetId;
        }
        else {
            const name = payload.ticker;
            newMarket.market = name;
        }
        newMarket.status = this.calculateMarketStatus(payload.status);
        newMarket.configs = this.calculateMarketConfigs(existingMarket, payload);
        newMarket.perpetual = this.calculatePerpetualMarketInfo(existingMarket, payload, newMarket.spotPrice);
        // TODO: calculate sparkline
        const effectiveIMF = this.calculateEffectiveInitialMarginFraction(newMarket);
        if (effectiveIMF) {
            newMarket.configs.effectiveInitialMarginFraction = effectiveIMF;
        }
        return this.calculateMarket(newMarket);
    }
    processBatchUpdateMarketOraclePrices(id, payload) {
        const existingMarket = this.store.getState().markets[id];
        const newMarket = (0, merge_1.transform)(existingMarket, payload, {
            number: {
                spotPrice: "spotPrice",
            },
        });
        return newMarket;
    }
    processBatchUpdateMarketTrading(id, payload) {
        const existingMarket = this.store.getState().markets[id];
        const transformed = (0, merge_1.transform)(existingMarket, payload, {
            number: {
                spotPrice: "spotPrice",
                price: "spotPrice",
            },
            string: {
                market: "market",
                baseAsset: "assetId",
            },
        });
        const newPerpetual = this.calculatePerpetualMarketInfo(existingMarket, payload, transformed.spotPrice);
        transformed.perpetual = newPerpetual;
        return this.calculateMarket(transformed);
    }
    // --- subcalculations ---
    calculateEffectiveInitialMarginFraction(market) {
        const spotPrice = market.spotPrice;
        const baseIMF = market.configs.initialMarginFraction;
        const openInterest = market.perpetual.openInterest;
        const openInterestLowerCap = market.perpetual.openInterestLowerCap;
        const openInterestUpperCap = market.perpetual.openInterestUpperCap;
        if (!baseIMF)
            return null;
        if (!spotPrice ||
            !openInterest ||
            !openInterestLowerCap ||
            !openInterestUpperCap) {
            return baseIMF;
        }
        if (openInterestLowerCap === openInterestUpperCap)
            return baseIMF;
        const openNotional = openInterest * spotPrice;
        const scalingFactor = openNotional -
            openInterestLowerCap / openInterestUpperCap -
            openInterestLowerCap;
        const imfIncrease = (1 - baseIMF) * scalingFactor;
        const effectiveIMF = Math.min(baseIMF + Math.max(imfIncrease, 0), 1);
        return effectiveIMF;
    }
    calculatePerpetualMarketInfo(existingMarket, payload, spotPrice) {
        const perpetualObj = (0, merge_1.transform)(existingMarket === null || existingMarket === void 0 ? void 0 : existingMarket.perpetual, payload, {
            number: {
                volume24H: "volume24H",
                openInterest: "openInterest",
                openInterestLowerCap: "openInterestLowerCap",
                openInterestUpperCap: "openInterestUpperCap",
                nextFundingRate: "nextFundingRate",
                trades24H: "trades24H",
            },
            datetime: {
                nextFundingAt: "nextFundingAtMilliseconds",
            },
        });
        perpetualObj.openInterestUSDC = perpetualObj.openInterest * spotPrice;
        return perpetualObj;
    }
    calculateMarketConfigs(existingMarket, payload) {
        const configsObj = (0, merge_1.transform)(existingMarket === null || existingMarket === void 0 ? void 0 : existingMarket.configs, payload, {
            string: {
                marketType: "perpetualMarketType",
            },
            number: {
                maintenanceMarginFraction: "maintenanceMarginFraction",
                stepSize: "stepSize",
                tickSize: "tickSize",
                minOrderSize: "minOrderSize",
                initialMarginFraction: "initialMarginFraction",
                maxPositionSize: "maxPositionSize",
                baselinePositionSize: "baselinePositionSize",
                basePositionNotional: "basePositionNotional",
                clobPairId: "clobPairId",
                atomicResolution: "atomicResolution",
                stepBaseQuantums: "stepBaseQuantums",
                quantumConversionExponent: "quantumConversionExponent",
                subticksPerTick: "subticksPerTick",
            },
        });
        const minOrderSize = configsObj.minOrderSize;
        if (!minOrderSize) {
            configsObj.minOrderSize = Number(payload.stepSize);
        }
        configsObj.candleOptions = candles_1.CANDLE_OPTIONS;
        return configsObj;
    }
    calculateMarketStatus(status) {
        switch (status) {
            case shared_1.IndexerPerpetualMarketStatus.ACTIVE:
                return {
                    canTrade: true,
                    canReduce: true,
                };
            case shared_1.IndexerPerpetualMarketStatus.CANCEL_ONLY:
                return {
                    canTrade: false,
                    canReduce: true,
                };
            default:
                return {
                    canTrade: false,
                    canReduce: false,
                };
        }
    }
    updateMarkets(newMarkets) {
        const markets = this.store.getState().markets;
        this.store.setState({
            markets: {
                ...markets,
                ...newMarkets,
            },
        });
    }
    calculateMarket(market) {
        const { priceChange24H, spotPrice } = market;
        const modified = { ...market };
        let percent = null;
        if (priceChange24H === 0)
            percent = 0;
        if (priceChange24H && spotPrice && spotPrice > priceChange24H) {
            const basePrice = spotPrice - priceChange24H;
            if (basePrice > 0)
                percent = priceChange24H / basePrice;
        }
        modified.priceChange24HPercent = percent;
        return modified;
    }
}
exports.MarketsProcessor = MarketsProcessor;
//# sourceMappingURL=data:application/json;base64,