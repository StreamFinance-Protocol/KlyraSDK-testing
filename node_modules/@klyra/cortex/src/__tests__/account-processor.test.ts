import { describe, expect, it, beforeAll } from "@jest/globals";
import { OrderTimeInForce } from "@klyra/shared";
import { Store } from "../core/store";
import { AccountProcessor } from "../processors/account/account.processor";
import { MarketsProcessor } from "../processors/markets.processor";
import { MarketsMocks, AccountsMocks } from "./mocks";

describe("AccountProcessor", () => {
  let store: Store;
  let accountProcessor: AccountProcessor;

  beforeAll(() => {
    store = new Store();
    accountProcessor = new AccountProcessor(store);

    // set market prices
    const marketsProcessor = new MarketsProcessor(store);
    marketsProcessor.processSubscribed(MarketsMocks.SUBSCRIBED_MESSAGE);
  });

  it("should be defined", () => {
    expect(AccountProcessor).toBeDefined();
  });

  it("should process a subaccount", () => {
    accountProcessor.processSubscribed(AccountsMocks.SUBSCRIBED_MESSAGE);

    const subaccounts = store.getState().user.account.subaccounts;
    expect(Object.keys(subaccounts).length).toBe(3);
    expect(subaccounts[0]?.equity).toBe(415.171879998);
    expect(subaccounts[0]?.freeCollateral).toBe(314.9069364984);
    expect(subaccounts[0]?.marginEnabled).toBe(true);
  });

  it("should process a subaccount update", () => {
    accountProcessor.processSubscribed(AccountsMocks.SUBSCRIBED_MESSAGE);

    const initialSubaccount = store.getState().user.account.subaccounts[0];
    const initialPositions = initialSubaccount?.positions;

    expect(initialPositions).toBeDefined();
    expect(initialPositions?.["RENDER-USD"]).toBeDefined();
    expect(Object.keys(initialPositions ?? {}).length).toBe(3);

    accountProcessor.processBatchUpdate(AccountsMocks.BATCH_UPDATE_MESSAGE);

    const subaccounts = store.getState().user.account.subaccounts;
    expect(Object.keys(subaccounts[0]?.positions ?? {}).length).toBe(2);
    // expect(subaccounts.get(0)?.freeCollateral).toBeGreaterThan(
    //   initialSubaccount?.freeCollateral || 0
    // );

    // Orders
    expect(subaccounts[0]?.orders?.length).toBe(1);
    expect(subaccounts[0]?.orders?.[0]?.marketId).toBe("RENDER-USD");
    expect(subaccounts[0]?.orders?.[0]?.timeInForce).toBe(OrderTimeInForce.IOC);
    // Fills
    expect(subaccounts[0]?.fills?.length).toBe(1);
    expect(subaccounts[0]?.fills?.[0]?.marketId).toBe("RENDER-USD"); // 65 is the clobPairId for RENDER-USD
    expect(subaccounts[0]?.fills?.[0]?.size).toBe(2); // 65 is the clobPairId for RENDER-USD
    // Asset Positions
    expect(subaccounts[0]?.assetPositions?.length).toBe(1);
    expect(subaccounts[0]?.assetPositions?.[0]?.assetId).toBe("0");
  });
});
