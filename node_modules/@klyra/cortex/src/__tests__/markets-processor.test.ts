import { describe, expect, it, beforeAll } from "@jest/globals";
import { Store } from "../core/store";
import { TradesProcessor } from "../processors/trades.processor";
import { MarketsProcessor } from "../processors/markets.processor";
import { MarketsMocks } from "./mocks";

describe("MarketsProcessor", () => {
  let store: Store;
  let marketsProcessor: MarketsProcessor;

  beforeAll(() => {
    store = new Store();
    marketsProcessor = new MarketsProcessor(store);
  });

  it("should be defined", () => {
    expect(TradesProcessor).toBeDefined();
  });

  it("should process markets", () => {
    marketsProcessor.processSubscribed(MarketsMocks.SUBSCRIBED_MESSAGE);

    const markets = store.getState().markets;
    expect(markets).toBeDefined();
    expect(Object.keys(markets).length).toBe(2);
    expect(markets["BTC-USD"]).toBeDefined();
    const market = markets["ETH-USD"];
    expect(market).toBeDefined();
    if (!market) {
      throw new Error("Market is undefined");
    }
    expect(market.perpetual.trades24H).toBe(2109);
    expect(market.status.canTrade).toBe(true);
  });

  it("should process oracle price updates", () => {
    const previousMarkets = store.getState().markets;
    const previousMarket = previousMarkets["ETH-USD"];
    expect(previousMarket).toBeDefined();
    expect(previousMarket?.status.canTrade).toBe(true);

    marketsProcessor.processBatchUpdate(
      MarketsMocks.ORACLE_PRICE_UPDATE_MESSAGE
    );

    const markets = store.getState().markets;
    expect(markets["ETH-USD"]?.spotPrice).toBe(2582.364261);
    expect(markets["BTC-USD"]?.spotPrice).toBe(63360.41819);
  });

  it("should process trading market updates", () => {
    const previousMarkets = store.getState().markets;
    const previousMarket = previousMarkets["BTC-USD"];
    expect(previousMarket).toBeDefined();
    expect(previousMarket?.status.canTrade).toBe(true);

    marketsProcessor.processBatchUpdate(
      MarketsMocks.TRADING_MARKET_UPDATE_MESSAGE
    );

    const markets = store.getState().markets;
    expect(markets["BTC-USD"]?.perpetual.trades24H).toBe(10000);
  });
});
