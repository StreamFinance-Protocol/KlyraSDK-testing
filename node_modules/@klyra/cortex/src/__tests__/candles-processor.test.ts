import { describe, expect, it, beforeAll } from "@jest/globals";
import { Store } from "../core/store";
import { CandlesProcessor } from "../processors/candles.processor";
import { CandlesMocks } from "./mocks";

describe("CandlesProcessor", () => {
  let store: Store;
  let candlesProcessor: CandlesProcessor;

  beforeAll(() => {
    store = new Store();
    candlesProcessor = new CandlesProcessor(store);
  });

  it("should be defined", () => {
    expect(CandlesProcessor).toBeDefined();
  });

  it("should process candles", () => {
    candlesProcessor.processSubscribed(CandlesMocks.SUBSCRIBED_MESSAGE);

    const candles = store.getState().candles;
    const marketCandles = candles["ETH-USD"];
    const resolutionCandles = marketCandles?.["1MIN"];

    expect(resolutionCandles).toBeDefined();
    expect(marketCandles?.["5MIN"]).toBeUndefined();
    expect(resolutionCandles?.length).toBe(8);

    // Since the candles are in reverse chronological order, the processor
    // should have reversed them.
    const candle = resolutionCandles?.[resolutionCandles.length - 1];
    if (!candle) {
      throw new Error("Candle is undefined");
    }
    expect(candle.startedAtMilliseconds).toBe(1727275620000);
    expect(candle.low).toBe(2632.6);
    expect(candle.high).toBe(2632.6);
    expect(candle.open).toBe(2632.6);
    expect(candle.close).toBe(2632.6);
    expect(candle.baseTokenVolume).toBe(0);
    expect(candle.usdVolume).toBe(0);
  });

  it("should process batch update", () => {
    candlesProcessor.processBatchUpdate(CandlesMocks.BATCH_UPDATE_MESSAGE);

    const candles = store.getState().candles;
    const marketCandles = candles["ETH-USD"];
    const resolutionCandles = marketCandles?.["1MIN"];

    expect(resolutionCandles).toBeDefined();
    // one new candle should have been added, one should have been updated
    expect(resolutionCandles?.length).toBe(9);

    // the last candle should be the one that was added
    const candle = resolutionCandles?.[resolutionCandles.length - 1];
    if (!candle) {
      throw new Error("Candle is undefined");
    }
    expect(candle.startedAtMilliseconds).toBe(1727275680000);
    expect(candle.low).toBe(2632.6);
    expect(candle.high).toBe(2632.6);
    expect(candle.open).toBe(2632.6);
    expect(candle.close).toBe(2632.6);
    expect(candle.baseTokenVolume).toBe(0);
    expect(candle.usdVolume).toBe(0);

    // the second to last candle should be the one that was updated
    const candle2 = resolutionCandles[resolutionCandles.length - 2];
    if (!candle2) {
      throw new Error("Candle2 is undefined");
    }
    expect(candle2.startedAtMilliseconds).toBe(1727275620000);
    expect(candle2.low).toBe(263.6);
    expect(candle2.high).toBe(263.6);
    expect(candle2.open).toBe(263.6);
    expect(candle2.close).toBe(263.6);
    expect(candle2.baseTokenVolume).toBe(0);
    expect(candle2.usdVolume).toBe(0);
  });
});
