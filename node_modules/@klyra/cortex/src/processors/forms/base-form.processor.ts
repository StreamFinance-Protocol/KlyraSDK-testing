import { type Store } from "../../core/store";
import { type BaseForm, type FormType } from "../../types/forms";

export abstract class BaseFormProcessor {
  protected store: Store;
  protected formType: FormType;

  constructor(store: Store, formType: FormType) {
    this.store = store;
    this.formType = formType;
  }

  public abstract processInput(fieldName: string, value: unknown): void;

  // public abstract generateSummary(): void;

  protected validateCommonInputs(_: object): void {
    // Common validation logic
  }

  protected calculateCommonResults(_: object): void {
    // Common calculation logic
  }

  protected getCurrentFormState(): BaseForm<unknown, unknown, unknown> {
    return this.store.getState().forms[this.formType];
  }
}
