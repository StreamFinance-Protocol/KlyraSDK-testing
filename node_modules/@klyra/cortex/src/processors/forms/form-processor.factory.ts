import { type Store } from "../../core/store";
import { FormType } from "../../types/forms";
import { TradeFormProcessor } from "./trade/trade-form.processor";
import { type BaseFormProcessor } from "./base-form.processor";

// Since we have multiple forms, we need to create a factory to get the correct processor
// When the user updates an input, we need to check what form they are on
// and then process the update through the correct processor
// The form processors are in charge of validating the inputs and updating the store
export class FormProcessorFactory {
  constructor(private store: Store) {}

  public getProcessor(formType: FormType): BaseFormProcessor {
    switch (formType) {
      case FormType.TRADE:
        return new TradeFormProcessor(this.store);
      // case "deposit":
      //   return new DepositFormProcessor(this.store);
      // case "withdraw":
      //   return new WithdrawFormProcessor(this.store);
      // case "transfer":
      //   return new TransferFormProcessor(this.store);
      // case "closePosition":
      //   return new ClosePositionFormProcessor(this.store);
      default:
        throw new Error("Unknown form type");
    }
  }
}
