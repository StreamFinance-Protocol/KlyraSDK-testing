import { type IndexerSubaccountTransfer } from "@klyra/shared";
import { type Store } from "../../core/store";
import { type SubaccountTransfer } from "../../types/accounts";
import { transform } from "../../utils/merge";

export class TransfersProcessor {
  private store: Store;

  constructor(store: Store) {
    this.store = store;
  }

  public process(
    existing: SubaccountTransfer[],
    payload: IndexerSubaccountTransfer[] | undefined
  ): SubaccountTransfer[] {
    if (!payload) return [];

    const newTransfers = payload.map((item) => {
      const id = item.transactionHash;
      return this.processTransfer(
        existing.find((transfer) => transfer.transactionHash === id),
        item
      );
    });

    return newTransfers;
  }

  private processTransfer(
    existing: SubaccountTransfer | undefined,
    newItem: IndexerSubaccountTransfer
  ): SubaccountTransfer {
    // TODO: review types for transform
    const modified = transform<SubaccountTransfer>(existing, newItem, {
      string: {
        id: "id",
        type: "type",
        symbol: "asset",
        fromAddress: "fromAddress",
        toAddress: "toAddress",
        senderWallet: "fromAddress",
        recipientWallet: "toAddress",
        transactionHash: "transactionHash",
      },
      number: {
        size: "amount",
        createdAtHeight: "updatedAtBlock",
      },
    });

    const { sender, recipient } = newItem;

    modified.fromAddress = sender.address;
    modified.toAddress = recipient.address;

    if (!modified.id) {
      modified.id = newItem.transactionHash;
    }

    return modified;
  }
}
