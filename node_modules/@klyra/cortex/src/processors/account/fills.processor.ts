import { type IndexerSubaccountFill } from "@klyra/shared";
import { type Store } from "../../core/store";
import { type SubaccountFill } from "../../types/accounts";
import {
  convertIndexerLiquidity,
  convertIndexerOrderSide,
  convertIndexerOrderType,
  getMarginModeFromSubaccount,
} from "../../utils/indexer-conversion";

export class FillsProcessor {
  private store: Store;

  constructor(store: Store) {
    this.store = store;
  }

  public process(
    existing: SubaccountFill[],
    payload: IndexerSubaccountFill[] | undefined,
    subaccountNumber: number
  ): SubaccountFill[] {
    if (!payload) return [];

    const newFills = payload.map((fill) =>
      this.processFill(fill, subaccountNumber)
    );

    const result = new Set([...existing, ...newFills]);
    const resultsArray = Array.from(result).filter(
      (fill): fill is SubaccountFill => fill !== null
    );

    return resultsArray;
  }

  private processFill(
    fill: IndexerSubaccountFill,
    subaccountNumber: number
  ): SubaccountFill | null {
    if (!fill.id) return null;

    return {
      id: fill.id,
      marketId: fill.ticker,
      orderId: fill.orderId,
      subaccountNumber,
      marginMode: getMarginModeFromSubaccount(subaccountNumber),
      side: convertIndexerOrderSide(fill.side),
      type: convertIndexerOrderType(fill.type),
      liquidity: convertIndexerLiquidity(fill.liquidity),
      price: Number(fill.price),
      size: Number(fill.size),
      fee: Number(fill.fee),
      createdAtMilliseconds: new Date(fill.createdAt).getTime(),
    };
  }
}
