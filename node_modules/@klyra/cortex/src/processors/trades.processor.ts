import {
  type IndexerTrade,
  type IndexerTradeBatchUpdateMessage,
  type IndexerTradeSubscribedMessage,
} from "@klyra/shared";
import { type Store } from "../core/store";
import { type MarketTrade } from "../types/markets";
import { transform } from "../utils/merge";
import { type BaseProcessor } from "./base.processor";

export class TradesProcessor implements BaseProcessor {
  // TODO: make this configurable
  private readonly TRADES_LIMIT = 100;
  private store: Store;

  constructor(store: Store) {
    this.store = store;
  }

  public processSubscribed(msg: IndexerTradeSubscribedMessage): void {
    const newMarketTrades: MarketTrade[] = [];

    for (const payload of msg.contents.trades) {
      const newTrade = this.processTrade(payload);
      if (newTrade) newMarketTrades.push(newTrade);
    }

    const marketId = msg.id!;
    this.updateMarketTrades(marketId, newMarketTrades);
  }

  public processBatchUpdate(msg: IndexerTradeBatchUpdateMessage): void {
    const newMarketTrades: MarketTrade[] = [];

    for (const array of msg.contents) {
      for (const payload of array.trades) {
        const newTrade = this.processTrade(payload);
        if (newTrade) newMarketTrades.push(newTrade);
      }
    }

    const marketId = msg.id!;
    this.updateMarketTrades(marketId, newMarketTrades);
  }

  private processTrade(payload: IndexerTrade): MarketTrade | null {
    const newTrade = transform<MarketTrade>(undefined, payload, {
      number: {
        price: "price",
        size: "size",
      },
      string: {
        id: "id",
        side: "side",
        type: "type",
      },
      datetime: {
        createdAt: "timestamp",
      },
    });

    return newTrade;
  }

  private updateMarketTrades(marketId: string, newTrades: MarketTrade[]): void {
    const existingTrades = this.store.getState().trades;

    const existingMarketTrades = existingTrades[marketId] ?? [];
    const updatedMarketTrades = [...existingMarketTrades, ...newTrades];
    const limitedMarketTrades = updatedMarketTrades.slice(-this.TRADES_LIMIT);

    this.store.setState({
      trades: {
        ...existingTrades,
        [marketId]: limitedMarketTrades,
      },
    });
  }
}
