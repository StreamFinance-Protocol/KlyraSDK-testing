import { z } from "zod";
import { OrderSide } from "@klyra/shared";
import { type TradeFormInputs, TradeFormType } from "../types/forms";
import { MarginMode } from "../types/accounts";

const tradeFormBaseSchema = z.object({
  type: z.nativeEnum(TradeFormType),
  marketId: z.string().min(1, "Market ID is required"),
  side: z.nativeEnum(OrderSide),
  baseSize: z.number().min(0, "Base size must be greater than 0"),
  quoteSize: z.number().min(0, "Quote size must be greater than 0"),
  marginMode: z.nativeEnum(MarginMode),
});

const marketTradeFormSchema = tradeFormBaseSchema.extend({
  type: z.literal(TradeFormType.MARKET),
});

const limitTradeFormSchema = tradeFormBaseSchema.extend({
  type: z.literal(TradeFormType.LIMIT),
  price: z.number().min(0, "Price must be greater than 0"),
});

const stopLimitTradeFormSchema = tradeFormBaseSchema.extend({
  type: z.literal(TradeFormType.STOP_LIMIT),
  price: z.number().min(0, "Price must be greater than 0"),
  triggerPrice: z.number().min(0, "Trigger price must be greater than 0"),
});

const takeProfitLimitTradeFormSchema = tradeFormBaseSchema.extend({
  type: z.literal(TradeFormType.TAKE_PROFIT_LIMIT),
  price: z.number().min(0, "Price must be greater than 0"),
  triggerPrice: z.number().min(0, "Trigger price must be greater than 0"),
});

const stopMarketTradeFormSchema = tradeFormBaseSchema.extend({
  type: z.literal(TradeFormType.STOP_MARKET),
  triggerPrice: z.number().min(0, "Trigger price must be greater than 0"),
});

const takeProfitMarketTradeFormSchema = tradeFormBaseSchema.extend({
  type: z.literal(TradeFormType.TAKE_PROFIT_MARKET),
  triggerPrice: z.number().min(0, "Trigger price must be greater than 0"),
});

export const tradeFormSchemas = {
  [TradeFormType.MARKET]: marketTradeFormSchema,
  [TradeFormType.LIMIT]: limitTradeFormSchema,
  [TradeFormType.STOP_LIMIT]: stopLimitTradeFormSchema,
  [TradeFormType.TAKE_PROFIT_LIMIT]: takeProfitLimitTradeFormSchema,
  [TradeFormType.STOP_MARKET]: stopMarketTradeFormSchema,
  [TradeFormType.TAKE_PROFIT_MARKET]: takeProfitMarketTradeFormSchema,
};

export const validateTradeForm = (
  form: TradeFormInputs
): z.SafeParseReturnType<unknown, TradeFormInputs> => {
  const schema = tradeFormSchemas[form.type];
  return schema.safeParse(form);
};
