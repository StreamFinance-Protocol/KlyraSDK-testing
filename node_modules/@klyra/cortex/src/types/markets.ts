import { type OrderSide, type OrderType } from "@klyra/shared";

export interface PerpetualMarketStatus {
  canTrade: boolean;
  canReduce: boolean;
}

export enum PerpetualMarketType {
  CROSS = "CROSS",
  ISOLATED = "ISOLATED",
}

export interface MarketConfigs {
  clobPairId: number;
  largeSize: number;
  stepSize: number;
  tickSize: number;
  stepSizeDecimals: number;
  tickSizeDecimals: number;
  displayStepSize: number;
  displayTickSize: number;
  displayStepSizeDecimals: number;
  displayTickSizeDecimals: number;
  effectiveInitialMarginFraction: number;
  minOrderSize: number;
  initialMarginFraction: number;
  maintenanceMarginFraction: number;
  maxPositionSize: number;
  basePositionNotional: number;
  baselinePositionSize: number;
  atomicResolution: number;
  stepBaseQuantums: number;
  quantumConversionExponent: number;
  subticksPerTick: number;
  candleOptions: CandleOption[];
  perpetualMarketType: PerpetualMarketType;
}

export interface MarketHistoricalFunding {
  rate: number;
  price: number;
  effectiveAtMilliseconds: number;
}

export interface PerpetualMarketInfo {
  volume24H: number;
  trades24H: number;
  volume24HUSDC: number;
  nextFundingRate: number;
  nextFundingAtMilliseconds: number;
  openInterest: number;
  openInterestUSDC: number;
  openInterestLowerCap: number;
  openInterestUpperCap: number;
  line: number[];
}

export interface CandleOption {
  value: string;
  seconds: number;
}

export interface MarketCandle {
  startedAtMilliseconds: number;
  updatedAtMilliseconds: number;
  low: number;
  high: number;
  open: number;
  close: number;
  trades: number;
  baseTokenVolume: number;
  usdVolume: number;
}

export interface MarketTrade {
  id: string;
  side: OrderSide;
  size: number;
  price: number;
  type: OrderType;
  timestamp: number;
}

export interface OrderbookLine {
  size: number;
  sizeCost: number;
  price: number;
  offset: number;
  depth: number;
}

export interface MarketOrderbook {
  midPrice: number | null;
  spreadPercent: number | null;
  spread: number | null;
  asks: OrderbookLine[];
  bids: OrderbookLine[];
}

export interface Market {
  id: string;
  assetId: string;
  market: string;
  spotPrice: number;
  pnlPrice: number;
  marketCaps: number;
  priceChange24H: number;
  priceChange24HPercent: number | null;
  status: PerpetualMarketStatus;
  configs: MarketConfigs;
  perpetual: PerpetualMarketInfo;
}
