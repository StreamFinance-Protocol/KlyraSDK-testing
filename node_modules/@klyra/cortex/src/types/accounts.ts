import {
  type OrderSide,
  type OrderStatus,
  type OrderTimeInForce,
  type OrderType,
} from "@klyra/shared";

export enum MarginMode {
  CROSS = "CROSS",
  ISOLATED = "ISOLATED",
}

export interface Account {
  balances: Record<string, AccountBalance>;
  subaccounts: Record<number, Subaccount>;
}

export interface AccountBalance {
  denom: string;
  amount: string;
}

export interface AssetPosition {
  id: string;
  assetId: string;
  size: number;
}

export interface Subaccount {
  subaccountNumber: number;
  positionId?: string;
  pnlTotal?: number;
  pnl24h?: number;
  pnl24hPercent?: number;
  quoteBalance?: number;
  notionalTotal?: number;
  valueTotal?: number;
  initialRiskTotal?: number;
  adjustedImf?: number;
  equity?: number;
  freeCollateral?: number;
  leverage?: number;
  marginUsage?: number;
  buyingPower?: number;
  openPositions?: Record<string, SubaccountPosition>;
  pendingPositions?: SubaccountPendingPosition[];
  orders?: SubaccountOrder[];
  marginEnabled?: boolean;
  fills?: SubaccountFill[];
  transfers?: SubaccountTransfer[];
  positions?: Record<string, SubaccountPosition>;
  historicalPnls?: SubaccountHistoricalPNL[];
  address?: string;
  updatedAtHeight?: string;
  latestProcessedBlockHeight?: string;
  assetPositions?: AssetPosition[];
}

export interface SubaccountFill {
  id: string;
  marketId: string;
  orderId?: string;
  subaccountNumber?: number;
  marginMode?: MarginMode;
  side: OrderSide;
  type: OrderType;
  liquidity: FillLiquidity;
  price: number;
  size: number;
  fee?: number;
  createdAtMilliseconds: number;
}

export enum FillLiquidity {
  MAKER = "MAKER",
  TAKER = "TAKER",
}

export interface SubaccountFundingPayment {
  marketId: string;
  payment: number;
  rate: number;
  positionSize: number;
  price?: number;
  effectiveAtMilliseconds: number;
}

interface SubaccountHistoricalPNL {
  equity: number;
  totalPnl: number;
  netTransfers: number;
  createdAtMilliseconds: number;
}

export interface SubaccountOrder {
  subaccountNumber?: number;
  id: string;
  assetId?: string | null;
  clientId?: number;
  type: OrderType;
  side: OrderSide;
  status: OrderStatus;
  timeInForce?: OrderTimeInForce;
  marketId: string;
  clobPairId?: number;
  orderFlags?: number;
  price: number;
  triggerPrice?: number;
  trailingPercent?: number;
  size: number;
  remainingSize?: number;
  totalFilled?: number;
  goodTilBlock?: number;
  goodTilBlockTime?: number;
  createdAtHeight?: number;
  createdAtMilliseconds?: number;
  unfillableAtMilliseconds?: number;
  expiresAtMilliseconds?: number;
  updatedAtMilliseconds?: number;
  postOnly: boolean;
  reduceOnly: boolean;
  cancelReason?: string;
  marginMode?: MarginMode;
}

interface SubaccountPendingPosition {
  assetId: string;
  marketId: string;
  firstOrderId: string;
  orderCount: number;
  freeCollateral?: number;
  quoteBalance?: number;
  equity?: number;
}

export enum PositionSide {
  LONG = "LONG",
  SHORT = "SHORT",
  NONE = "NONE",
}

export interface SubaccountPosition {
  id: string;
  assetId: string;
  side: PositionSide | null;
  entryPrice: number | null;
  exitPrice?: number;
  createdAtMilliseconds?: number;
  closedAtMilliseconds?: number;
  netFunding?: number;
  realizedPnl?: number | null;
  realizedPnlPercent?: number | null;
  unrealizedPnl?: number | null;
  unrealizedPnlPercent?: number | null;
  size?: number | null;
  notionalTotal?: number | null;
  valueTotal?: number | null;
  initialRiskTotal?: number | null;
  adjustedImf?: number | null;
  adjustedMmf?: number | null;
  leverage?: number | null;
  maxLeverage?: number | null;
  buyingPower?: number | null;
  liquidationPrice?: number | null;
  childSubaccountNumber?: number;
  freeCollateral?: number | null;
  marginUsage?: number | null;
  quoteBalance?: number | null;
  equity?: number | null;
  marginMode?: MarginMode;
  marginValue?: number | null;
}

export interface SubaccountTransfer {
  id: string;
  type: TransferRecordType;
  asset?: string;
  amount?: number;
  updatedAtBlock?: number;
  updatedAtMilliseconds: number;
  fromAddress?: string;
  toAddress?: string;
  transactionHash?: string;
}

enum TransferRecordType {
  DEPOSIT = "DEPOSIT",
  WITHDRAW = "WITHDRAW",
  TRANSFER_IN = "TRANSFER_IN",
  TRANSFER_OUT = "TRANSFER_OUT",
}

export interface FeeTierInfo {
  feeTierId: string;
  makerFeeRate: number;
  takerFeeRate: number;
  makerVolume30D: number;
  takerVolume30D: number;
}
