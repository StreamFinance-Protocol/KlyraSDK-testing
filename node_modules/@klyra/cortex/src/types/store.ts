import { type LocalWallet } from "@klyra/chain";
import { type Account, type FeeTierInfo } from "./accounts";
import {
  type TradeForm,
  type DepositForm,
  type WithdrawForm,
  type TransferForm,
  type ClosePositionForm,
  type FormType,
} from "./forms";
import {
  type Market,
  type MarketCandle,
  type MarketHistoricalFunding,
  type MarketOrderbook,
  type MarketTrade,
} from "./markets";

export interface StoreState {
  user: {
    address: string | null;
    account: Account;
    feeTier: FeeTierInfo;
    wallet: LocalWallet | null;
    subaccountNumber: number;
  };

  markets: Record<string, Market>; // the key is the marketId
  candles: Record<string, Record<string, MarketCandle[]>>; // the key is the marketId, the second key is the resolution (1D, 1H, 5S, etc.)
  orderbooks: Record<string, MarketOrderbook>; // the key is the marketId
  historicalFundings: Record<string, MarketHistoricalFunding[]>; // the key is the marketId
  trades: Record<string, MarketTrade[]>; // the key is the marketId

  chartConfigs: {
    resolution: string;
  };

  forms: {
    [FormType.TRADE]: TradeForm;
    [FormType.DEPOSIT]: DepositForm;
    [FormType.WITHDRAW]: WithdrawForm;
    [FormType.TRANSFER]: TransferForm;
    [FormType.CLOSE_POSITION]: ClosePositionForm;
  };

  currentMarketTicker: string | undefined;
}

export type StateChangeListener = (state: StoreState) => void;
