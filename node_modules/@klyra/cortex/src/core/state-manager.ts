import { type WebSocketMessage } from "@klyra/shared";
import { type LocalWallet } from "@klyra/chain";
import { type StateManagerConfig } from "../types/core";
import { MessageProcessor } from "../processors/message.processor";
import { FormProcessorFactory } from "../processors/forms/form-processor.factory";
import { type FormType } from "../types/forms";
import { type StoreState, type StateChangeListener } from "../types/store";
import { Store } from "./store";

export class StateManager {
  private messageProcessor: MessageProcessor;
  private formProcessorFactory: FormProcessorFactory;
  private store: Store;

  constructor(config: StateManagerConfig) {
    this.store = new Store({
      currentMarketTicker: config.defaultMarketTicker,
    });
    this.messageProcessor = new MessageProcessor(this.store);
    this.formProcessorFactory = new FormProcessorFactory(this.store);
  }

  public setCurrentMarketTicker(marketId: string): void {
    this.store.setState({
      currentMarketTicker: marketId,
    });
  }

  public handleMessage = (message: WebSocketMessage<unknown>): void => {
    this.messageProcessor.process(message);
  };

  public subscribeToState(listener: StateChangeListener): () => void {
    return this.store.subscribe(listener);
  }

  public getState(): StoreState {
    return this.store.getState();
  }

  public formInput(
    formType: FormType,
    fieldName: string,
    value: unknown
  ): void {
    const formProcessor = this.formProcessorFactory.getProcessor(formType);
    formProcessor.processInput(fieldName, value);
  }

  public setAddress(address: string): void {
    const current = this.getState().user;

    this.store.setState({
      user: {
        ...current,
        address,
      },
    });
  }

  public setSubaccountNumber(subaccountNumber: number): void {
    const current = this.getState().user;

    this.store.setState({
      user: { ...current, subaccountNumber },
    });
  }

  public setWalletInfo(localWallet: LocalWallet): void {
    const current = this.getState().user;

    this.store.setState({
      user: {
        ...current,
        wallet: localWallet,
      },
    });
  }
}
