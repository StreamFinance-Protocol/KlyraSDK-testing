import { EventEmitter } from "@klyra/shared";
import { DEFAULT_TRADE_FORM_STATE } from "../processors/forms/trade/values";
import { FormType } from "../types/forms";
import { type StoreState, type StateChangeListener } from "../types/store";

// TODO: add chain info (block height)
const DEFAULT_STATE: StoreState = {
  forms: {
    [FormType.TRADE]: DEFAULT_TRADE_FORM_STATE,
    [FormType.DEPOSIT]: {
      inputs: {
        amount: 0,
        assetId: "",
      },
      postResults: {},
      errors: {},
      summary: null,
      options: null,
    },
    [FormType.WITHDRAW]: {
      inputs: {
        amount: 0,
        assetId: "",
      },
      postResults: {},
      errors: {},
      summary: null,
      options: null,
    },
    [FormType.TRANSFER]: {
      inputs: {
        amount: 0,
        assetId: "",
      },
      postResults: {},
      errors: {},
      summary: null,
      options: null,
    },
    [FormType.CLOSE_POSITION]: {
      inputs: {
        amount: 0,
        assetId: "",
      },
      postResults: {},
      errors: {},
      summary: null,
      options: null,
    },
  },
  user: {
    wallet: null,
    account: {
      subaccounts: {},
      balances: {},
    },
    feeTier: {
      feeTierId: "",
      makerFeeRate: 0,
      takerFeeRate: 0,
      makerVolume30D: 0,
      takerVolume30D: 0,
    },
    address: null,
    subaccountNumber: 0,
  },
  markets: {},
  candles: {},
  orderbooks: {},
  historicalFundings: {},
  trades: {},

  chartConfigs: {
    resolution: "",
  },

  currentMarketTicker: undefined,
};

export class Store {
  private state: StoreState;
  private eventEmitter: EventEmitter<[StoreState, StoreState | null]>;

  constructor(initialState: Partial<StoreState> = {}) {
    this.state = { ...DEFAULT_STATE, ...initialState };
    this.eventEmitter = new EventEmitter();
  }

  getState(): StoreState {
    return this.state;
  }

  setState(newState: Partial<StoreState>): void {
    const oldState = this.state;
    this.state = { ...this.state, ...newState };
    this.eventEmitter.emit("stateChange", this.state, oldState);
  }

  subscribe(listener: StateChangeListener): () => void {
    this.eventEmitter.on("stateChange", listener);

    return () => {
      this.eventEmitter.off("stateChange", listener);
    };
  }

  select<T>(selector: (state: StoreState) => T): T {
    return selector(this.state);
  }

  resetState(newState: Partial<StoreState> = {}): void {
    this.state = { ...DEFAULT_STATE, ...newState } as StoreState;
    this.eventEmitter.emit("stateChange", this.state, null);
  }
}
