export enum RoundingMode {
  TOWARDS_ZERO,
  NEAREST,
}

const cache: Record<number, number> = {};

export function quickRound(number: number, stepSize: number): number {
  const stepSizeDecimals = numberOfDecimals(stepSize);
  const negative = number < 0.0;
  const multiplier = (Math.abs(number) / stepSize).toFixed(0);
  const absValue =
    stepSizeDecimals > 0
      ? parseFloat(
          `${multiplier.padEnd(stepSizeDecimals + 1, "0")}.${multiplier.slice(-stepSizeDecimals)}`
        )
      : parseFloat(multiplier);
  return absValue * (negative ? -1 : 1);
}

export function numberOfDecimals(stepSize: number): number {
  const cached = cache[stepSize];
  if (cached) return cached;
  const stepSizeDecimals = stepSize.toFixed(0).split(".")[1]?.length ?? 0;
  cache[stepSize] = stepSizeDecimals;
  return stepSizeDecimals;
}
export function round(
  number: number,
  stepSize: number,
  roundingMode: RoundingMode = RoundingMode.TOWARDS_ZERO
): number {
  const roundedDecimal = roundDecimal(number, stepSize, roundingMode);
  return roundedDecimal;
}

export function roundDecimal(
  number: number,
  stepSize: number,
  roundingMode: RoundingMode = RoundingMode.TOWARDS_ZERO
): number {
  if (stepSize <= 0) return number;

  let modifier = 0;
  if (roundingMode !== RoundingMode.TOWARDS_ZERO) {
    modifier = number >= 0 ? 0.5 : -0.5;
  }

  const long = (number / stepSize + modifier).toFixed(0);
  return stepSize * Number(long);
}
