import {
  IndexerFillType,
  IndexerLiquidity,
  IndexerOrderSide,
  IndexerOrderStatus,
  type IndexerOrderType,
  IndexerPositionSide,
  IndexerTimeInForce,
  OrderSide,
  type OrderStatus,
  OrderStatusEnum,
  OrderTimeInForce,
  OrderType,
} from "@klyra/shared";
import { NUM_PARENT_SUBACCOUNTS } from "@klyra/shared";
import { FillLiquidity, MarginMode, PositionSide } from "../types/accounts";
import { getOrderStatusFromEnum } from "./order-status";

export function convertIndexerOrderType(
  type: IndexerFillType | IndexerOrderType
): OrderType {
  // TODO: check if the order types are correct
  switch (type) {
    case IndexerFillType.LIMIT:
      return OrderType.LIMIT;
    case IndexerFillType.LIQUIDATED:
      return OrderType.LIQUIDATED;
    case IndexerFillType.LIQUIDATION:
      return OrderType.LIQUIDATION;
    default:
      return OrderType.LIMIT;
  }
}

export function convertIndexerLiquidity(
  liquidity: IndexerLiquidity
): FillLiquidity {
  if (liquidity === IndexerLiquidity.MAKER) {
    return FillLiquidity.MAKER;
  }

  return FillLiquidity.TAKER;
}

export function convertIndexerOrderStatus(
  status: IndexerOrderStatus
): OrderStatus {
  if (status === IndexerOrderStatus.BEST_EFFORT_OPENED) {
    return getOrderStatusFromEnum(OrderStatusEnum.PENDING);
  }

  const value = status as unknown as OrderStatusEnum;
  return getOrderStatusFromEnum(value);
}

export function convertIndexerTimeInForce(
  timeInForce: IndexerTimeInForce
): OrderTimeInForce | null {
  if (timeInForce === IndexerTimeInForce.GTT) {
    return OrderTimeInForce.GTT;
  }

  if (timeInForce === IndexerTimeInForce.IOC) {
    return OrderTimeInForce.IOC;
  }

  return null;
}

export function convertIndexerOrderSide(side: IndexerOrderSide): OrderSide {
  return side === IndexerOrderSide.BUY ? OrderSide.BUY : OrderSide.SELL;
}

export function convertIndexerPositionSide(
  side: IndexerPositionSide
): PositionSide {
  return side === IndexerPositionSide.LONG
    ? PositionSide.LONG
    : PositionSide.SHORT;
}

export function getMarginModeFromSubaccount(
  subaccountNumber: number
): MarginMode {
  return subaccountNumber >= NUM_PARENT_SUBACCOUNTS
    ? MarginMode.ISOLATED
    : MarginMode.CROSS;
}
