import { OrderSide } from "@klyra/shared";

const isDefined = (value: unknown): boolean =>
  value !== null && typeof value !== "undefined";
const isNumber = (value: unknown): boolean =>
  typeof value === "number" && !isNaN(value);
const isString = (value: unknown): boolean =>
  typeof value === "string" && value.length > 0;
const isBoolean = (value: unknown): boolean => typeof value === "boolean";
const isEnum = (
  value: unknown,
  enumType: Record<string, unknown> | ArrayLike<unknown>
): boolean => Object.values(enumType).includes(value);
const fieldValidations = {
  subaccount: isDefined,
  ticker: isString,
  side: (side: OrderSide) => isEnum(side, OrderSide),
  price: isNumber,
  triggerPrice: isNumber,
  size: isNumber,
  reduceOnly: isBoolean,
  goodTilBlock: isNumber,
  goodTilTime: isNumber,
  clientId: isNumber,
  recipientSubaccountNumber: isNumber,
  recipientAddress: isString,
  amount: isString,
};

type FieldValidationKeys = keyof typeof fieldValidations;
type ValidateFieldsArgs = {
  [key in FieldValidationKeys]?: unknown;
};

export const validateFields = (args: ValidateFieldsArgs): boolean => {
  const responses = Object.entries(args).map(([key, value]) =>
    fieldValidations[key as FieldValidationKeys](value as never)
  );

  return responses.every((response) => response);
};
