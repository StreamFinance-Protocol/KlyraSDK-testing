import { Order_TimeInForce } from "@klyra/proto/src/codegen/klyraprotocol/clob/order";
import {
  type ChainClient,
  type SubaccountInfo,
  type WalletSubaccountInfo,
  type TxResponsePromise,
} from "@klyra/chain";
import { type TradeFormInputsUnion } from "@klyra/cortex";
import { OrderSide } from "@klyra/shared";
import { getRandomClientId } from "./utils";
import { SHORT_TERM_ORDER_GTB } from "./constants";

export async function internalPlaceMarketOrderWithCortex(
  chainClient: ChainClient,
  tradeInputs: TradeFormInputsUnion,
  subaccount: WalletSubaccountInfo,
  orderBookPrice: number,
  currentBlock: number,
  routerFeePpm?: number,
  routerSubaccount?: SubaccountInfo
): TxResponsePromise {
  return chainClient.placeShortTermOrder(
    subaccount,
    tradeInputs.marketId,
    tradeInputs.side,
    getAdjustedMarketOrderPrice(orderBookPrice, tradeInputs.side),
    tradeInputs.quoteSize,
    getRandomClientId(),
    getAdjustedGoodTillBlock(currentBlock),
    Order_TimeInForce.UNRECOGNIZED,
    tradeInputs.reduceOnly ?? false,
    routerFeePpm,
    routerSubaccount
  );
}

export async function internalPlaceMarketOrder(
  chainClient: ChainClient,
  subaccount: WalletSubaccountInfo,
  ticker: string,
  side: OrderSide,
  orderBookPrice: number,
  size: number,
  reduceOnly: boolean,
  currentBlock: number,
  clientId?: number,
  routerFeePpm?: number,
  routerSubaccount?: SubaccountInfo,
  memo?: string
): TxResponsePromise {
  return await chainClient.placeShortTermOrder(
    subaccount,
    ticker,
    side,
    getAdjustedMarketOrderPrice(orderBookPrice, side),
    size,
    clientId ?? getRandomClientId(),
    getAdjustedGoodTillBlock(currentBlock),
    Order_TimeInForce.TIME_IN_FORCE_IOC,
    reduceOnly,
    routerFeePpm,
    routerSubaccount,
    memo
  );
}

function getAdjustedMarketOrderPrice(
  orderBookPrice: number,
  side: OrderSide
): number {
  if (side === OrderSide.BUY) {
    return orderBookPrice * 1.05;
  }

  return orderBookPrice * 0.95;
}

function getAdjustedGoodTillBlock(currentBlock: number): number {
  return currentBlock + SHORT_TERM_ORDER_GTB;
}
