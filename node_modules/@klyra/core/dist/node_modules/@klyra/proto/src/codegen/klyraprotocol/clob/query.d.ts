import { PageRequest, PageRequestSDKType, PageResponse, PageResponseSDKType } from "../../cosmos/base/query/v1beta1/pagination";
import { ValidatorMevMatches, ValidatorMevMatchesSDKType, MevNodeToNodeMetrics, MevNodeToNodeMetricsSDKType } from "./mev";
import { ClobPair, ClobPairSDKType } from "./clob_pair";
import { EquityTierLimitConfiguration, EquityTierLimitConfigurationSDKType } from "./equity_tier_limit_config";
import { BlockRateLimitConfiguration, BlockRateLimitConfigurationSDKType } from "./block_rate_limit_config";
import { LiquidationsConfig, LiquidationsConfigSDKType } from "./liquidations_config";
import { OffChainUpdateV1, OffChainUpdateV1SDKType } from "../indexer/off_chain_updates/off_chain_updates";
import * as _m0 from "protobufjs/minimal";
import { DeepPartial, Long } from "../../helpers";
/** QueryGetClobPairRequest is request type for the ClobPair method. */
export interface QueryGetClobPairRequest {
    /** QueryGetClobPairRequest is request type for the ClobPair method. */
    id: number;
}
/** QueryGetClobPairRequest is request type for the ClobPair method. */
export interface QueryGetClobPairRequestSDKType {
    id: number;
}
/** QueryClobPairResponse is response type for the ClobPair method. */
export interface QueryClobPairResponse {
    clobPair?: ClobPair;
}
/** QueryClobPairResponse is response type for the ClobPair method. */
export interface QueryClobPairResponseSDKType {
    clob_pair?: ClobPairSDKType;
}
/** QueryAllClobPairRequest is request type for the ClobPairAll method. */
export interface QueryAllClobPairRequest {
    pagination?: PageRequest;
}
/** QueryAllClobPairRequest is request type for the ClobPairAll method. */
export interface QueryAllClobPairRequestSDKType {
    pagination?: PageRequestSDKType;
}
/** QueryClobPairAllResponse is response type for the ClobPairAll method. */
export interface QueryClobPairAllResponse {
    clobPair: ClobPair[];
    pagination?: PageResponse;
}
/** QueryClobPairAllResponse is response type for the ClobPairAll method. */
export interface QueryClobPairAllResponseSDKType {
    clob_pair: ClobPairSDKType[];
    pagination?: PageResponseSDKType;
}
/**
 * MevNodeToNodeCalculationRequest is a request message used to run the
 * MEV node <> node calculation.
 */
export interface MevNodeToNodeCalculationRequest {
    /**
     * Represents the matches on the "block proposer". Note that this field
     * does not need to be the actual block proposer's matches for a block, since
     * the MEV calculation logic is run with this nodes matches as the "block
     * proposer" matches.
     */
    blockProposerMatches?: ValidatorMevMatches;
    /** Represents the matches and mid-prices on the validator. */
    validatorMevMetrics?: MevNodeToNodeMetrics;
}
/**
 * MevNodeToNodeCalculationRequest is a request message used to run the
 * MEV node <> node calculation.
 */
export interface MevNodeToNodeCalculationRequestSDKType {
    block_proposer_matches?: ValidatorMevMatchesSDKType;
    validator_mev_metrics?: MevNodeToNodeMetricsSDKType;
}
/**
 * MevNodeToNodeCalculationResponse is a response message that contains the
 * MEV node <> node calculation result.
 */
export interface MevNodeToNodeCalculationResponse {
    results: MevNodeToNodeCalculationResponse_MevAndVolumePerClob[];
}
/**
 * MevNodeToNodeCalculationResponse is a response message that contains the
 * MEV node <> node calculation result.
 */
export interface MevNodeToNodeCalculationResponseSDKType {
    results: MevNodeToNodeCalculationResponse_MevAndVolumePerClobSDKType[];
}
/** MevAndVolumePerClob contains information about the MEV and volume per CLOB. */
export interface MevNodeToNodeCalculationResponse_MevAndVolumePerClob {
    clobPairId: number;
    mev: number;
    volume: Long;
}
/** MevAndVolumePerClob contains information about the MEV and volume per CLOB. */
export interface MevNodeToNodeCalculationResponse_MevAndVolumePerClobSDKType {
    clob_pair_id: number;
    mev: number;
    volume: Long;
}
/**
 * QueryEquityTierLimitConfigurationRequest is a request message for
 * EquityTierLimitConfiguration.
 */
export interface QueryEquityTierLimitConfigurationRequest {
}
/**
 * QueryEquityTierLimitConfigurationRequest is a request message for
 * EquityTierLimitConfiguration.
 */
export interface QueryEquityTierLimitConfigurationRequestSDKType {
}
/**
 * QueryEquityTierLimitConfigurationResponse is a response message that contains
 * the EquityTierLimitConfiguration.
 */
export interface QueryEquityTierLimitConfigurationResponse {
    equityTierLimitConfig?: EquityTierLimitConfiguration;
}
/**
 * QueryEquityTierLimitConfigurationResponse is a response message that contains
 * the EquityTierLimitConfiguration.
 */
export interface QueryEquityTierLimitConfigurationResponseSDKType {
    equity_tier_limit_config?: EquityTierLimitConfigurationSDKType;
}
/**
 * QueryBlockRateLimitConfigurationRequest is a request message for
 * BlockRateLimitConfiguration.
 */
export interface QueryBlockRateLimitConfigurationRequest {
}
/**
 * QueryBlockRateLimitConfigurationRequest is a request message for
 * BlockRateLimitConfiguration.
 */
export interface QueryBlockRateLimitConfigurationRequestSDKType {
}
/**
 * QueryBlockRateLimitConfigurationResponse is a response message that contains
 * the BlockRateLimitConfiguration.
 */
export interface QueryBlockRateLimitConfigurationResponse {
    blockRateLimitConfig?: BlockRateLimitConfiguration;
}
/**
 * QueryBlockRateLimitConfigurationResponse is a response message that contains
 * the BlockRateLimitConfiguration.
 */
export interface QueryBlockRateLimitConfigurationResponseSDKType {
    block_rate_limit_config?: BlockRateLimitConfigurationSDKType;
}
/**
 * QueryLiquidationsConfigurationRequest is a request message for
 * LiquidationsConfiguration.
 */
export interface QueryLiquidationsConfigurationRequest {
}
/**
 * QueryLiquidationsConfigurationRequest is a request message for
 * LiquidationsConfiguration.
 */
export interface QueryLiquidationsConfigurationRequestSDKType {
}
/**
 * QueryLiquidationsConfigurationResponse is a response message that contains
 * the LiquidationsConfiguration.
 */
export interface QueryLiquidationsConfigurationResponse {
    liquidationsConfig?: LiquidationsConfig;
}
/**
 * QueryLiquidationsConfigurationResponse is a response message that contains
 * the LiquidationsConfiguration.
 */
export interface QueryLiquidationsConfigurationResponseSDKType {
    liquidations_config?: LiquidationsConfigSDKType;
}
/**
 * StreamOrderbookUpdatesRequest is a request message for the
 * StreamOrderbookUpdates method.
 */
export interface StreamOrderbookUpdatesRequest {
    /** Clob pair ids to stream orderbook updates for. */
    clobPairId: number[];
}
/**
 * StreamOrderbookUpdatesRequest is a request message for the
 * StreamOrderbookUpdates method.
 */
export interface StreamOrderbookUpdatesRequestSDKType {
    clob_pair_id: number[];
}
/**
 * StreamOrderbookUpdatesResponse is a response message for the
 * StreamOrderbookUpdates method.
 */
export interface StreamOrderbookUpdatesResponse {
    /** Orderbook updates for the clob pair. */
    updates: OffChainUpdateV1[];
    /**
     * Snapshot indicates if the response is from a snapshot of the orderbook.
     * This is true for the initial response and false for all subsequent updates.
     * Note that if the snapshot is true, then all previous entries should be
     * discarded and the orderbook should be resynced.
     */
    snapshot: boolean;
    /**
     * ---Additional fields used to debug issues---
     * Block height of the updates.
     */
    blockHeight: number;
    /** Exec mode of the updates. */
    execMode: number;
}
/**
 * StreamOrderbookUpdatesResponse is a response message for the
 * StreamOrderbookUpdates method.
 */
export interface StreamOrderbookUpdatesResponseSDKType {
    updates: OffChainUpdateV1SDKType[];
    snapshot: boolean;
    block_height: number;
    exec_mode: number;
}
export declare const QueryGetClobPairRequest: {
    encode(message: QueryGetClobPairRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetClobPairRequest;
    fromPartial(object: DeepPartial<QueryGetClobPairRequest>): QueryGetClobPairRequest;
};
export declare const QueryClobPairResponse: {
    encode(message: QueryClobPairResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryClobPairResponse;
    fromPartial(object: DeepPartial<QueryClobPairResponse>): QueryClobPairResponse;
};
export declare const QueryAllClobPairRequest: {
    encode(message: QueryAllClobPairRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllClobPairRequest;
    fromPartial(object: DeepPartial<QueryAllClobPairRequest>): QueryAllClobPairRequest;
};
export declare const QueryClobPairAllResponse: {
    encode(message: QueryClobPairAllResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryClobPairAllResponse;
    fromPartial(object: DeepPartial<QueryClobPairAllResponse>): QueryClobPairAllResponse;
};
export declare const MevNodeToNodeCalculationRequest: {
    encode(message: MevNodeToNodeCalculationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MevNodeToNodeCalculationRequest;
    fromPartial(object: DeepPartial<MevNodeToNodeCalculationRequest>): MevNodeToNodeCalculationRequest;
};
export declare const MevNodeToNodeCalculationResponse: {
    encode(message: MevNodeToNodeCalculationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MevNodeToNodeCalculationResponse;
    fromPartial(object: DeepPartial<MevNodeToNodeCalculationResponse>): MevNodeToNodeCalculationResponse;
};
export declare const MevNodeToNodeCalculationResponse_MevAndVolumePerClob: {
    encode(message: MevNodeToNodeCalculationResponse_MevAndVolumePerClob, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MevNodeToNodeCalculationResponse_MevAndVolumePerClob;
    fromPartial(object: DeepPartial<MevNodeToNodeCalculationResponse_MevAndVolumePerClob>): MevNodeToNodeCalculationResponse_MevAndVolumePerClob;
};
export declare const QueryEquityTierLimitConfigurationRequest: {
    encode(_: QueryEquityTierLimitConfigurationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryEquityTierLimitConfigurationRequest;
    fromPartial(_: DeepPartial<QueryEquityTierLimitConfigurationRequest>): QueryEquityTierLimitConfigurationRequest;
};
export declare const QueryEquityTierLimitConfigurationResponse: {
    encode(message: QueryEquityTierLimitConfigurationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryEquityTierLimitConfigurationResponse;
    fromPartial(object: DeepPartial<QueryEquityTierLimitConfigurationResponse>): QueryEquityTierLimitConfigurationResponse;
};
export declare const QueryBlockRateLimitConfigurationRequest: {
    encode(_: QueryBlockRateLimitConfigurationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryBlockRateLimitConfigurationRequest;
    fromPartial(_: DeepPartial<QueryBlockRateLimitConfigurationRequest>): QueryBlockRateLimitConfigurationRequest;
};
export declare const QueryBlockRateLimitConfigurationResponse: {
    encode(message: QueryBlockRateLimitConfigurationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryBlockRateLimitConfigurationResponse;
    fromPartial(object: DeepPartial<QueryBlockRateLimitConfigurationResponse>): QueryBlockRateLimitConfigurationResponse;
};
export declare const QueryLiquidationsConfigurationRequest: {
    encode(_: QueryLiquidationsConfigurationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryLiquidationsConfigurationRequest;
    fromPartial(_: DeepPartial<QueryLiquidationsConfigurationRequest>): QueryLiquidationsConfigurationRequest;
};
export declare const QueryLiquidationsConfigurationResponse: {
    encode(message: QueryLiquidationsConfigurationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryLiquidationsConfigurationResponse;
    fromPartial(object: DeepPartial<QueryLiquidationsConfigurationResponse>): QueryLiquidationsConfigurationResponse;
};
export declare const StreamOrderbookUpdatesRequest: {
    encode(message: StreamOrderbookUpdatesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StreamOrderbookUpdatesRequest;
    fromPartial(object: DeepPartial<StreamOrderbookUpdatesRequest>): StreamOrderbookUpdatesRequest;
};
export declare const StreamOrderbookUpdatesResponse: {
    encode(message: StreamOrderbookUpdatesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StreamOrderbookUpdatesResponse;
    fromPartial(object: DeepPartial<StreamOrderbookUpdatesResponse>): StreamOrderbookUpdatesResponse;
};
