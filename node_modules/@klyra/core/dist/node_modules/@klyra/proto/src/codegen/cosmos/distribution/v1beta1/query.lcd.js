"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LCDQueryClient = void 0;
const helpers_1 = require("../../../helpers");
class LCDQueryClient {
    constructor({ requestClient }) {
        this.req = requestClient;
        this.params = this.params.bind(this);
        this.validatorDistributionInfo = this.validatorDistributionInfo.bind(this);
        this.validatorOutstandingRewards = this.validatorOutstandingRewards.bind(this);
        this.validatorCommission = this.validatorCommission.bind(this);
        this.validatorSlashes = this.validatorSlashes.bind(this);
        this.delegationRewards = this.delegationRewards.bind(this);
        this.delegationTotalRewards = this.delegationTotalRewards.bind(this);
        this.delegatorValidators = this.delegatorValidators.bind(this);
        this.delegatorWithdrawAddress = this.delegatorWithdrawAddress.bind(this);
        this.communityPool = this.communityPool.bind(this);
    }
    /* Params queries params of the distribution module. */
    async params(_params = {}) {
        const endpoint = `cosmos/distribution/v1beta1/params`;
        return await this.req.get(endpoint);
    }
    /* ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator */
    async validatorDistributionInfo(params) {
        const endpoint = `cosmos/distribution/v1beta1/validators/${params.validatorAddress}`;
        return await this.req.get(endpoint);
    }
    /* ValidatorOutstandingRewards queries rewards of a validator address. */
    async validatorOutstandingRewards(params) {
        const endpoint = `cosmos/distribution/v1beta1/validators/${params.validatorAddress}/outstanding_rewards`;
        return await this.req.get(endpoint);
    }
    /* ValidatorCommission queries accumulated commission for a validator. */
    async validatorCommission(params) {
        const endpoint = `cosmos/distribution/v1beta1/validators/${params.validatorAddress}/commission`;
        return await this.req.get(endpoint);
    }
    /* ValidatorSlashes queries slash events of a validator. */
    async validatorSlashes(params) {
        const options = {
            params: {}
        };
        if (typeof (params === null || params === void 0 ? void 0 : params.startingHeight) !== "undefined") {
            options.params.starting_height = params.startingHeight;
        }
        if (typeof (params === null || params === void 0 ? void 0 : params.endingHeight) !== "undefined") {
            options.params.ending_height = params.endingHeight;
        }
        if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/distribution/v1beta1/validators/${params.validatorAddress}/slashes`;
        return await this.req.get(endpoint, options);
    }
    /* DelegationRewards queries the total rewards accrued by a delegation. */
    async delegationRewards(params) {
        const endpoint = `cosmos/distribution/v1beta1/delegators/${params.delegatorAddress}/rewards/${params.validatorAddress}`;
        return await this.req.get(endpoint);
    }
    /* DelegationTotalRewards queries the total rewards accrued by each
     validator. */
    async delegationTotalRewards(params) {
        const endpoint = `cosmos/distribution/v1beta1/delegators/${params.delegatorAddress}/rewards`;
        return await this.req.get(endpoint);
    }
    /* DelegatorValidators queries the validators of a delegator. */
    async delegatorValidators(params) {
        const endpoint = `cosmos/distribution/v1beta1/delegators/${params.delegatorAddress}/validators`;
        return await this.req.get(endpoint);
    }
    /* DelegatorWithdrawAddress queries withdraw address of a delegator. */
    async delegatorWithdrawAddress(params) {
        const endpoint = `cosmos/distribution/v1beta1/delegators/${params.delegatorAddress}/withdraw_address`;
        return await this.req.get(endpoint);
    }
    /* CommunityPool queries the community pool coins. */
    async communityPool(_params = {}) {
        const endpoint = `cosmos/distribution/v1beta1/community_pool`;
        return await this.req.get(endpoint);
    }
}
exports.LCDQueryClient = LCDQueryClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkubGNkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BrbHlyYS9wcm90by9zcmMvY29kZWdlbi9jb3Ntb3MvZGlzdHJpYnV0aW9uL3YxYmV0YTEvcXVlcnkubGNkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUF1RDtBQUd2RCxNQUFhLGNBQWM7SUFHekIsWUFBWSxFQUNWLGFBQWEsRUFHZDtRQUNDLElBQUksQ0FBQyxHQUFHLEdBQUcsYUFBYSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLHdC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