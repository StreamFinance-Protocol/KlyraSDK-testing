"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.internalPlaceMarketOrderWithCortex = internalPlaceMarketOrderWithCortex;
exports.internalPlaceMarketOrder = internalPlaceMarketOrder;
const order_1 = require("@klyra/proto/src/codegen/klyraprotocol/clob/order");
const shared_1 = require("@klyra/shared");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
async function internalPlaceMarketOrderWithCortex(chainClient, tradeInputs, subaccount, orderBookPrice, currentBlock, routerFeePpm, routerSubaccount) {
    var _a;
    return chainClient.placeShortTermOrder(subaccount, tradeInputs.marketId, tradeInputs.side, getAdjustedMarketOrderPrice(orderBookPrice, tradeInputs.side), tradeInputs.quoteSize, (0, utils_1.getRandomClientId)(), getAdjustedGoodTillBlock(currentBlock), order_1.Order_TimeInForce.UNRECOGNIZED, (_a = tradeInputs.reduceOnly) !== null && _a !== void 0 ? _a : false, routerFeePpm, routerSubaccount);
}
async function internalPlaceMarketOrder(chainClient, subaccount, ticker, side, orderBookPrice, size, reduceOnly, currentBlock, clientId, routerFeePpm, routerSubaccount, memo) {
    return await chainClient.placeShortTermOrder(subaccount, ticker, side, getAdjustedMarketOrderPrice(orderBookPrice, side), size, clientId !== null && clientId !== void 0 ? clientId : (0, utils_1.getRandomClientId)(), getAdjustedGoodTillBlock(currentBlock), order_1.Order_TimeInForce.TIME_IN_FORCE_IOC, reduceOnly, routerFeePpm, routerSubaccount, memo);
}
function getAdjustedMarketOrderPrice(orderBookPrice, side) {
    if (side === shared_1.OrderSide.BUY) {
        return orderBookPrice * 1.05;
    }
    return orderBookPrice * 0.95;
}
function getAdjustedGoodTillBlock(currentBlock) {
    return currentBlock + constants_1.SHORT_TERM_ORDER_GTB;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0LW9yZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3RyYW5zYWN0aW9ucy9tYXJrZXQtb3JkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFZQSxnRkFzQkM7QUFFRCw0REE0QkM7QUFoRUQsNkVBQXNGO0FBUXRGLDBDQUEwQztBQUMxQyxtQ0FBNEM7QUFDNUMsMkNBQW1EO0FBRTVDLEtBQUssVUFBVSxrQ0FBa0MsQ0FDdEQsV0FBd0IsRUFDeEIsV0FBaUMsRUFDakMsVUFBZ0MsRUFDaEMsY0FBc0IsRUFDdEIsWUFBb0IsRUFDcEIsWUFBcUIsRUFDckIsZ0JBQWlDOztJQUVqQyxPQUFPLFdBQVcsQ0FBQyxtQkFBbUIsQ0FDcEMsVUFBVSxFQUNWLFdBQVcsQ0FBQyxRQUFRLEVBQ3BCLFdBQVcsQ0FBQyxJQUFJLEVBQ2hCLDJCQUEyQixDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQzdELFdBQVcsQ0FBQyxTQUFTLEVBQ3JCLElBQUEseUJBQWlCLEdBQUUsRUFDbkIsd0JBQXdCLENBQUMsWUFBWSxDQUFDLEVBQ3RDLHlCQUFpQixDQUFDLFlBQVksRUFDOUIsTUFBQSxXQUFXLENBQUMsVUFBVSxtQ0FBSSxLQUFLLEVBQy9CLFlBQVksRUFDWixnQkFBZ0IsQ0FDakIsQ0FBQztBQUNKLENBQUM7QUFFTSxLQUFLLFVBQVUsd0JBQXdCLENBQzVDLFdBQXdCLEVBQ3hCLFVBQWdDLEVBQ2hDLE1BQWMsRUFDZCxJQUFlLEVBQ2YsY0FBc0IsRUFDdEIsSUFBWSxFQUNaLFVBQW1CLEVBQ25CLFlBQW9CLEVBQ3BCLFFBQWlCLEVBQ2pCLFlBQXFCLEVBQ3JCLGdCQUFpQyxFQUNqQyxJQUFhO0lBRWIsT0FBTyxNQUFNLFdBQVcsQ0FBQyxtQkFBbUIsQ0FDMUMsVUFBVSxFQUNWLE1BQU0sRUFDTixJQUFJLEVBQ0osMkJBQTJCLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUNqRCxJQUFJLEVBQ0osUUFBUSxhQUFSLFFBQVEsY0FBUixRQUFRLEdBQUksSUFBQSx5QkFBaUIsR0FBRSxFQUMvQix3QkFBd0IsQ0FBQyxZQUFZLENBQUMsRUFDdEMseUJBQWlCLENBQUMsaUJBQWlCLEVBQ25DLFVBQVUsRUFDVixZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLElBQUksQ0FDTCxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsMkJBQTJCLENBQ2xDLGNBQXNCLEVBQ3RCLElBQWU7SUFFZixJQUFJLElBQUksS0FBSyxrQkFBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzNCLE9BQU8sY0FBYyxHQUFHLElBQUksQ0FBQztJQUMvQixDQUFDO0lBRUQsT0FBTyxjQUFjLEdBQUcsSUFBSSxDQUFDO0FBQy9CLENBQUM7QUFFRCxTQUFTLHdCQUF3QixDQUFDLFlBQW9CO0lBQ3BELE9BQU8sWUFBWSxHQUFHLGdDQUFvQixDQUFDO0FBQzdDLENBQUMifQ==