"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Klyra = void 0;
const chain_1 = require("@klyra/chain");
const cortex_1 = __importStar(require("@klyra/cortex"));
const shared_1 = require("@klyra/shared");
const shared_2 = require("@klyra/shared");
const ws_1 = __importDefault(require("@klyra/ws"));
const field_validations_1 = require("./transactions/field-validations");
const cancel_order_1 = require("./transactions/cancel-order");
const conditional_orders_1 = require("./transactions/conditional-orders");
const limit_order_1 = require("./transactions/limit-order");
const market_order_1 = require("./transactions/market-order");
const transfers_1 = require("./transactions/transfers");
class Klyra {
    constructor(config) {
        var _a, _b, _c, _d;
        this.config = new shared_1.Config(config.environment);
        const envConfig = this.config.getEnvConfig();
        this.routerSubaccountInfo = new chain_1.SubaccountInfo(config.fees.address, config.fees.subaccountNumber);
        this.routerFeePpm = config.fees.feePpm;
        // TODO: make this customizable by the user (they can pass their own statemanager)
        this.stateManager = new cortex_1.default({ ...config.cortex });
        this.websocketManager = new ws_1.default({
            ...config.websocket,
            url: envConfig.indexer.ws,
        });
        this.chainClient = new chain_1.ChainClient({
            node: {
                restUrl: envConfig.node.rest,
                chainId: envConfig.chainId,
            },
            indexer: {
                urls: envConfig.indexer,
            },
        });
        this.subscribeOnConnect = (_b = (_a = config.websocket) === null || _a === void 0 ? void 0 : _a.subscribeOnConnect) !== null && _b !== void 0 ? _b : true;
        this.websocketEnabled = (_d = (_c = config.websocket) === null || _c === void 0 ? void 0 : _c.enabled) !== null && _d !== void 0 ? _d : true;
    }
    async initialize() {
        this.websocketManager.on("message", (message) => {
            this.webSocketMessageReceived(message);
        });
        this.websocketManager.connect();
        await this.chainClient.initialize();
    }
    close() {
        this.websocketManager.disconnect();
    }
    getStore() {
        return this.stateManager.getState();
    }
    subscribeToState(listener) {
        return this.stateManager.subscribeToState(listener);
    }
    webSocketMessageReceived(message) {
        // if the message type is connected, we need to subscribe to all channels
        if (message.type === shared_2.MessageType.CONNECTED) {
            const channelsToSubscribe = [
                [shared_2.MessageChannel.MARKETS],
                // We don't connect to account because at this point the user hasn't authenticated yet
                // On authenticated, we will connect to account channel
            ];
            const { currentMarketTicker, user } = this.stateManager.getState();
            // If the app has a default market id, we subscribe to the specific market channels
            // Otherwise, we subscribe only to the general channels (markets) and wait for a user to set a market id
            if (currentMarketTicker) {
                channelsToSubscribe.push([shared_2.MessageChannel.CANDLES, currentMarketTicker]);
                channelsToSubscribe.push([
                    shared_2.MessageChannel.ORDERBOOK,
                    currentMarketTicker,
                ]);
                channelsToSubscribe.push([shared_2.MessageChannel.TRADES, currentMarketTicker]);
            }
            if (user.address) {
                channelsToSubscribe.push([
                    shared_2.MessageChannel.PARENT_SUBACCOUNTS,
                    `${user.address}/0`,
                ]);
            }
            if (this.subscribeOnConnect) {
                channelsToSubscribe.forEach(([channel, id]) => {
                    this.subscribeToWebSocketChannel(channel, id);
                });
            }
            return;
        }
        // otherwise, it's a "subscribed" or "channel_batch_data" message
        // so we pass it to Cortex
        this.stateManager.handleMessage(message);
    }
    subscribeToWebSocketChannel(channel, id) {
        if (this.websocketEnabled && this.websocketManager.isConnected) {
            this.websocketManager.send({
                type: shared_2.MessageType.SUBSCRIBE,
                channel,
                batched: true,
                id,
            });
        }
    }
    getChainClient() {
        return this.chainClient;
    }
    setCurrentTicker(ticker) {
        this.stateManager.setCurrentMarketTicker(ticker);
        // subscribe to the specific market channels
        this.subscribeToWebSocketChannel(shared_2.MessageChannel.CANDLES, ticker);
        this.subscribeToWebSocketChannel(shared_2.MessageChannel.ORDERBOOK, ticker);
        this.subscribeToWebSocketChannel(shared_2.MessageChannel.TRADES, ticker);
    }
    formInput(formType, fieldName, value) {
        this.stateManager.formInput(formType, fieldName, value);
    }
    setSubaccountNumber(subaccountNumber) {
        this.stateManager.setSubaccountNumber(subaccountNumber);
    }
    async getSubaccountFromSignature(signature, subaccountNumber = 0) {
        const { wallet, address } = await this.authenticateUserFromSignature(signature);
        const subaccountInfo = new chain_1.WalletSubaccountInfo(wallet, subaccountNumber);
        return { subaccount: subaccountInfo, wallet, address };
    }
    async getSubaccountFromUUID(uuid, subaccountNumber = 0) {
        const { wallet, address } = await this.authenticateUserFromUUID(uuid);
        const subaccountInfo = new chain_1.WalletSubaccountInfo(wallet, subaccountNumber);
        return { subaccount: subaccountInfo, wallet, address };
    }
    async authenticateUserFromUUID(uuid) {
        const { wallet } = await (0, chain_1.getAccountFromUUID)(uuid);
        const address = wallet.getAddress();
        this.subscribeToWebSocketChannel(shared_2.MessageChannel.PARENT_SUBACCOUNTS, `${address}/0` // we add the subaccount number to the end to subscribe to the parent subaccount
        );
        this.stateManager.setAddress(address);
        this.setSubaccountNumber(0);
        this.stateManager.setWalletInfo(wallet);
        return { wallet, address };
    }
    async authenticateUserFromSignature(signedMessage) {
        const { wallet } = await (0, chain_1.getAccountFromSignedMessage)(signedMessage);
        const address = wallet.getAddress();
        this.subscribeToWebSocketChannel(shared_2.MessageChannel.PARENT_SUBACCOUNTS, `${address}/0` // we add the subaccount number to the end to subscribe to the parent subaccount
        );
        this.stateManager.setAddress(address);
        this.setSubaccountNumber(0);
        this.stateManager.setWalletInfo(wallet);
        return { wallet, address };
    }
    getOrderbookPrice(ticker) {
        var _a, _b;
        const state = this.stateManager.getState();
        return (_b = (_a = state.orderbooks[ticker]) === null || _a === void 0 ? void 0 : _a.midPrice) !== null && _b !== void 0 ? _b : 0;
    }
    async getCurrentBlock() {
        const { height } = await this.chainClient.indexerClient.utils.getHeight();
        return parseInt(height);
    }
    async getCurrentBlockTime() {
        const time = await this.chainClient.indexerClient.utils.getTime();
        return new Date(time.iso).getTime();
    }
    getTradeInputs() {
        const state = this.stateManager.getState();
        const tradeForm = state.forms[cortex_1.FormType.TRADE];
        return tradeForm.inputs;
    }
    async placeMarketOrder(subaccount, ticker, side, size, reduceOnly, clientId, routerFeePpm, routerSubaccount, memo) {
        if (!this.chainClient.isInitialized) {
            throw new Error("Chain client not initialized");
        }
        const subaccountInfo = this.getSubaccountInfo(subaccount);
        if (this.config.isUsingCortexForms()) {
            const inputs = this.getTradeInputs();
            const hasValidInputs = (0, field_validations_1.validateFields)({
                ticker: inputs.marketId,
                side: inputs.side,
                size: inputs.quoteSize,
                reduceOnly: inputs.reduceOnly,
            });
            if (!hasValidInputs) {
                throw new Error("Invalid market order inputs");
            }
            return (0, market_order_1.internalPlaceMarketOrderWithCortex)(this.chainClient, inputs, subaccountInfo, this.getOrderbookPrice(inputs.marketId), await this.getCurrentBlock(), routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo);
        }
        const hasValidInputs = (0, field_validations_1.validateFields)({
            subaccount,
            ticker,
            side,
            size,
            reduceOnly,
        });
        if (!hasValidInputs) {
            throw new Error("When Cortex is disabled, you must pass in order arguments");
        }
        return (0, market_order_1.internalPlaceMarketOrder)(this.chainClient, subaccountInfo, ticker, side, this.getOrderbookPrice(ticker), size, reduceOnly, await this.getCurrentBlock(), clientId, routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo, memo);
    }
    async placeLimitOrder(subaccount, ticker, side, price, size, goodTilBlockTime, reduceOnly, clientId, routerFeePpm, routerSubaccount, memo) {
        if (!this.chainClient.isInitialized) {
            throw new Error("Chain client not initialized");
        }
        const subaccountInfo = this.getSubaccountInfo(subaccount);
        if (this.config.isUsingCortexForms()) {
            const inputs = this.getTradeInputs();
            const hasValidInputs = (0, field_validations_1.validateFields)({
                ticker: inputs.marketId,
                side: inputs.side,
                price: inputs.price,
                size: inputs.quoteSize,
                goodTilTime: inputs.goodTilTime,
                reduceOnly: inputs.reduceOnly,
            });
            if (!hasValidInputs) {
                throw new Error("Invalid limit order inputs");
            }
            return (0, limit_order_1.internalPlaceLimitOrderWithCortex)(this.chainClient, inputs, subaccountInfo, routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo);
        }
        const hasValidInputs = (0, field_validations_1.validateFields)({
            subaccount,
            ticker,
            side,
            price,
            size,
            goodTilTime: goodTilBlockTime,
            reduceOnly,
        });
        if (!hasValidInputs) {
            throw new Error("When Cortex is disabled, you must pass in order arguments");
        }
        return await (0, limit_order_1.internalPlaceLimitOrder)(this.chainClient, subaccountInfo, ticker, side, price, size, goodTilBlockTime, reduceOnly, clientId, routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo, memo);
    }
    async placeStopLossLimitOrder(subaccount, ticker, side, price, triggerPrice, size, goodTilBlockTime, reduceOnly, clientId, routerFeePpm, routerSubaccount, memo) {
        if (!this.chainClient.isInitialized) {
            throw new Error("Chain client not initialized");
        }
        const subaccountInfo = this.getSubaccountInfo(subaccount);
        if (this.config.isUsingCortexForms()) {
            const inputs = this.getTradeInputs();
            const hasValidInputs = (0, field_validations_1.validateFields)({
                ticker: inputs.marketId,
                side: inputs.side,
                price: inputs.price,
                triggerPrice: inputs.triggerPrice,
                size: inputs.quoteSize,
                goodTilTime: inputs.goodTilTime,
                reduceOnly: inputs.reduceOnly,
            });
            if (!hasValidInputs) {
                throw new Error("Invalid stop loss limit order inputs");
            }
            return (0, conditional_orders_1.internalPlaceStopLossLimitOrderWithCortex)(this.chainClient, inputs, subaccountInfo, routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo);
        }
        const hasValidInputs = (0, field_validations_1.validateFields)({
            subaccount,
            ticker,
            side,
            price,
            triggerPrice,
            size,
            goodTilTime: goodTilBlockTime,
            reduceOnly,
        });
        if (!hasValidInputs) {
            throw new Error("When Cortex is disabled, you must pass in order arguments");
        }
        return await (0, conditional_orders_1.internalPlaceStopLossLimitOrder)(this.chainClient, subaccountInfo, ticker, side, price, triggerPrice, size, goodTilBlockTime, reduceOnly, clientId, routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo, memo);
    }
    async placeStopLossMarketOrder(subaccount, ticker, side, triggerPrice, size, goodTilBlockTime, reduceOnly, clientId, routerFeePpm, routerSubaccount, memo) {
        if (!this.chainClient.isInitialized) {
            throw new Error("Chain client not initialized");
        }
        const subaccountInfo = this.getSubaccountInfo(subaccount);
        if (this.config.isUsingCortexForms()) {
            const inputs = this.getTradeInputs();
            const hasValidInputs = (0, field_validations_1.validateFields)({
                ticker: inputs.marketId,
                side: inputs.side,
                triggerPrice: inputs.triggerPrice,
                size: inputs.quoteSize,
                goodTilTime: inputs.goodTilTime,
                reduceOnly: inputs.reduceOnly,
            });
            if (!hasValidInputs) {
                throw new Error("Invalid stop loss market order inputs");
            }
            return (0, conditional_orders_1.internalPlaceStopLossMarketOrderWithCortex)(this.chainClient, inputs, subaccountInfo, routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo);
        }
        const hasValidInputs = (0, field_validations_1.validateFields)({
            subaccount,
            ticker,
            side,
            triggerPrice,
            size,
            goodTilTime: goodTilBlockTime,
            reduceOnly,
        });
        if (!hasValidInputs) {
            throw new Error("When Cortex is disabled, you must pass in order arguments");
        }
        return await (0, conditional_orders_1.internalPlaceStopLossMarketOrder)(this.chainClient, subaccountInfo, ticker, side, 0, triggerPrice, size, goodTilBlockTime, reduceOnly, clientId, routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo, memo);
    }
    async placeTakeProfitMarketOrder(subaccount, ticker, side, triggerPrice, size, goodTilBlockTime, reduceOnly, clientId, routerFeePpm, routerSubaccount, memo) {
        if (!this.chainClient.isInitialized) {
            throw new Error("Chain client not initialized");
        }
        const subaccountInfo = this.getSubaccountInfo(subaccount);
        if (this.config.isUsingCortexForms()) {
            const inputs = this.getTradeInputs();
            const hasValidInputs = (0, field_validations_1.validateFields)({
                ticker: inputs.marketId,
                side: inputs.side,
                triggerPrice: inputs.triggerPrice,
                size: inputs.quoteSize,
                goodTilTime: inputs.goodTilTime,
                reduceOnly: inputs.reduceOnly,
            });
            if (!hasValidInputs) {
                throw new Error("Invalid take profit market order inputs");
            }
            return (0, conditional_orders_1.internalPlaceTakeProfitMarketOrderWithCortex)(this.chainClient, inputs, subaccountInfo, routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo);
        }
        const hasValidInputs = (0, field_validations_1.validateFields)({
            subaccount,
            ticker,
            side,
            triggerPrice,
            size,
            goodTilTime: goodTilBlockTime,
            reduceOnly,
        });
        if (!hasValidInputs) {
            throw new Error("When Cortex is disabled, you must pass in order arguments");
        }
        return await (0, conditional_orders_1.internalPlaceTakeProfitMarketOrder)(this.chainClient, subaccountInfo, ticker, side, 0, triggerPrice, size, goodTilBlockTime, reduceOnly, clientId, routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo, memo);
    }
    async placeTakeProfitLimitOrder(subaccount, ticker, side, price, triggerPrice, size, goodTilBlockTime, reduceOnly, clientId, routerFeePpm, routerSubaccount, memo) {
        if (!this.chainClient.isInitialized) {
            throw new Error("Chain client not initialized");
        }
        if (this.config.isUsingCortexForms()) {
            const inputs = this.getTradeInputs();
            const hasValidInputs = (0, field_validations_1.validateFields)({
                ticker: inputs.marketId,
                side: inputs.side,
                price: inputs.price,
                triggerPrice: inputs.triggerPrice,
                size: inputs.quoteSize,
                goodTilTime: inputs.goodTilTime,
                reduceOnly: inputs.reduceOnly,
            });
            if (!hasValidInputs) {
                throw new Error("Invalid take profit limit order inputs");
            }
            const subaccountInfo = this.getSubaccountInfo(subaccount);
            return (0, conditional_orders_1.internalPlaceTakeProfitLimitOrderWithCortex)(this.chainClient, inputs, subaccountInfo, routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo);
        }
        const hasValidInputs = (0, field_validations_1.validateFields)({
            subaccount,
            ticker,
            side,
            price,
            triggerPrice,
            size,
            goodTilTime: goodTilBlockTime,
            reduceOnly,
        });
        if (!hasValidInputs) {
            throw new Error("When Cortex is disabled, you must pass in order arguments");
        }
        return await (0, conditional_orders_1.internalPlaceTakeProfitLimitOrder)(this.chainClient, subaccount, ticker, side, price, triggerPrice, size, goodTilBlockTime, reduceOnly, clientId, routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo, memo);
    }
    async placeCustomOrder(subaccount, ticker, type, side, price, size, clientId, timeInForce, goodTilTimeInSeconds, routerFeePpm, routerSubaccount, execution, postOnly, reduceOnly, triggerPrice, marketInfo, currentHeight, goodTilBlock, memo) {
        return await this.chainClient.placeOrder(subaccount, ticker, type, side, price, size, clientId, timeInForce, goodTilTimeInSeconds, routerFeePpm !== null && routerFeePpm !== void 0 ? routerFeePpm : this.routerFeePpm, routerSubaccount !== null && routerSubaccount !== void 0 ? routerSubaccount : this.routerSubaccountInfo, execution, postOnly, reduceOnly, triggerPrice, marketInfo, currentHeight, goodTilBlock, memo);
    }
    async cancelMarketOrder(subaccount, ticker, clientId, goodTilBlock) {
        if (!this.chainClient.isInitialized) {
            throw new Error("Chain client not initialized");
        }
        const subaccountInfo = this.getSubaccountInfo(subaccount);
        const hasValidInputs = (0, cancel_order_1.hasReceivedNecessaryCancelOrderArgs)(false, null, subaccountInfo, ticker, clientId, goodTilBlock);
        if (!hasValidInputs) {
            throw new Error("You must pass in order arguments to cancel an order.");
        }
        return await this.chainClient.cancelOrder(subaccountInfo, clientId, chain_1.OrderFlags.SHORT_TERM, ticker, goodTilBlock);
    }
    async cancelLimitOrder(subaccount, ticker, clientId, goodTilBlockTime) {
        if (!this.chainClient.isInitialized) {
            throw new Error("Chain client not initialized");
        }
        // const currBlock = await this.getCurrentBlock();
        const subaccountInfo = this.getSubaccountInfo(subaccount);
        const hasValidInputs = (0, cancel_order_1.hasReceivedNecessaryCancelOrderArgs)(true, null, subaccountInfo, ticker, clientId);
        if (!hasValidInputs) {
            throw new Error("You must pass in order arguments to cancel an order.");
        }
        return await this.chainClient.cancelOrder(subaccountInfo, clientId, chain_1.OrderFlags.LONG_TERM, ticker, undefined, goodTilBlockTime);
    }
    async cancelConditionalOrder(subaccount, ticker, clientId, goodTilBlockTime) {
        if (!this.chainClient.isInitialized) {
            throw new Error("Chain client not initialized");
        }
        const subaccountInfo = this.getSubaccountInfo(subaccount);
        const hasValidInputs = (0, cancel_order_1.hasReceivedNecessaryCancelOrderArgs)(true, null, subaccountInfo, ticker, clientId);
        if (!hasValidInputs) {
            throw new Error("You must pass in order arguments to cancel an order.");
        }
        return await this.chainClient.cancelOrder(subaccountInfo, clientId, chain_1.OrderFlags.CONDITIONAL, ticker, undefined, goodTilBlockTime);
    }
    async transfer(subaccount, recipientAddress, recipientSubaccountNumber, amount) {
        if (!this.chainClient.isInitialized) {
            throw new Error("Chain client not initialized");
        }
        const hasValidInputs = (0, transfers_1.hasValidTransferArgs)(subaccount, recipientAddress, recipientSubaccountNumber, amount);
        if (!hasValidInputs) {
            throw new Error("You must pass in order arguments to transfer an asset.");
        }
        return this.chainClient.transferToSubaccount(subaccount, recipientAddress, recipientSubaccountNumber, amount);
    }
    async getMarketInfo(ticker) {
        const marketsClient = this.chainClient.indexerClient.markets;
        const marketInfo = await marketsClient.getPerpetualMarket(ticker);
        return marketInfo;
    }
    async getMarketCandles(ticker, resolution, fromISO, toISO) {
        const marketsClient = this.chainClient.indexerClient.markets;
        const candles = await marketsClient.getPerpetualMarketCandles(ticker, resolution, fromISO, toISO);
        return candles.candles;
    }
    async getOrderbook(ticker) {
        const marketsClient = this.chainClient.indexerClient.markets;
        const orderbook = marketsClient.getPerpetualMarketOrderbook(ticker);
        return orderbook;
    }
    async getMarketTrades(ticker, startingBeforeOrAt, page) {
        const marketsClient = this.chainClient.indexerClient.markets;
        const trades = await marketsClient.getPerpetualMarketTrades(ticker, undefined, startingBeforeOrAt, undefined, page);
        return trades.trades;
    }
    async getHistoricalFundingRates(ticker) {
        const marketsClient = this.chainClient.indexerClient.markets;
        const historicalFundings = await marketsClient.getPerpetualMarketHistoricalFunding(ticker);
        return historicalFundings.historicalFunding;
    }
    async getUserPositions(address, subaccountNumber) {
        const account = this.chainClient.indexerClient.account;
        const trades = await account.getSubaccountAssetPositions(address, subaccountNumber);
        return trades;
    }
    // TODO(UCC) - we should transition types like IndexerOrderSide to OrderSide in the return
    async getUserOrders(address, subaccountNumber, ticker, side) {
        const account = this.chainClient.indexerClient.account;
        const orders = await account.getSubaccountOrders(address, subaccountNumber, ticker, side);
        return orders;
    }
    async getUserFills(address, subaccountNumber, ticker, createdBeforeOrAt, page) {
        const account = this.chainClient.indexerClient.account;
        const fills = await account.getSubaccountFills(address, subaccountNumber, ticker, undefined, undefined, createdBeforeOrAt, page);
        return fills;
    }
    async getUserTransfers(address, subaccountNumber, createdBeforeOrAt, page) {
        const account = this.chainClient.indexerClient.account;
        const transfers = await account.getSubaccountTransfers(address, subaccountNumber, undefined, undefined, createdBeforeOrAt, page);
        return transfers;
    }
    async getUserHistoricalPNLs(address, subaccountNumber, createdOnOrAfter, page) {
        const account = this.chainClient.indexerClient.account;
        const pnls = await account.getSubaccountHistoricalPNLs(address, subaccountNumber, undefined, undefined, undefined, createdOnOrAfter, undefined, page);
        return pnls;
    }
    async getParentSubaccountFills(address, parentSubaccountNumber, ticker, limit, createdBeforeOrAtHeight, createdBeforeOrAt, page) {
        const account = this.chainClient.indexerClient.account;
        const fills = await account.getParentSubaccountNumberFills(address, parentSubaccountNumber, ticker, limit, createdBeforeOrAtHeight, createdBeforeOrAt, page);
        return fills;
    }
    async getParentSubaccountTransfers(address, parentSubaccountNumber, limit, createdBeforeOrAtHeight, createdBeforeOrAt, page) {
        const account = this.chainClient.indexerClient.account;
        const transfers = await account.getParentSubaccountNumberTransfers(address, parentSubaccountNumber, limit, createdBeforeOrAtHeight, createdBeforeOrAt, page);
        return transfers;
    }
    async getAllUserSubaccountsInfo(address) {
        const account = this.chainClient.indexerClient.account;
        const subaccounts = await account.getSubaccounts(address);
        return subaccounts.subaccounts;
    }
    async getUserSubaccountInfo(address, subaccountNumber) {
        const account = this.chainClient.indexerClient.account;
        const subaccount = await account.getSubaccount(address, subaccountNumber);
        return subaccount;
    }
    async getOrder(orderId) {
        const account = this.chainClient.indexerClient.account;
        const order = await account.getOrder(orderId);
        return order;
    }
    async getAllMarkets() {
        const marketsClient = this.chainClient.indexerClient.markets;
        const markets = await marketsClient.getAllPerpetualMarkets();
        return markets.markets;
    }
    getSubaccountInfo(subaccount) {
        let subaccountInfo = subaccount;
        if (!subaccountInfo) {
            const { subaccountNumber, wallet } = this.stateManager.getState().user;
            if (!wallet) {
                throw new Error("You must authenticate the user (via `authenticateUser(...)`) before cancelling an order.");
            }
            subaccountInfo = new chain_1.WalletSubaccountInfo(wallet, subaccountNumber);
        }
        return subaccountInfo;
    }
}
exports.Klyra = Klyra;
//# sourceMappingURL=data:application/json;base64,